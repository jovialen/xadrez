<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="597.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="10998"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.05%)</title><rect x="0.0091%" y="517" width="0.0455%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="5"/><text x="0.2591%" y="527.50"></text></g><g><title>[libc.so.6] (34 samples, 0.31%)</title><rect x="0.0546%" y="517" width="0.3091%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="34"/><text x="0.3046%" y="527.50"></text></g><g><title>[[heap]] (43 samples, 0.39%)</title><rect x="0.0091%" y="533" width="0.3910%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="43"/><text x="0.2591%" y="543.50"></text></g><g><title>malloc (4 samples, 0.04%)</title><rect x="0.3637%" y="517" width="0.0364%" height="15" fill="rgb(248,212,6)" fg:x="40" fg:w="4"/><text x="0.6137%" y="527.50"></text></g><g><title>[libc.so.6] (6 samples, 0.05%)</title><rect x="0.4001%" y="517" width="0.0546%" height="15" fill="rgb(208,68,35)" fg:x="44" fg:w="6"/><text x="0.6501%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.11%)</title><rect x="0.4546%" y="517" width="0.1091%" height="15" fill="rgb(232,128,0)" fg:x="50" fg:w="12"/><text x="0.7046%" y="527.50"></text></g><g><title>[[stack]] (23 samples, 0.21%)</title><rect x="0.4001%" y="533" width="0.2091%" height="15" fill="rgb(207,160,47)" fg:x="44" fg:w="23"/><text x="0.6501%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.05%)</title><rect x="0.5637%" y="517" width="0.0455%" height="15" fill="rgb(228,23,34)" fg:x="62" fg:w="5"/><text x="0.8137%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.06%)</title><rect x="0.6092%" y="533" width="0.0636%" height="15" fill="rgb(218,30,26)" fg:x="67" fg:w="7"/><text x="0.8592%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.6547%" y="517" width="0.0182%" height="15" fill="rgb(220,122,19)" fg:x="72" fg:w="2"/><text x="0.9047%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.6547%" y="501" width="0.0182%" height="15" fill="rgb(250,228,42)" fg:x="72" fg:w="2"/><text x="0.9047%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.6547%" y="485" width="0.0182%" height="15" fill="rgb(240,193,28)" fg:x="72" fg:w="2"/><text x="0.9047%" y="495.50"></text></g><g><title>[libc.so.6] (72 samples, 0.65%)</title><rect x="0.6728%" y="517" width="0.6547%" height="15" fill="rgb(216,20,37)" fg:x="74" fg:w="72"/><text x="0.9228%" y="527.50"></text></g><g><title>[libc.so.6] (74 samples, 0.67%)</title><rect x="0.6728%" y="533" width="0.6728%" height="15" fill="rgb(206,188,39)" fg:x="74" fg:w="74"/><text x="0.9228%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="1.3275%" y="517" width="0.0182%" height="15" fill="rgb(217,207,13)" fg:x="146" fg:w="2"/><text x="1.5775%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (49 samples, 0.45%)</title><rect x="1.3639%" y="517" width="0.4455%" height="15" fill="rgb(231,73,38)" fg:x="150" fg:w="49"/><text x="1.6139%" y="527.50"></text></g><g><title>[libc.so.6] (333 samples, 3.03%)</title><rect x="1.8094%" y="517" width="3.0278%" height="15" fill="rgb(225,20,46)" fg:x="199" fg:w="333"/><text x="2.0594%" y="527.50">[li..</text></g><g><title>__rdl_alloc (6 samples, 0.05%)</title><rect x="4.8372%" y="517" width="0.0546%" height="15" fill="rgb(210,31,41)" fg:x="532" fg:w="6"/><text x="5.0872%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.05%)</title><rect x="4.8372%" y="501" width="0.0546%" height="15" fill="rgb(221,200,47)" fg:x="532" fg:w="6"/><text x="5.0872%" y="511.50"></text></g><g><title>__rdl_realloc (49 samples, 0.45%)</title><rect x="4.8918%" y="517" width="0.4455%" height="15" fill="rgb(226,26,5)" fg:x="538" fg:w="49"/><text x="5.1418%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (28 samples, 0.25%)</title><rect x="5.0827%" y="501" width="0.2546%" height="15" fill="rgb(249,33,26)" fg:x="559" fg:w="28"/><text x="5.3327%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (34 samples, 0.31%)</title><rect x="5.3373%" y="517" width="0.3091%" height="15" fill="rgb(235,183,28)" fg:x="587" fg:w="34"/><text x="5.5873%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (68 samples, 0.62%)</title><rect x="5.6465%" y="517" width="0.6183%" height="15" fill="rgb(221,5,38)" fg:x="621" fg:w="68"/><text x="5.8965%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (132 samples, 1.20%)</title><rect x="6.2648%" y="517" width="1.2002%" height="15" fill="rgb(247,18,42)" fg:x="689" fg:w="132"/><text x="6.5148%" y="527.50"></text></g><g><title>cfree (41 samples, 0.37%)</title><rect x="7.4650%" y="517" width="0.3728%" height="15" fill="rgb(241,131,45)" fg:x="821" fg:w="41"/><text x="7.7150%" y="527.50"></text></g><g><title>malloc (49 samples, 0.45%)</title><rect x="7.8378%" y="517" width="0.4455%" height="15" fill="rgb(249,31,29)" fg:x="862" fg:w="49"/><text x="8.0878%" y="527.50"></text></g><g><title>realloc (167 samples, 1.52%)</title><rect x="8.2833%" y="517" width="1.5185%" height="15" fill="rgb(225,111,53)" fg:x="911" fg:w="167"/><text x="8.5333%" y="527.50"></text></g><g><title>xadrez::board::Chessboard::make_move (60 samples, 0.55%)</title><rect x="9.8018%" y="517" width="0.5456%" height="15" fill="rgb(238,160,17)" fg:x="1078" fg:w="60"/><text x="10.0518%" y="527.50"></text></g><g><title>xadrez::board::Chessboard::perft (66 samples, 0.60%)</title><rect x="10.3473%" y="517" width="0.6001%" height="15" fill="rgb(214,148,48)" fg:x="1138" fg:w="66"/><text x="10.5973%" y="527.50"></text></g><g><title>xadrez::movegen::generate_legal_moves (73 samples, 0.66%)</title><rect x="10.9474%" y="517" width="0.6638%" height="15" fill="rgb(232,36,49)" fg:x="1204" fg:w="73"/><text x="11.1974%" y="527.50"></text></g><g><title>[unknown] (1,216 samples, 11.06%)</title><rect x="1.3457%" y="533" width="11.0566%" height="15" fill="rgb(209,103,24)" fg:x="148" fg:w="1216"/><text x="1.5957%" y="543.50">[unknown]</text></g><g><title>xadrez::movegen::generate_moves (87 samples, 0.79%)</title><rect x="11.6112%" y="517" width="0.7911%" height="15" fill="rgb(229,88,8)" fg:x="1277" fg:w="87"/><text x="11.8612%" y="527.50"></text></g><g><title>&lt;xadrez::board::Chessboard as core::default::Default&gt;::default (20 samples, 0.18%)</title><rect x="12.4023%" y="277" width="0.1819%" height="15" fill="rgb(213,181,19)" fg:x="1364" fg:w="20"/><text x="12.6523%" y="287.50"></text></g><g><title>xadrez::movegen::generate_legal_moves (20 samples, 0.18%)</title><rect x="12.4023%" y="261" width="0.1819%" height="15" fill="rgb(254,191,54)" fg:x="1364" fg:w="20"/><text x="12.6523%" y="271.50"></text></g><g><title>xadrez::movegen::generate_moves (20 samples, 0.18%)</title><rect x="12.4023%" y="245" width="0.1819%" height="15" fill="rgb(241,83,37)" fg:x="1364" fg:w="20"/><text x="12.6523%" y="255.50"></text></g><g><title>std::sync::once::Once::call_inner (20 samples, 0.18%)</title><rect x="12.4023%" y="229" width="0.1819%" height="15" fill="rgb(233,36,39)" fg:x="1364" fg:w="20"/><text x="12.6523%" y="239.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (20 samples, 0.18%)</title><rect x="12.4023%" y="213" width="0.1819%" height="15" fill="rgb(226,3,54)" fg:x="1364" fg:w="20"/><text x="12.6523%" y="223.50"></text></g><g><title>xadrez::movegen::MagicTable&lt;_&gt;::new (20 samples, 0.18%)</title><rect x="12.4023%" y="197" width="0.1819%" height="15" fill="rgb(245,192,40)" fg:x="1364" fg:w="20"/><text x="12.6523%" y="207.50"></text></g><g><title>xadrez::board::Chessboard::make_move (4 samples, 0.04%)</title><rect x="12.5932%" y="197" width="0.0364%" height="15" fill="rgb(238,167,29)" fg:x="1385" fg:w="4"/><text x="12.8432%" y="207.50"></text></g><g><title>xadrez::movegen::generate_legal_moves (4 samples, 0.04%)</title><rect x="12.5932%" y="181" width="0.0364%" height="15" fill="rgb(232,182,51)" fg:x="1385" fg:w="4"/><text x="12.8432%" y="191.50"></text></g><g><title>xadrez::movegen::generate_moves (2 samples, 0.02%)</title><rect x="12.6114%" y="165" width="0.0182%" height="15" fill="rgb(231,60,39)" fg:x="1387" fg:w="2"/><text x="12.8614%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.04%)</title><rect x="12.9296%" y="133" width="0.0364%" height="15" fill="rgb(208,69,12)" fg:x="1422" fg:w="4"/><text x="13.1796%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.04%)</title><rect x="12.9296%" y="117" width="0.0364%" height="15" fill="rgb(235,93,37)" fg:x="1422" fg:w="4"/><text x="13.1796%" y="127.50"></text></g><g><title>realloc (4 samples, 0.04%)</title><rect x="12.9296%" y="101" width="0.0364%" height="15" fill="rgb(213,116,39)" fg:x="1422" fg:w="4"/><text x="13.1796%" y="111.50"></text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="12.9387%" y="85" width="0.0273%" height="15" fill="rgb(222,207,29)" fg:x="1423" fg:w="3"/><text x="13.1887%" y="95.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="12.9478%" y="69" width="0.0182%" height="15" fill="rgb(206,96,30)" fg:x="1424" fg:w="2"/><text x="13.1978%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23 samples, 0.21%)</title><rect x="12.7660%" y="149" width="0.2091%" height="15" fill="rgb(218,138,4)" fg:x="1404" fg:w="23"/><text x="13.0160%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.05%)</title><rect x="12.9751%" y="149" width="0.0455%" height="15" fill="rgb(250,191,14)" fg:x="1427" fg:w="5"/><text x="13.2251%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.05%)</title><rect x="12.9751%" y="133" width="0.0455%" height="15" fill="rgb(239,60,40)" fg:x="1427" fg:w="5"/><text x="13.2251%" y="143.50"></text></g><g><title>realloc (5 samples, 0.05%)</title><rect x="12.9751%" y="117" width="0.0455%" height="15" fill="rgb(206,27,48)" fg:x="1427" fg:w="5"/><text x="13.2251%" y="127.50"></text></g><g><title>[libc.so.6] (5 samples, 0.05%)</title><rect x="12.9751%" y="101" width="0.0455%" height="15" fill="rgb(225,35,8)" fg:x="1427" fg:w="5"/><text x="13.2251%" y="111.50"></text></g><g><title>[libc.so.6] (4 samples, 0.04%)</title><rect x="12.9842%" y="85" width="0.0364%" height="15" fill="rgb(250,213,24)" fg:x="1428" fg:w="4"/><text x="13.2342%" y="95.50"></text></g><g><title>cfree (2 samples, 0.02%)</title><rect x="13.0205%" y="149" width="0.0182%" height="15" fill="rgb(247,123,22)" fg:x="1432" fg:w="2"/><text x="13.2705%" y="159.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="13.0205%" y="133" width="0.0182%" height="15" fill="rgb(231,138,38)" fg:x="1432" fg:w="2"/><text x="13.2705%" y="143.50"></text></g><g><title>malloc (2 samples, 0.02%)</title><rect x="13.0842%" y="101" width="0.0182%" height="15" fill="rgb(231,145,46)" fg:x="1439" fg:w="2"/><text x="13.3342%" y="111.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="13.0842%" y="85" width="0.0182%" height="15" fill="rgb(251,118,11)" fg:x="1439" fg:w="2"/><text x="13.3342%" y="95.50"></text></g><g><title>xadrez::board::Chessboard::make_move (53 samples, 0.48%)</title><rect x="12.6296%" y="181" width="0.4819%" height="15" fill="rgb(217,147,25)" fg:x="1389" fg:w="53"/><text x="12.8796%" y="191.50"></text></g><g><title>xadrez::movegen::generate_legal_moves (48 samples, 0.44%)</title><rect x="12.6750%" y="165" width="0.4364%" height="15" fill="rgb(247,81,37)" fg:x="1394" fg:w="48"/><text x="12.9250%" y="175.50"></text></g><g><title>xadrez::movegen::generate_moves (8 samples, 0.07%)</title><rect x="13.0387%" y="149" width="0.0727%" height="15" fill="rgb(209,12,38)" fg:x="1434" fg:w="8"/><text x="13.2887%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.05%)</title><rect x="13.0660%" y="133" width="0.0455%" height="15" fill="rgb(227,1,9)" fg:x="1437" fg:w="5"/><text x="13.3160%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.04%)</title><rect x="13.0751%" y="117" width="0.0364%" height="15" fill="rgb(248,47,43)" fg:x="1438" fg:w="4"/><text x="13.3251%" y="127.50"></text></g><g><title>cfree (7 samples, 0.06%)</title><rect x="13.1478%" y="165" width="0.0636%" height="15" fill="rgb(221,10,30)" fg:x="1446" fg:w="7"/><text x="13.3978%" y="175.50"></text></g><g><title>[libc.so.6] (4 samples, 0.04%)</title><rect x="13.1751%" y="149" width="0.0364%" height="15" fill="rgb(210,229,1)" fg:x="1449" fg:w="4"/><text x="13.4251%" y="159.50"></text></g><g><title>[libc.so.6] (18 samples, 0.16%)</title><rect x="13.4934%" y="149" width="0.1637%" height="15" fill="rgb(222,148,37)" fg:x="1484" fg:w="18"/><text x="13.7434%" y="159.50"></text></g><g><title>cfree (4 samples, 0.04%)</title><rect x="13.6570%" y="149" width="0.0364%" height="15" fill="rgb(234,67,33)" fg:x="1502" fg:w="4"/><text x="13.9070%" y="159.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="13.6752%" y="133" width="0.0182%" height="15" fill="rgb(247,98,35)" fg:x="1504" fg:w="2"/><text x="13.9252%" y="143.50"></text></g><g><title>malloc (5 samples, 0.05%)</title><rect x="13.6934%" y="149" width="0.0455%" height="15" fill="rgb(247,138,52)" fg:x="1506" fg:w="5"/><text x="13.9434%" y="159.50"></text></g><g><title>__rdl_realloc (5 samples, 0.05%)</title><rect x="17.5850%" y="85" width="0.0455%" height="15" fill="rgb(213,79,30)" fg:x="1934" fg:w="5"/><text x="17.8350%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (5 samples, 0.05%)</title><rect x="17.5850%" y="69" width="0.0455%" height="15" fill="rgb(246,177,23)" fg:x="1934" fg:w="5"/><text x="17.8350%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (56 samples, 0.51%)</title><rect x="17.5305%" y="117" width="0.5092%" height="15" fill="rgb(230,62,27)" fg:x="1928" fg:w="56"/><text x="17.7805%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (51 samples, 0.46%)</title><rect x="17.5759%" y="101" width="0.4637%" height="15" fill="rgb(216,154,8)" fg:x="1933" fg:w="51"/><text x="17.8259%" y="111.50"></text></g><g><title>realloc (44 samples, 0.40%)</title><rect x="17.6396%" y="85" width="0.4001%" height="15" fill="rgb(244,35,45)" fg:x="1940" fg:w="44"/><text x="17.8896%" y="95.50"></text></g><g><title>[libc.so.6] (33 samples, 0.30%)</title><rect x="17.7396%" y="69" width="0.3001%" height="15" fill="rgb(251,115,12)" fg:x="1951" fg:w="33"/><text x="17.9896%" y="79.50"></text></g><g><title>[libc.so.6] (23 samples, 0.21%)</title><rect x="17.8305%" y="53" width="0.2091%" height="15" fill="rgb(240,54,50)" fg:x="1961" fg:w="23"/><text x="18.0805%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (285 samples, 2.59%)</title><rect x="15.4937%" y="133" width="2.5914%" height="15" fill="rgb(233,84,52)" fg:x="1704" fg:w="285"/><text x="15.7437%" y="143.50">&lt;a..</text></g><g><title>malloc (5 samples, 0.05%)</title><rect x="18.0396%" y="117" width="0.0455%" height="15" fill="rgb(207,117,47)" fg:x="1984" fg:w="5"/><text x="18.2896%" y="127.50"></text></g><g><title>__rdl_realloc (2 samples, 0.02%)</title><rect x="18.1124%" y="101" width="0.0182%" height="15" fill="rgb(249,43,39)" fg:x="1992" fg:w="2"/><text x="18.3624%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (24 samples, 0.22%)</title><rect x="18.0942%" y="133" width="0.2182%" height="15" fill="rgb(209,38,44)" fg:x="1990" fg:w="24"/><text x="18.3442%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 0.20%)</title><rect x="18.1124%" y="117" width="0.2000%" height="15" fill="rgb(236,212,23)" fg:x="1992" fg:w="22"/><text x="18.3624%" y="127.50"></text></g><g><title>realloc (20 samples, 0.18%)</title><rect x="18.1306%" y="101" width="0.1819%" height="15" fill="rgb(242,79,21)" fg:x="1994" fg:w="20"/><text x="18.3806%" y="111.50"></text></g><g><title>[libc.so.6] (14 samples, 0.13%)</title><rect x="18.1851%" y="85" width="0.1273%" height="15" fill="rgb(211,96,35)" fg:x="2000" fg:w="14"/><text x="18.4351%" y="95.50"></text></g><g><title>[libc.so.6] (12 samples, 0.11%)</title><rect x="18.2033%" y="69" width="0.1091%" height="15" fill="rgb(253,215,40)" fg:x="2002" fg:w="12"/><text x="18.4533%" y="79.50"></text></g><g><title>cfree (2 samples, 0.02%)</title><rect x="18.3124%" y="133" width="0.0182%" height="15" fill="rgb(211,81,21)" fg:x="2014" fg:w="2"/><text x="18.5624%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="18.3124%" y="117" width="0.0182%" height="15" fill="rgb(208,190,38)" fg:x="2014" fg:w="2"/><text x="18.5624%" y="127.50"></text></g><g><title>__rdl_realloc (2 samples, 0.02%)</title><rect x="19.4399%" y="85" width="0.0182%" height="15" fill="rgb(235,213,38)" fg:x="2138" fg:w="2"/><text x="19.6899%" y="95.50"></text></g><g><title>malloc (3 samples, 0.03%)</title><rect x="19.4672%" y="85" width="0.0273%" height="15" fill="rgb(237,122,38)" fg:x="2141" fg:w="3"/><text x="19.7172%" y="95.50"></text></g><g><title>xadrez::board::Chessboard::make_move (711 samples, 6.46%)</title><rect x="13.2115%" y="165" width="6.4648%" height="15" fill="rgb(244,218,35)" fg:x="1453" fg:w="711"/><text x="13.4615%" y="175.50">xadrez::..</text></g><g><title>xadrez::movegen::generate_legal_moves (653 samples, 5.94%)</title><rect x="13.7389%" y="149" width="5.9374%" height="15" fill="rgb(240,68,47)" fg:x="1511" fg:w="653"/><text x="13.9889%" y="159.50">xadrez::..</text></g><g><title>xadrez::movegen::generate_moves (148 samples, 1.35%)</title><rect x="18.3306%" y="133" width="1.3457%" height="15" fill="rgb(210,16,53)" fg:x="2016" fg:w="148"/><text x="18.5806%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (40 samples, 0.36%)</title><rect x="19.3126%" y="117" width="0.3637%" height="15" fill="rgb(235,124,12)" fg:x="2124" fg:w="40"/><text x="19.5626%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (31 samples, 0.28%)</title><rect x="19.3944%" y="101" width="0.2819%" height="15" fill="rgb(224,169,11)" fg:x="2133" fg:w="31"/><text x="19.6444%" y="111.50"></text></g><g><title>realloc (20 samples, 0.18%)</title><rect x="19.4945%" y="85" width="0.1819%" height="15" fill="rgb(250,166,2)" fg:x="2144" fg:w="20"/><text x="19.7445%" y="95.50"></text></g><g><title>[libc.so.6] (13 samples, 0.12%)</title><rect x="19.5581%" y="69" width="0.1182%" height="15" fill="rgb(242,216,29)" fg:x="2151" fg:w="13"/><text x="19.8081%" y="79.50"></text></g><g><title>[libc.so.6] (7 samples, 0.06%)</title><rect x="19.6127%" y="53" width="0.0636%" height="15" fill="rgb(230,116,27)" fg:x="2157" fg:w="7"/><text x="19.8627%" y="63.50"></text></g><g><title>[libc.so.6] (25 samples, 0.23%)</title><rect x="20.0673%" y="149" width="0.2273%" height="15" fill="rgb(228,99,48)" fg:x="2207" fg:w="25"/><text x="20.3173%" y="159.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.04%)</title><rect x="20.3037%" y="149" width="0.0364%" height="15" fill="rgb(253,11,6)" fg:x="2233" fg:w="4"/><text x="20.5537%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.04%)</title><rect x="20.3037%" y="133" width="0.0364%" height="15" fill="rgb(247,143,39)" fg:x="2233" fg:w="4"/><text x="20.5537%" y="143.50"></text></g><g><title>__rust_dealloc (4 samples, 0.04%)</title><rect x="20.3401%" y="149" width="0.0364%" height="15" fill="rgb(236,97,10)" fg:x="2237" fg:w="4"/><text x="20.5901%" y="159.50"></text></g><g><title>cfree (58 samples, 0.53%)</title><rect x="20.3764%" y="149" width="0.5274%" height="15" fill="rgb(233,208,19)" fg:x="2241" fg:w="58"/><text x="20.6264%" y="159.50"></text></g><g><title>[libc.so.6] (46 samples, 0.42%)</title><rect x="20.4855%" y="133" width="0.4183%" height="15" fill="rgb(216,164,2)" fg:x="2253" fg:w="46"/><text x="20.7355%" y="143.50"></text></g><g><title>[libc.so.6] (177 samples, 1.61%)</title><rect x="24.3499%" y="133" width="1.6094%" height="15" fill="rgb(220,129,5)" fg:x="2678" fg:w="177"/><text x="24.5999%" y="143.50"></text></g><g><title>__rdl_alloc (10 samples, 0.09%)</title><rect x="25.9593%" y="133" width="0.0909%" height="15" fill="rgb(242,17,10)" fg:x="2855" fg:w="10"/><text x="26.2093%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (10 samples, 0.09%)</title><rect x="25.9593%" y="117" width="0.0909%" height="15" fill="rgb(242,107,0)" fg:x="2855" fg:w="10"/><text x="26.2093%" y="127.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.05%)</title><rect x="26.0502%" y="133" width="0.0546%" height="15" fill="rgb(251,28,31)" fg:x="2865" fg:w="6"/><text x="26.3002%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.05%)</title><rect x="26.0502%" y="117" width="0.0546%" height="15" fill="rgb(233,223,10)" fg:x="2865" fg:w="6"/><text x="26.3002%" y="127.50"></text></g><g><title>__rust_alloc (5 samples, 0.05%)</title><rect x="26.1047%" y="133" width="0.0455%" height="15" fill="rgb(215,21,27)" fg:x="2871" fg:w="5"/><text x="26.3547%" y="143.50"></text></g><g><title>__rust_dealloc (3 samples, 0.03%)</title><rect x="26.1502%" y="133" width="0.0273%" height="15" fill="rgb(232,23,21)" fg:x="2876" fg:w="3"/><text x="26.4002%" y="143.50"></text></g><g><title>cfree (66 samples, 0.60%)</title><rect x="26.1775%" y="133" width="0.6001%" height="15" fill="rgb(244,5,23)" fg:x="2879" fg:w="66"/><text x="26.4275%" y="143.50"></text></g><g><title>[libc.so.6] (52 samples, 0.47%)</title><rect x="26.3048%" y="117" width="0.4728%" height="15" fill="rgb(226,81,46)" fg:x="2893" fg:w="52"/><text x="26.5548%" y="127.50"></text></g><g><title>malloc (33 samples, 0.30%)</title><rect x="26.7776%" y="133" width="0.3001%" height="15" fill="rgb(247,70,30)" fg:x="2945" fg:w="33"/><text x="27.0276%" y="143.50"></text></g><g><title>__rdl_alloc (14 samples, 0.13%)</title><rect x="73.4406%" y="101" width="0.1273%" height="15" fill="rgb(212,68,19)" fg:x="8077" fg:w="14"/><text x="73.6906%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14 samples, 0.13%)</title><rect x="73.4406%" y="85" width="0.1273%" height="15" fill="rgb(240,187,13)" fg:x="8077" fg:w="14"/><text x="73.6906%" y="95.50"></text></g><g><title>__rust_alloc (5 samples, 0.05%)</title><rect x="73.5679%" y="101" width="0.0455%" height="15" fill="rgb(223,113,26)" fg:x="8091" fg:w="5"/><text x="73.8179%" y="111.50"></text></g><g><title>__rdl_realloc (29 samples, 0.26%)</title><rect x="74.8954%" y="69" width="0.2637%" height="15" fill="rgb(206,192,2)" fg:x="8237" fg:w="29"/><text x="75.1454%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (24 samples, 0.22%)</title><rect x="74.9409%" y="53" width="0.2182%" height="15" fill="rgb(241,108,4)" fg:x="8242" fg:w="24"/><text x="75.1909%" y="63.50"></text></g><g><title>__rust_realloc (8 samples, 0.07%)</title><rect x="75.1591%" y="69" width="0.0727%" height="15" fill="rgb(247,173,49)" fg:x="8266" fg:w="8"/><text x="75.4091%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (648 samples, 5.89%)</title><rect x="73.6134%" y="101" width="5.8920%" height="15" fill="rgb(224,114,35)" fg:x="8096" fg:w="648"/><text x="73.8634%" y="111.50">alloc::..</text></g><g><title>alloc::raw_vec::finish_grow (552 samples, 5.02%)</title><rect x="74.4863%" y="85" width="5.0191%" height="15" fill="rgb(245,159,27)" fg:x="8192" fg:w="552"/><text x="74.7363%" y="95.50">alloc:..</text></g><g><title>realloc (470 samples, 4.27%)</title><rect x="75.2319%" y="69" width="4.2735%" height="15" fill="rgb(245,172,44)" fg:x="8274" fg:w="470"/><text x="75.4819%" y="79.50">reall..</text></g><g><title>[libc.so.6] (316 samples, 2.87%)</title><rect x="76.6321%" y="53" width="2.8732%" height="15" fill="rgb(236,23,11)" fg:x="8428" fg:w="316"/><text x="76.8821%" y="63.50">[l..</text></g><g><title>[libc.so.6] (204 samples, 1.85%)</title><rect x="77.6505%" y="37" width="1.8549%" height="15" fill="rgb(205,117,38)" fg:x="8540" fg:w="204"/><text x="77.9005%" y="47.50">[..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,386 samples, 30.79%)</title><rect x="49.0089%" y="117" width="30.7874%" height="15" fill="rgb(237,72,25)" fg:x="5390" fg:w="3386"/><text x="49.2589%" y="127.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter:..</text></g><g><title>malloc (32 samples, 0.29%)</title><rect x="79.5054%" y="101" width="0.2910%" height="15" fill="rgb(244,70,9)" fg:x="8744" fg:w="32"/><text x="79.7554%" y="111.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.04%)</title><rect x="79.7963%" y="117" width="0.0364%" height="15" fill="rgb(217,125,39)" fg:x="8776" fg:w="4"/><text x="80.0463%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.04%)</title><rect x="79.7963%" y="101" width="0.0364%" height="15" fill="rgb(235,36,10)" fg:x="8776" fg:w="4"/><text x="80.0463%" y="111.50"></text></g><g><title>__rust_dealloc (3 samples, 0.03%)</title><rect x="79.8327%" y="117" width="0.0273%" height="15" fill="rgb(251,123,47)" fg:x="8780" fg:w="3"/><text x="80.0827%" y="127.50"></text></g><g><title>__rdl_realloc (19 samples, 0.17%)</title><rect x="80.3873%" y="85" width="0.1728%" height="15" fill="rgb(221,13,13)" fg:x="8841" fg:w="19"/><text x="80.6373%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (14 samples, 0.13%)</title><rect x="80.4328%" y="69" width="0.1273%" height="15" fill="rgb(238,131,9)" fg:x="8846" fg:w="14"/><text x="80.6828%" y="79.50"></text></g><g><title>__rust_realloc (2 samples, 0.02%)</title><rect x="80.5601%" y="85" width="0.0182%" height="15" fill="rgb(211,50,8)" fg:x="8860" fg:w="2"/><text x="80.8101%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (343 samples, 3.12%)</title><rect x="79.8600%" y="117" width="3.1187%" height="15" fill="rgb(245,182,24)" fg:x="8783" fg:w="343"/><text x="80.1100%" y="127.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (308 samples, 2.80%)</title><rect x="80.1782%" y="101" width="2.8005%" height="15" fill="rgb(242,14,37)" fg:x="8818" fg:w="308"/><text x="80.4282%" y="111.50">al..</text></g><g><title>realloc (264 samples, 2.40%)</title><rect x="80.5783%" y="85" width="2.4004%" height="15" fill="rgb(246,228,12)" fg:x="8862" fg:w="264"/><text x="80.8283%" y="95.50">re..</text></g><g><title>[libc.so.6] (210 samples, 1.91%)</title><rect x="81.0693%" y="69" width="1.9094%" height="15" fill="rgb(213,55,15)" fg:x="8916" fg:w="210"/><text x="81.3193%" y="79.50">[..</text></g><g><title>[libc.so.6] (150 samples, 1.36%)</title><rect x="81.6148%" y="53" width="1.3639%" height="15" fill="rgb(209,9,3)" fg:x="8976" fg:w="150"/><text x="81.8648%" y="63.50"></text></g><g><title>cfree (76 samples, 0.69%)</title><rect x="82.9787%" y="117" width="0.6910%" height="15" fill="rgb(230,59,30)" fg:x="9126" fg:w="76"/><text x="83.2287%" y="127.50"></text></g><g><title>[libc.so.6] (57 samples, 0.52%)</title><rect x="83.1515%" y="101" width="0.5183%" height="15" fill="rgb(209,121,21)" fg:x="9145" fg:w="57"/><text x="83.4015%" y="111.50"></text></g><g><title>__rdl_alloc (4 samples, 0.04%)</title><rect x="95.4537%" y="69" width="0.0364%" height="15" fill="rgb(220,109,13)" fg:x="10498" fg:w="4"/><text x="95.7037%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.04%)</title><rect x="95.4537%" y="53" width="0.0364%" height="15" fill="rgb(232,18,1)" fg:x="10498" fg:w="4"/><text x="95.7037%" y="63.50"></text></g><g><title>__rdl_realloc (25 samples, 0.23%)</title><rect x="95.4901%" y="69" width="0.2273%" height="15" fill="rgb(215,41,42)" fg:x="10502" fg:w="25"/><text x="95.7401%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (19 samples, 0.17%)</title><rect x="95.5446%" y="53" width="0.1728%" height="15" fill="rgb(224,123,36)" fg:x="10508" fg:w="19"/><text x="95.7946%" y="63.50"></text></g><g><title>__rust_alloc (3 samples, 0.03%)</title><rect x="95.7174%" y="69" width="0.0273%" height="15" fill="rgb(240,125,3)" fg:x="10527" fg:w="3"/><text x="95.9674%" y="79.50"></text></g><g><title>__rust_realloc (3 samples, 0.03%)</title><rect x="95.7447%" y="69" width="0.0273%" height="15" fill="rgb(205,98,50)" fg:x="10530" fg:w="3"/><text x="95.9947%" y="79.50"></text></g><g><title>malloc (46 samples, 0.42%)</title><rect x="95.7720%" y="69" width="0.4183%" height="15" fill="rgb(205,185,37)" fg:x="10533" fg:w="46"/><text x="96.0220%" y="79.50"></text></g><g><title>xadrez::board::Chessboard::make_move (8,494 samples, 77.23%)</title><rect x="20.9129%" y="149" width="77.2322%" height="15" fill="rgb(238,207,15)" fg:x="2300" fg:w="8494"/><text x="21.1629%" y="159.50">xadrez::board::Chessboard::make_move</text></g><g><title>xadrez::movegen::generate_legal_moves (7,816 samples, 71.07%)</title><rect x="27.0777%" y="133" width="71.0675%" height="15" fill="rgb(213,199,42)" fg:x="2978" fg:w="7816"/><text x="27.3277%" y="143.50">xadrez::movegen::generate_legal_moves</text></g><g><title>xadrez::movegen::generate_moves (1,592 samples, 14.48%)</title><rect x="83.6698%" y="117" width="14.4754%" height="15" fill="rgb(235,201,11)" fg:x="9202" fg:w="1592"/><text x="83.9198%" y="127.50">xadrez::movegen::gener..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (433 samples, 3.94%)</title><rect x="94.2080%" y="101" width="3.9371%" height="15" fill="rgb(207,46,11)" fg:x="10361" fg:w="433"/><text x="94.4580%" y="111.50">allo..</text></g><g><title>alloc::raw_vec::finish_grow (351 samples, 3.19%)</title><rect x="94.9536%" y="85" width="3.1915%" height="15" fill="rgb(241,35,35)" fg:x="10443" fg:w="351"/><text x="95.2036%" y="95.50">all..</text></g><g><title>realloc (215 samples, 1.95%)</title><rect x="96.1902%" y="69" width="1.9549%" height="15" fill="rgb(243,32,47)" fg:x="10579" fg:w="215"/><text x="96.4402%" y="79.50">r..</text></g><g><title>[libc.so.6] (138 samples, 1.25%)</title><rect x="96.8903%" y="53" width="1.2548%" height="15" fill="rgb(247,202,23)" fg:x="10656" fg:w="138"/><text x="97.1403%" y="63.50"></text></g><g><title>[libc.so.6] (72 samples, 0.65%)</title><rect x="97.4905%" y="37" width="0.6547%" height="15" fill="rgb(219,102,11)" fg:x="10722" fg:w="72"/><text x="97.7405%" y="47.50"></text></g><g><title>[libc.so.6] (20 samples, 0.18%)</title><rect x="98.3906%" y="133" width="0.1819%" height="15" fill="rgb(243,110,44)" fg:x="10821" fg:w="20"/><text x="98.6406%" y="143.50"></text></g><g><title>__rdl_alloc (6 samples, 0.05%)</title><rect x="98.5725%" y="133" width="0.0546%" height="15" fill="rgb(222,74,54)" fg:x="10841" fg:w="6"/><text x="98.8225%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.05%)</title><rect x="98.5725%" y="117" width="0.0546%" height="15" fill="rgb(216,99,12)" fg:x="10841" fg:w="6"/><text x="98.8225%" y="127.50"></text></g><g><title>__rdl_dealloc (10 samples, 0.09%)</title><rect x="98.6270%" y="133" width="0.0909%" height="15" fill="rgb(226,22,26)" fg:x="10847" fg:w="10"/><text x="98.8770%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (10 samples, 0.09%)</title><rect x="98.6270%" y="117" width="0.0909%" height="15" fill="rgb(217,163,10)" fg:x="10847" fg:w="10"/><text x="98.8770%" y="127.50"></text></g><g><title>__rust_alloc (4 samples, 0.04%)</title><rect x="98.7179%" y="133" width="0.0364%" height="15" fill="rgb(213,25,53)" fg:x="10857" fg:w="4"/><text x="98.9679%" y="143.50"></text></g><g><title>__rust_dealloc (9 samples, 0.08%)</title><rect x="98.7543%" y="133" width="0.0818%" height="15" fill="rgb(252,105,26)" fg:x="10861" fg:w="9"/><text x="99.0043%" y="143.50"></text></g><g><title>cfree (68 samples, 0.62%)</title><rect x="98.8362%" y="133" width="0.6183%" height="15" fill="rgb(220,39,43)" fg:x="10870" fg:w="68"/><text x="99.0862%" y="143.50"></text></g><g><title>[libc.so.6] (49 samples, 0.45%)</title><rect x="99.0089%" y="117" width="0.4455%" height="15" fill="rgb(229,68,48)" fg:x="10889" fg:w="49"/><text x="99.2589%" y="127.50"></text></g><g><title>_start (9,615 samples, 87.42%)</title><rect x="12.4023%" y="533" width="87.4250%" height="15" fill="rgb(252,8,32)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="543.50">_start</text></g><g><title>__libc_start_main (9,615 samples, 87.42%)</title><rect x="12.4023%" y="517" width="87.4250%" height="15" fill="rgb(223,20,43)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="527.50">__libc_start_main</text></g><g><title>[libc.so.6] (9,615 samples, 87.42%)</title><rect x="12.4023%" y="501" width="87.4250%" height="15" fill="rgb(229,81,49)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="511.50">[libc.so.6]</text></g><g><title>main (9,615 samples, 87.42%)</title><rect x="12.4023%" y="485" width="87.4250%" height="15" fill="rgb(236,28,36)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (9,615 samples, 87.42%)</title><rect x="12.4023%" y="469" width="87.4250%" height="15" fill="rgb(249,185,26)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (9,615 samples, 87.42%)</title><rect x="12.4023%" y="453" width="87.4250%" height="15" fill="rgb(249,174,33)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,615 samples, 87.42%)</title><rect x="12.4023%" y="437" width="87.4250%" height="15" fill="rgb(233,201,37)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,615 samples, 87.42%)</title><rect x="12.4023%" y="421" width="87.4250%" height="15" fill="rgb(221,78,26)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="431.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (9,615 samples, 87.42%)</title><rect x="12.4023%" y="405" width="87.4250%" height="15" fill="rgb(250,127,30)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="415.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (9,615 samples, 87.42%)</title><rect x="12.4023%" y="389" width="87.4250%" height="15" fill="rgb(230,49,44)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="399.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,615 samples, 87.42%)</title><rect x="12.4023%" y="373" width="87.4250%" height="15" fill="rgb(229,67,23)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="383.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,615 samples, 87.42%)</title><rect x="12.4023%" y="357" width="87.4250%" height="15" fill="rgb(249,83,47)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="367.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9,615 samples, 87.42%)</title><rect x="12.4023%" y="341" width="87.4250%" height="15" fill="rgb(215,43,3)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="351.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (9,615 samples, 87.42%)</title><rect x="12.4023%" y="325" width="87.4250%" height="15" fill="rgb(238,154,13)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="335.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,615 samples, 87.42%)</title><rect x="12.4023%" y="309" width="87.4250%" height="15" fill="rgb(219,56,2)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="319.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>perft::main (9,615 samples, 87.42%)</title><rect x="12.4023%" y="293" width="87.4250%" height="15" fill="rgb(233,0,4)" fg:x="1364" fg:w="9615"/><text x="12.6523%" y="303.50">perft::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (9,594 samples, 87.23%)</title><rect x="12.5932%" y="277" width="87.2340%" height="15" fill="rgb(235,30,7)" fg:x="1385" fg:w="9594"/><text x="12.8432%" y="287.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9,594 samples, 87.23%)</title><rect x="12.5932%" y="261" width="87.2340%" height="15" fill="rgb(250,79,13)" fg:x="1385" fg:w="9594"/><text x="12.8432%" y="271.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (9,594 samples, 87.23%)</title><rect x="12.5932%" y="245" width="87.2340%" height="15" fill="rgb(211,146,34)" fg:x="1385" fg:w="9594"/><text x="12.8432%" y="255.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>xadrez::board::Chessboard::perft (9,594 samples, 87.23%)</title><rect x="12.5932%" y="229" width="87.2340%" height="15" fill="rgb(228,22,38)" fg:x="1385" fg:w="9594"/><text x="12.8432%" y="239.50">xadrez::board::Chessboard::perft</text></g><g><title>xadrez::board::Chessboard::perft (9,594 samples, 87.23%)</title><rect x="12.5932%" y="213" width="87.2340%" height="15" fill="rgb(235,168,5)" fg:x="1385" fg:w="9594"/><text x="12.8432%" y="223.50">xadrez::board::Chessboard::perft</text></g><g><title>xadrez::board::Chessboard::perft (9,590 samples, 87.20%)</title><rect x="12.6296%" y="197" width="87.1977%" height="15" fill="rgb(221,155,16)" fg:x="1389" fg:w="9590"/><text x="12.8796%" y="207.50">xadrez::board::Chessboard::perft</text></g><g><title>xadrez::board::Chessboard::perft (9,537 samples, 86.72%)</title><rect x="13.1115%" y="181" width="86.7158%" height="15" fill="rgb(215,215,53)" fg:x="1442" fg:w="9537"/><text x="13.3615%" y="191.50">xadrez::board::Chessboard::perft</text></g><g><title>xadrez::board::Chessboard::perft (8,815 samples, 80.15%)</title><rect x="19.6763%" y="165" width="80.1509%" height="15" fill="rgb(223,4,10)" fg:x="2164" fg:w="8815"/><text x="19.9263%" y="175.50">xadrez::board::Chessboard::perft</text></g><g><title>xadrez::board::Chessboard::perft (185 samples, 1.68%)</title><rect x="98.1451%" y="149" width="1.6821%" height="15" fill="rgb(234,103,6)" fg:x="10794" fg:w="185"/><text x="98.3951%" y="159.50"></text></g><g><title>malloc (41 samples, 0.37%)</title><rect x="99.4544%" y="133" width="0.3728%" height="15" fill="rgb(227,97,0)" fg:x="10938" fg:w="41"/><text x="99.7044%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="99.8272%" y="533" width="0.0182%" height="15" fill="rgb(234,150,53)" fg:x="10979" fg:w="2"/><text x="100.0772%" y="543.50"></text></g><g><title>cfree (4 samples, 0.04%)</title><rect x="99.8454%" y="533" width="0.0364%" height="15" fill="rgb(228,201,54)" fg:x="10981" fg:w="4"/><text x="100.0954%" y="543.50"></text></g><g><title>xadrez::board::Chessboard::make_move (3 samples, 0.03%)</title><rect x="99.8818%" y="533" width="0.0273%" height="15" fill="rgb(222,22,37)" fg:x="10985" fg:w="3"/><text x="100.1318%" y="543.50"></text></g><g><title>xadrez::movegen::generate_legal_moves (4 samples, 0.04%)</title><rect x="99.9091%" y="533" width="0.0364%" height="15" fill="rgb(237,53,32)" fg:x="10988" fg:w="4"/><text x="100.1591%" y="543.50"></text></g><g><title>all (10,998 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(233,25,53)" fg:x="0" fg:w="10998"/><text x="0.2500%" y="575.50"></text></g><g><title>perft-995e47714 (10,998 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(210,40,34)" fg:x="0" fg:w="10998"/><text x="0.2500%" y="559.50">perft-995e47714</text></g><g><title>xadrez::movegen::generate_moves (6 samples, 0.05%)</title><rect x="99.9454%" y="533" width="0.0546%" height="15" fill="rgb(241,220,44)" fg:x="10992" fg:w="6"/><text x="100.1954%" y="543.50"></text></g></svg></svg>