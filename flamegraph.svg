<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1141.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="2728"><g><title>xadrez::movegen::generate_moves (1 samples, 0.04%)</title><rect x="0.0000%" y="1077" width="0.0367%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1087.50"></text></g><g><title>cfree (2 samples, 0.07%)</title><rect x="0.0367%" y="1077" width="0.0733%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.2867%" y="1087.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.07%)</title><rect x="0.1100%" y="405" width="0.0733%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="2"/><text x="0.3600%" y="415.50"></text></g><g><title>xadrez::board::Chessboard::undo (3 samples, 0.11%)</title><rect x="0.1100%" y="421" width="0.1100%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="3"/><text x="0.3600%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.07%)</title><rect x="0.2199%" y="341" width="0.0733%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="2"/><text x="0.4699%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.07%)</title><rect x="0.2199%" y="325" width="0.0733%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="2"/><text x="0.4699%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.07%)</title><rect x="0.2199%" y="309" width="0.0733%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="2"/><text x="0.4699%" y="319.50"></text></g><g><title>[libc.so.6] (9 samples, 0.33%)</title><rect x="0.2933%" y="293" width="0.3299%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="9"/><text x="0.5433%" y="303.50"></text></g><g><title>cfree (16 samples, 0.59%)</title><rect x="0.2933%" y="309" width="0.5865%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="16"/><text x="0.5433%" y="319.50"></text></g><g><title>__rust_dealloc (1 samples, 0.04%)</title><rect x="0.8798%" y="309" width="0.0367%" height="15" fill="rgb(220,122,19)" fg:x="24" fg:w="1"/><text x="1.1298%" y="319.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="0.9164%" y="309" width="0.0367%" height="15" fill="rgb(250,228,42)" fg:x="25" fg:w="1"/><text x="1.1664%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="0.9164%" y="293" width="0.0367%" height="15" fill="rgb(240,193,28)" fg:x="25" fg:w="1"/><text x="1.1664%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;xadrez::move::Move&gt;&gt; (21 samples, 0.77%)</title><rect x="0.2199%" y="389" width="0.7698%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="21"/><text x="0.4699%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;xadrez::move::Move&gt;&gt; (21 samples, 0.77%)</title><rect x="0.2199%" y="373" width="0.7698%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="21"/><text x="0.4699%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.77%)</title><rect x="0.2199%" y="357" width="0.7698%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="21"/><text x="0.4699%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.70%)</title><rect x="0.2933%" y="341" width="0.6965%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="19"/><text x="0.5433%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.70%)</title><rect x="0.2933%" y="325" width="0.6965%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="19"/><text x="0.5433%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.07%)</title><rect x="0.9897%" y="389" width="0.0733%" height="15" fill="rgb(210,31,41)" fg:x="27" fg:w="2"/><text x="1.2397%" y="399.50"></text></g><g><title>xadrez::board::Chessboard::undo (28 samples, 1.03%)</title><rect x="0.2199%" y="405" width="1.0264%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="28"/><text x="0.4699%" y="415.50"></text></g><g><title>[libc.so.6] (5 samples, 0.18%)</title><rect x="1.0630%" y="389" width="0.1833%" height="15" fill="rgb(226,26,5)" fg:x="29" fg:w="5"/><text x="1.3130%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;xadrez::move::Move&gt;&gt; (2 samples, 0.07%)</title><rect x="1.2463%" y="389" width="0.0733%" height="15" fill="rgb(249,33,26)" fg:x="34" fg:w="2"/><text x="1.4963%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;xadrez::move::Move&gt;&gt; (2 samples, 0.07%)</title><rect x="1.2463%" y="373" width="0.0733%" height="15" fill="rgb(235,183,28)" fg:x="34" fg:w="2"/><text x="1.4963%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="1.2463%" y="357" width="0.0733%" height="15" fill="rgb(221,5,38)" fg:x="34" fg:w="2"/><text x="1.4963%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="1.2463%" y="341" width="0.0733%" height="15" fill="rgb(247,18,42)" fg:x="34" fg:w="2"/><text x="1.4963%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="1.2463%" y="325" width="0.0733%" height="15" fill="rgb(241,131,45)" fg:x="34" fg:w="2"/><text x="1.4963%" y="335.50"></text></g><g><title>[libc.so.6] (14 samples, 0.51%)</title><rect x="1.3196%" y="373" width="0.5132%" height="15" fill="rgb(249,31,29)" fg:x="36" fg:w="14"/><text x="1.5696%" y="383.50"></text></g><g><title>cfree (16 samples, 0.59%)</title><rect x="1.3196%" y="389" width="0.5865%" height="15" fill="rgb(225,111,53)" fg:x="36" fg:w="16"/><text x="1.5696%" y="399.50"></text></g><g><title>__rust_dealloc (5 samples, 0.18%)</title><rect x="1.9062%" y="389" width="0.1833%" height="15" fill="rgb(238,160,17)" fg:x="52" fg:w="5"/><text x="2.1562%" y="399.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.11%)</title><rect x="2.0894%" y="389" width="0.1100%" height="15" fill="rgb(214,148,48)" fg:x="57" fg:w="3"/><text x="2.3394%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.11%)</title><rect x="2.0894%" y="373" width="0.1100%" height="15" fill="rgb(232,36,49)" fg:x="57" fg:w="3"/><text x="2.3394%" y="383.50"></text></g><g><title>[libc.so.6] (5 samples, 0.18%)</title><rect x="2.1994%" y="293" width="0.1833%" height="15" fill="rgb(209,103,24)" fg:x="60" fg:w="5"/><text x="2.4494%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6 samples, 0.22%)</title><rect x="2.1994%" y="325" width="0.2199%" height="15" fill="rgb(229,88,8)" fg:x="60" fg:w="6"/><text x="2.4494%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.22%)</title><rect x="2.1994%" y="309" width="0.2199%" height="15" fill="rgb(213,181,19)" fg:x="60" fg:w="6"/><text x="2.4494%" y="319.50"></text></g><g><title>malloc (15 samples, 0.55%)</title><rect x="2.4194%" y="229" width="0.5499%" height="15" fill="rgb(254,191,54)" fg:x="66" fg:w="15"/><text x="2.6694%" y="239.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="2.9692%" y="229" width="0.0367%" height="15" fill="rgb(241,83,37)" fg:x="81" fg:w="1"/><text x="3.2192%" y="239.50"></text></g><g><title>__rdl_alloc (2 samples, 0.07%)</title><rect x="3.0059%" y="229" width="0.0733%" height="15" fill="rgb(233,36,39)" fg:x="82" fg:w="2"/><text x="3.2559%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.07%)</title><rect x="3.0059%" y="213" width="0.0733%" height="15" fill="rgb(226,3,54)" fg:x="82" fg:w="2"/><text x="3.2559%" y="223.50"></text></g><g><title>xadrez::board::Chessboard::perft (51 samples, 1.87%)</title><rect x="1.2463%" y="405" width="1.8695%" height="15" fill="rgb(245,192,40)" fg:x="34" fg:w="51"/><text x="1.4963%" y="415.50">x..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 0.92%)</title><rect x="2.1994%" y="389" width="0.9164%" height="15" fill="rgb(238,167,29)" fg:x="60" fg:w="25"/><text x="2.4494%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 0.92%)</title><rect x="2.1994%" y="373" width="0.9164%" height="15" fill="rgb(232,182,51)" fg:x="60" fg:w="25"/><text x="2.4494%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.92%)</title><rect x="2.1994%" y="357" width="0.9164%" height="15" fill="rgb(231,60,39)" fg:x="60" fg:w="25"/><text x="2.4494%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (25 samples, 0.92%)</title><rect x="2.1994%" y="341" width="0.9164%" height="15" fill="rgb(208,69,12)" fg:x="60" fg:w="25"/><text x="2.4494%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (19 samples, 0.70%)</title><rect x="2.4194%" y="325" width="0.6965%" height="15" fill="rgb(235,93,37)" fg:x="66" fg:w="19"/><text x="2.6694%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.70%)</title><rect x="2.4194%" y="309" width="0.6965%" height="15" fill="rgb(213,116,39)" fg:x="66" fg:w="19"/><text x="2.6694%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 0.70%)</title><rect x="2.4194%" y="293" width="0.6965%" height="15" fill="rgb(222,207,29)" fg:x="66" fg:w="19"/><text x="2.6694%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.70%)</title><rect x="2.4194%" y="277" width="0.6965%" height="15" fill="rgb(206,96,30)" fg:x="66" fg:w="19"/><text x="2.6694%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.70%)</title><rect x="2.4194%" y="261" width="0.6965%" height="15" fill="rgb(218,138,4)" fg:x="66" fg:w="19"/><text x="2.6694%" y="271.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.70%)</title><rect x="2.4194%" y="245" width="0.6965%" height="15" fill="rgb(250,191,14)" fg:x="66" fg:w="19"/><text x="2.6694%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (12 samples, 0.44%)</title><rect x="3.1158%" y="325" width="0.4399%" height="15" fill="rgb(239,60,40)" fg:x="85" fg:w="12"/><text x="3.3658%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (12 samples, 0.44%)</title><rect x="3.1158%" y="309" width="0.4399%" height="15" fill="rgb(206,27,48)" fg:x="85" fg:w="12"/><text x="3.3658%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (12 samples, 0.44%)</title><rect x="3.1158%" y="293" width="0.4399%" height="15" fill="rgb(225,35,8)" fg:x="85" fg:w="12"/><text x="3.3658%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (12 samples, 0.44%)</title><rect x="3.1158%" y="277" width="0.4399%" height="15" fill="rgb(250,213,24)" fg:x="85" fg:w="12"/><text x="3.3658%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (12 samples, 0.44%)</title><rect x="3.1158%" y="261" width="0.4399%" height="15" fill="rgb(247,123,22)" fg:x="85" fg:w="12"/><text x="3.3658%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (15 samples, 0.55%)</title><rect x="3.5557%" y="325" width="0.5499%" height="15" fill="rgb(231,138,38)" fg:x="97" fg:w="15"/><text x="3.8057%" y="335.50"></text></g><g><title>xadrez::bitboards::Bitboard::pop_lsb (66 samples, 2.42%)</title><rect x="3.1158%" y="357" width="2.4194%" height="15" fill="rgb(231,145,46)" fg:x="85" fg:w="66"/><text x="3.3658%" y="367.50">xa..</text></g><g><title>xadrez::bitboards::Bitboard::lsb (66 samples, 2.42%)</title><rect x="3.1158%" y="341" width="2.4194%" height="15" fill="rgb(251,118,11)" fg:x="85" fg:w="66"/><text x="3.3658%" y="351.50">xa..</text></g><g><title>xadrez::bitboards::Bitboard::lsb (1 samples, 0.04%)</title><rect x="5.5352%" y="357" width="0.0367%" height="15" fill="rgb(217,147,25)" fg:x="151" fg:w="1"/><text x="5.7852%" y="367.50"></text></g><g><title>xadrez::bitboards::Bitboard::get (6 samples, 0.22%)</title><rect x="5.5718%" y="357" width="0.2199%" height="15" fill="rgb(247,81,37)" fg:x="152" fg:w="6"/><text x="5.8218%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (19 samples, 0.70%)</title><rect x="5.7918%" y="357" width="0.6965%" height="15" fill="rgb(209,12,38)" fg:x="158" fg:w="19"/><text x="6.0418%" y="367.50"></text></g><g><title>core::ptr::write (18 samples, 0.66%)</title><rect x="6.4883%" y="341" width="0.6598%" height="15" fill="rgb(227,1,9)" fg:x="177" fg:w="18"/><text x="6.7383%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (7 samples, 0.26%)</title><rect x="7.1481%" y="341" width="0.2566%" height="15" fill="rgb(248,47,43)" fg:x="195" fg:w="7"/><text x="7.3981%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7 samples, 0.26%)</title><rect x="7.1481%" y="325" width="0.2566%" height="15" fill="rgb(221,10,30)" fg:x="195" fg:w="7"/><text x="7.3981%" y="335.50"></text></g><g><title>core::cmp::max (1 samples, 0.04%)</title><rect x="7.4047%" y="309" width="0.0367%" height="15" fill="rgb(210,229,1)" fg:x="202" fg:w="1"/><text x="7.6547%" y="319.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.04%)</title><rect x="7.4047%" y="293" width="0.0367%" height="15" fill="rgb(222,148,37)" fg:x="202" fg:w="1"/><text x="7.6547%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4 samples, 0.15%)</title><rect x="7.4413%" y="293" width="0.1466%" height="15" fill="rgb(234,67,33)" fg:x="203" fg:w="4"/><text x="7.6913%" y="303.50"></text></g><g><title>[libc.so.6] (24 samples, 0.88%)</title><rect x="7.5880%" y="213" width="0.8798%" height="15" fill="rgb(247,98,35)" fg:x="207" fg:w="24"/><text x="7.8380%" y="223.50"></text></g><g><title>[libc.so.6] (33 samples, 1.21%)</title><rect x="7.5880%" y="229" width="1.2097%" height="15" fill="rgb(247,138,52)" fg:x="207" fg:w="33"/><text x="7.8380%" y="239.50"></text></g><g><title>realloc (48 samples, 1.76%)</title><rect x="7.5880%" y="245" width="1.7595%" height="15" fill="rgb(213,79,30)" fg:x="207" fg:w="48"/><text x="7.8380%" y="255.50"></text></g><g><title>__rust_realloc (2 samples, 0.07%)</title><rect x="9.3475%" y="245" width="0.0733%" height="15" fill="rgb(246,177,23)" fg:x="255" fg:w="2"/><text x="9.5975%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (52 samples, 1.91%)</title><rect x="7.5880%" y="293" width="1.9062%" height="15" fill="rgb(230,62,27)" fg:x="207" fg:w="52"/><text x="7.8380%" y="303.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (52 samples, 1.91%)</title><rect x="7.5880%" y="277" width="1.9062%" height="15" fill="rgb(216,154,8)" fg:x="207" fg:w="52"/><text x="7.8380%" y="287.50">a..</text></g><g><title>alloc::alloc::realloc (52 samples, 1.91%)</title><rect x="7.5880%" y="261" width="1.9062%" height="15" fill="rgb(244,35,45)" fg:x="207" fg:w="52"/><text x="7.8380%" y="271.50">a..</text></g><g><title>__rdl_realloc (2 samples, 0.07%)</title><rect x="9.4208%" y="245" width="0.0733%" height="15" fill="rgb(251,115,12)" fg:x="257" fg:w="2"/><text x="9.6708%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.07%)</title><rect x="9.4208%" y="229" width="0.0733%" height="15" fill="rgb(240,54,50)" fg:x="257" fg:w="2"/><text x="9.6708%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (63 samples, 2.31%)</title><rect x="7.4413%" y="309" width="2.3094%" height="15" fill="rgb(233,84,52)" fg:x="203" fg:w="63"/><text x="7.6913%" y="319.50">a..</text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.07%)</title><rect x="9.7507%" y="293" width="0.0733%" height="15" fill="rgb(207,117,47)" fg:x="266" fg:w="2"/><text x="10.0007%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.07%)</title><rect x="9.7507%" y="277" width="0.0733%" height="15" fill="rgb(249,43,39)" fg:x="266" fg:w="2"/><text x="10.0007%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.18%)</title><rect x="9.7507%" y="309" width="0.1833%" height="15" fill="rgb(209,38,44)" fg:x="266" fg:w="5"/><text x="10.0007%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (74 samples, 2.71%)</title><rect x="7.4047%" y="341" width="2.7126%" height="15" fill="rgb(236,212,23)" fg:x="202" fg:w="74"/><text x="7.6547%" y="351.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (74 samples, 2.71%)</title><rect x="7.4047%" y="325" width="2.7126%" height="15" fill="rgb(242,79,21)" fg:x="202" fg:w="74"/><text x="7.6547%" y="335.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (121 samples, 4.44%)</title><rect x="6.4883%" y="357" width="4.4355%" height="15" fill="rgb(211,96,35)" fg:x="177" fg:w="121"/><text x="6.7383%" y="367.50">alloc..</text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (18 samples, 0.66%)</title><rect x="10.9238%" y="325" width="0.6598%" height="15" fill="rgb(253,215,40)" fg:x="298" fg:w="18"/><text x="11.1738%" y="335.50"></text></g><g><title>std::sync::once::Once::call_once (18 samples, 0.66%)</title><rect x="10.9238%" y="309" width="0.6598%" height="15" fill="rgb(211,81,21)" fg:x="298" fg:w="18"/><text x="11.1738%" y="319.50"></text></g><g><title>&lt;xadrez::movegen::PAWN_MOVES as core::ops::deref::Deref&gt;::deref (37 samples, 1.36%)</title><rect x="10.9238%" y="357" width="1.3563%" height="15" fill="rgb(208,190,38)" fg:x="298" fg:w="37"/><text x="11.1738%" y="367.50"></text></g><g><title>&lt;xadrez::movegen::PAWN_MOVES as core::ops::deref::Deref&gt;::deref::__stability (37 samples, 1.36%)</title><rect x="10.9238%" y="341" width="1.3563%" height="15" fill="rgb(235,213,38)" fg:x="298" fg:w="37"/><text x="11.1738%" y="351.50"></text></g><g><title>&lt;xadrez::board::Square as core::convert::TryFrom&lt;usize&gt;&gt;::try_from (42 samples, 1.54%)</title><rect x="12.2801%" y="357" width="1.5396%" height="15" fill="rgb(237,122,38)" fg:x="335" fg:w="42"/><text x="12.5301%" y="367.50"></text></g><g><title>num_traits::cast::FromPrimitive::from_usize (42 samples, 1.54%)</title><rect x="12.2801%" y="341" width="1.5396%" height="15" fill="rgb(244,218,35)" fg:x="335" fg:w="42"/><text x="12.5301%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (42 samples, 1.54%)</title><rect x="12.2801%" y="325" width="1.5396%" height="15" fill="rgb(240,68,47)" fg:x="335" fg:w="42"/><text x="12.5301%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once (42 samples, 1.54%)</title><rect x="12.2801%" y="309" width="1.5396%" height="15" fill="rgb(210,16,53)" fg:x="335" fg:w="42"/><text x="12.5301%" y="319.50"></text></g><g><title>xadrez::board::_IMPL_NUM_FromPrimitive_FOR_Square::&lt;impl num_traits::cast::FromPrimitive for xadrez::board::Square&gt;::from_u64 (42 samples, 1.54%)</title><rect x="12.2801%" y="293" width="1.5396%" height="15" fill="rgb(235,124,12)" fg:x="335" fg:w="42"/><text x="12.5301%" y="303.50"></text></g><g><title>xadrez::board::_IMPL_NUM_FromPrimitive_FOR_Square::&lt;impl num_traits::cast::FromPrimitive for xadrez::board::Square&gt;::from_i64 (42 samples, 1.54%)</title><rect x="12.2801%" y="277" width="1.5396%" height="15" fill="rgb(224,169,11)" fg:x="335" fg:w="42"/><text x="12.5301%" y="287.50"></text></g><g><title>&lt;xadrez::bitboards::Bitboard as core::ops::bit::BitAnd&gt;::bitand (9 samples, 0.33%)</title><rect x="13.8196%" y="357" width="0.3299%" height="15" fill="rgb(250,166,2)" fg:x="377" fg:w="9"/><text x="14.0696%" y="367.50"></text></g><g><title>xadrez::movegen::generate_pawn_moves (400 samples, 14.66%)</title><rect x="3.1158%" y="373" width="14.6628%" height="15" fill="rgb(242,216,29)" fg:x="85" fg:w="400"/><text x="3.3658%" y="383.50">xadrez::movegen::gener..</text></g><g><title>&lt;xadrez::bitboards::Bitboard as core::ops::bit::ShrAssign&lt;T&gt;&gt;::shr_assign (6 samples, 0.22%)</title><rect x="17.7786%" y="293" width="0.2199%" height="15" fill="rgb(230,116,27)" fg:x="485" fg:w="6"/><text x="18.0286%" y="303.50"></text></g><g><title>&lt;u64 as core::ops::bit::ShrAssign&lt;usize&gt;&gt;::shr_assign (6 samples, 0.22%)</title><rect x="17.7786%" y="277" width="0.2199%" height="15" fill="rgb(228,99,48)" fg:x="485" fg:w="6"/><text x="18.0286%" y="287.50"></text></g><g><title>&lt;xadrez::bitboards::Bitboard as core::ops::bit::BitAndAssign&lt;T&gt;&gt;::bitand_assign (6 samples, 0.22%)</title><rect x="17.9985%" y="293" width="0.2199%" height="15" fill="rgb(253,11,6)" fg:x="491" fg:w="6"/><text x="18.2485%" y="303.50"></text></g><g><title>&lt;xadrez::bitboards::Bitboard as core::ops::bit::BitAnd&gt;::bitand (6 samples, 0.22%)</title><rect x="17.9985%" y="277" width="0.2199%" height="15" fill="rgb(247,143,39)" fg:x="491" fg:w="6"/><text x="18.2485%" y="287.50"></text></g><g><title>xadrez::movegen::Magic::index_of (14 samples, 0.51%)</title><rect x="17.7786%" y="309" width="0.5132%" height="15" fill="rgb(236,97,10)" fg:x="485" fg:w="14"/><text x="18.0286%" y="319.50"></text></g><g><title>&lt;xadrez::bitboards::Bitboard as core::ops::arith::MulAssign&gt;::mul_assign (2 samples, 0.07%)</title><rect x="18.2185%" y="293" width="0.0733%" height="15" fill="rgb(233,208,19)" fg:x="497" fg:w="2"/><text x="18.4685%" y="303.50"></text></g><g><title>&lt;xadrez::bitboards::Bitboard as core::ops::arith::Mul&gt;::mul (2 samples, 0.07%)</title><rect x="18.2185%" y="277" width="0.0733%" height="15" fill="rgb(216,164,2)" fg:x="497" fg:w="2"/><text x="18.4685%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (2 samples, 0.07%)</title><rect x="18.2185%" y="261" width="0.0733%" height="15" fill="rgb(220,129,5)" fg:x="497" fg:w="2"/><text x="18.4685%" y="271.50"></text></g><g><title>xadrez::movegen::MagicTable&lt;_&gt;::index_of (20 samples, 0.73%)</title><rect x="17.7786%" y="325" width="0.7331%" height="15" fill="rgb(242,17,10)" fg:x="485" fg:w="20"/><text x="18.0286%" y="335.50"></text></g><g><title>xadrez::movegen::MagicTable&lt;_&gt;::get (27 samples, 0.99%)</title><rect x="17.7786%" y="341" width="0.9897%" height="15" fill="rgb(242,107,0)" fg:x="485" fg:w="27"/><text x="18.0286%" y="351.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.04%)</title><rect x="18.7683%" y="293" width="0.0367%" height="15" fill="rgb(251,28,31)" fg:x="512" fg:w="1"/><text x="19.0183%" y="303.50"></text></g><g><title>std::sync::once::Once::is_completed (1 samples, 0.04%)</title><rect x="18.7683%" y="277" width="0.0367%" height="15" fill="rgb(233,223,10)" fg:x="512" fg:w="1"/><text x="19.0183%" y="287.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (4 samples, 0.15%)</title><rect x="18.7683%" y="309" width="0.1466%" height="15" fill="rgb(215,21,27)" fg:x="512" fg:w="4"/><text x="19.0183%" y="319.50"></text></g><g><title>&lt;xadrez::movegen::ROOK_MOVES as core::ops::deref::Deref&gt;::deref (6 samples, 0.22%)</title><rect x="18.7683%" y="341" width="0.2199%" height="15" fill="rgb(232,23,21)" fg:x="512" fg:w="6"/><text x="19.0183%" y="351.50"></text></g><g><title>&lt;xadrez::movegen::ROOK_MOVES as core::ops::deref::Deref&gt;::deref::__stability (6 samples, 0.22%)</title><rect x="18.7683%" y="325" width="0.2199%" height="15" fill="rgb(244,5,23)" fg:x="512" fg:w="6"/><text x="19.0183%" y="335.50"></text></g><g><title>&lt;xadrez::movegen::PIECE_MOVES as core::ops::deref::Deref&gt;::deref (3 samples, 0.11%)</title><rect x="18.9883%" y="341" width="0.1100%" height="15" fill="rgb(226,81,46)" fg:x="518" fg:w="3"/><text x="19.2383%" y="351.50"></text></g><g><title>&lt;xadrez::movegen::PIECE_MOVES as core::ops::deref::Deref&gt;::deref::__stability (3 samples, 0.11%)</title><rect x="18.9883%" y="325" width="0.1100%" height="15" fill="rgb(247,70,30)" fg:x="518" fg:w="3"/><text x="19.2383%" y="335.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (3 samples, 0.11%)</title><rect x="18.9883%" y="309" width="0.1100%" height="15" fill="rgb(212,68,19)" fg:x="518" fg:w="3"/><text x="19.2383%" y="319.50"></text></g><g><title>std::sync::once::Once::call_once (3 samples, 0.11%)</title><rect x="18.9883%" y="293" width="0.1100%" height="15" fill="rgb(240,187,13)" fg:x="518" fg:w="3"/><text x="19.2383%" y="303.50"></text></g><g><title>std::sync::once::Once::is_completed (3 samples, 0.11%)</title><rect x="18.9883%" y="277" width="0.1100%" height="15" fill="rgb(223,113,26)" fg:x="518" fg:w="3"/><text x="19.2383%" y="287.50"></text></g><g><title>&lt;xadrez::movegen::BISHOP_MOVES as core::ops::deref::Deref&gt;::deref (5 samples, 0.18%)</title><rect x="19.0982%" y="341" width="0.1833%" height="15" fill="rgb(206,192,2)" fg:x="521" fg:w="5"/><text x="19.3482%" y="351.50"></text></g><g><title>&lt;xadrez::movegen::BISHOP_MOVES as core::ops::deref::Deref&gt;::deref::__stability (5 samples, 0.18%)</title><rect x="19.0982%" y="325" width="0.1833%" height="15" fill="rgb(241,108,4)" fg:x="521" fg:w="5"/><text x="19.3482%" y="335.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (5 samples, 0.18%)</title><rect x="19.0982%" y="309" width="0.1833%" height="15" fill="rgb(247,173,49)" fg:x="521" fg:w="5"/><text x="19.3482%" y="319.50"></text></g><g><title>std::sync::once::Once::call_once (5 samples, 0.18%)</title><rect x="19.0982%" y="293" width="0.1833%" height="15" fill="rgb(224,114,35)" fg:x="521" fg:w="5"/><text x="19.3482%" y="303.50"></text></g><g><title>std::sync::once::Once::is_completed (5 samples, 0.18%)</title><rect x="19.0982%" y="277" width="0.1833%" height="15" fill="rgb(245,159,27)" fg:x="521" fg:w="5"/><text x="19.3482%" y="287.50"></text></g><g><title>&lt;xadrez::bitboards::Bitboard as core::ops::bit::BitOr&gt;::bitor (2 samples, 0.07%)</title><rect x="19.2815%" y="341" width="0.0733%" height="15" fill="rgb(245,172,44)" fg:x="526" fg:w="2"/><text x="19.5315%" y="351.50"></text></g><g><title>xadrez::movegen::get_move_bitboard (61 samples, 2.24%)</title><rect x="17.7786%" y="357" width="2.2361%" height="15" fill="rgb(236,23,11)" fg:x="485" fg:w="61"/><text x="18.0286%" y="367.50">x..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get (13 samples, 0.48%)</title><rect x="20.0147%" y="325" width="0.4765%" height="15" fill="rgb(205,117,38)" fg:x="546" fg:w="13"/><text x="20.2647%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (13 samples, 0.48%)</title><rect x="20.0147%" y="309" width="0.4765%" height="15" fill="rgb(237,72,25)" fg:x="546" fg:w="13"/><text x="20.2647%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (13 samples, 0.48%)</title><rect x="20.0147%" y="293" width="0.4765%" height="15" fill="rgb(244,70,9)" fg:x="546" fg:w="13"/><text x="20.2647%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (13 samples, 0.48%)</title><rect x="20.0147%" y="277" width="0.4765%" height="15" fill="rgb(217,125,39)" fg:x="546" fg:w="13"/><text x="20.2647%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (13 samples, 0.48%)</title><rect x="20.0147%" y="261" width="0.4765%" height="15" fill="rgb(235,36,10)" fg:x="546" fg:w="13"/><text x="20.2647%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (2 samples, 0.07%)</title><rect x="20.4912%" y="325" width="0.0733%" height="15" fill="rgb(251,123,47)" fg:x="559" fg:w="2"/><text x="20.7412%" y="335.50"></text></g><g><title>xadrez::bitboards::Bitboard::pop_lsb (95 samples, 3.48%)</title><rect x="20.0147%" y="357" width="3.4824%" height="15" fill="rgb(221,13,13)" fg:x="546" fg:w="95"/><text x="20.2647%" y="367.50">xad..</text></g><g><title>xadrez::bitboards::Bitboard::lsb (95 samples, 3.48%)</title><rect x="20.0147%" y="341" width="3.4824%" height="15" fill="rgb(238,131,9)" fg:x="546" fg:w="95"/><text x="20.2647%" y="351.50">xad..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (17 samples, 0.62%)</title><rect x="23.4971%" y="357" width="0.6232%" height="15" fill="rgb(211,50,8)" fg:x="641" fg:w="17"/><text x="23.7471%" y="367.50"></text></g><g><title>core::ptr::write (7 samples, 0.26%)</title><rect x="24.1202%" y="341" width="0.2566%" height="15" fill="rgb(245,182,24)" fg:x="658" fg:w="7"/><text x="24.3702%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (8 samples, 0.29%)</title><rect x="24.3768%" y="341" width="0.2933%" height="15" fill="rgb(242,14,37)" fg:x="665" fg:w="8"/><text x="24.6268%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (8 samples, 0.29%)</title><rect x="24.3768%" y="325" width="0.2933%" height="15" fill="rgb(246,228,12)" fg:x="665" fg:w="8"/><text x="24.6268%" y="335.50"></text></g><g><title>core::cmp::max (1 samples, 0.04%)</title><rect x="24.6701%" y="309" width="0.0367%" height="15" fill="rgb(213,55,15)" fg:x="673" fg:w="1"/><text x="24.9201%" y="319.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.04%)</title><rect x="24.6701%" y="293" width="0.0367%" height="15" fill="rgb(209,9,3)" fg:x="673" fg:w="1"/><text x="24.9201%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array (5 samples, 0.18%)</title><rect x="24.7067%" y="309" width="0.1833%" height="15" fill="rgb(230,59,30)" fg:x="674" fg:w="5"/><text x="24.9567%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (5 samples, 0.18%)</title><rect x="24.7067%" y="293" width="0.1833%" height="15" fill="rgb(209,121,21)" fg:x="674" fg:w="5"/><text x="24.9567%" y="303.50"></text></g><g><title>malloc (9 samples, 0.33%)</title><rect x="24.8900%" y="293" width="0.3299%" height="15" fill="rgb(220,109,13)" fg:x="679" fg:w="9"/><text x="25.1400%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (9 samples, 0.33%)</title><rect x="25.2199%" y="293" width="0.3299%" height="15" fill="rgb(232,18,1)" fg:x="688" fg:w="9"/><text x="25.4699%" y="303.50"></text></g><g><title>[libc.so.6] (23 samples, 0.84%)</title><rect x="25.5499%" y="213" width="0.8431%" height="15" fill="rgb(215,41,42)" fg:x="697" fg:w="23"/><text x="25.7999%" y="223.50"></text></g><g><title>[libc.so.6] (30 samples, 1.10%)</title><rect x="25.5499%" y="229" width="1.0997%" height="15" fill="rgb(224,123,36)" fg:x="697" fg:w="30"/><text x="25.7999%" y="239.50"></text></g><g><title>realloc (50 samples, 1.83%)</title><rect x="25.5499%" y="245" width="1.8328%" height="15" fill="rgb(240,125,3)" fg:x="697" fg:w="50"/><text x="25.7999%" y="255.50">r..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.11%)</title><rect x="27.3827%" y="229" width="0.1100%" height="15" fill="rgb(205,98,50)" fg:x="747" fg:w="3"/><text x="27.6327%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (54 samples, 1.98%)</title><rect x="25.5499%" y="293" width="1.9795%" height="15" fill="rgb(205,185,37)" fg:x="697" fg:w="54"/><text x="25.7999%" y="303.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (54 samples, 1.98%)</title><rect x="25.5499%" y="277" width="1.9795%" height="15" fill="rgb(238,207,15)" fg:x="697" fg:w="54"/><text x="25.7999%" y="287.50">a..</text></g><g><title>alloc::alloc::realloc (54 samples, 1.98%)</title><rect x="25.5499%" y="261" width="1.9795%" height="15" fill="rgb(213,199,42)" fg:x="697" fg:w="54"/><text x="25.7999%" y="271.50">a..</text></g><g><title>__rdl_realloc (4 samples, 0.15%)</title><rect x="27.3827%" y="245" width="0.1466%" height="15" fill="rgb(235,201,11)" fg:x="747" fg:w="4"/><text x="27.6327%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (79 samples, 2.90%)</title><rect x="24.8900%" y="309" width="2.8959%" height="15" fill="rgb(207,46,11)" fg:x="679" fg:w="79"/><text x="25.1400%" y="319.50">al..</text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.11%)</title><rect x="27.7859%" y="293" width="0.1100%" height="15" fill="rgb(241,35,35)" fg:x="758" fg:w="3"/><text x="28.0359%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.11%)</title><rect x="27.7859%" y="277" width="0.1100%" height="15" fill="rgb(243,32,47)" fg:x="758" fg:w="3"/><text x="28.0359%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (7 samples, 0.26%)</title><rect x="27.7859%" y="309" width="0.2566%" height="15" fill="rgb(247,202,23)" fg:x="758" fg:w="7"/><text x="28.0359%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (97 samples, 3.56%)</title><rect x="24.6701%" y="341" width="3.5557%" height="15" fill="rgb(219,102,11)" fg:x="673" fg:w="97"/><text x="24.9201%" y="351.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (97 samples, 3.56%)</title><rect x="24.6701%" y="325" width="3.5557%" height="15" fill="rgb(243,110,44)" fg:x="673" fg:w="97"/><text x="24.9201%" y="335.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (138 samples, 5.06%)</title><rect x="24.1202%" y="357" width="5.0587%" height="15" fill="rgb(222,74,54)" fg:x="658" fg:w="138"/><text x="24.3702%" y="367.50">alloc:..</text></g><g><title>&lt;xadrez::board::Square as core::convert::TryFrom&lt;usize&gt;&gt;::try_from (41 samples, 1.50%)</title><rect x="29.1789%" y="357" width="1.5029%" height="15" fill="rgb(216,99,12)" fg:x="796" fg:w="41"/><text x="29.4289%" y="367.50"></text></g><g><title>num_traits::cast::FromPrimitive::from_usize (41 samples, 1.50%)</title><rect x="29.1789%" y="341" width="1.5029%" height="15" fill="rgb(226,22,26)" fg:x="796" fg:w="41"/><text x="29.4289%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (41 samples, 1.50%)</title><rect x="29.1789%" y="325" width="1.5029%" height="15" fill="rgb(217,163,10)" fg:x="796" fg:w="41"/><text x="29.4289%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once (41 samples, 1.50%)</title><rect x="29.1789%" y="309" width="1.5029%" height="15" fill="rgb(213,25,53)" fg:x="796" fg:w="41"/><text x="29.4289%" y="319.50"></text></g><g><title>xadrez::board::_IMPL_NUM_FromPrimitive_FOR_Square::&lt;impl num_traits::cast::FromPrimitive for xadrez::board::Square&gt;::from_u64 (41 samples, 1.50%)</title><rect x="29.1789%" y="293" width="1.5029%" height="15" fill="rgb(252,105,26)" fg:x="796" fg:w="41"/><text x="29.4289%" y="303.50"></text></g><g><title>xadrez::board::_IMPL_NUM_FromPrimitive_FOR_Square::&lt;impl num_traits::cast::FromPrimitive for xadrez::board::Square&gt;::from_i64 (41 samples, 1.50%)</title><rect x="29.1789%" y="277" width="1.5029%" height="15" fill="rgb(220,39,43)" fg:x="796" fg:w="41"/><text x="29.4289%" y="287.50"></text></g><g><title>&lt;xadrez::bitboards::Bitboard as core::ops::bit::BitAnd&gt;::bitand (5 samples, 0.18%)</title><rect x="30.6818%" y="357" width="0.1833%" height="15" fill="rgb(229,68,48)" fg:x="837" fg:w="5"/><text x="30.9318%" y="367.50"></text></g><g><title>xadrez::movegen::generate_moves (382 samples, 14.00%)</title><rect x="17.7786%" y="373" width="14.0029%" height="15" fill="rgb(252,8,32)" fg:x="485" fg:w="382"/><text x="18.0286%" y="383.50">xadrez::movegen::gene..</text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="31.7815%" y="277" width="0.0367%" height="15" fill="rgb(223,20,43)" fg:x="867" fg:w="1"/><text x="32.0315%" y="287.50"></text></g><g><title>malloc (9 samples, 0.33%)</title><rect x="31.8182%" y="165" width="0.3299%" height="15" fill="rgb(229,81,49)" fg:x="868" fg:w="9"/><text x="32.0682%" y="175.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="32.1481%" y="165" width="0.0367%" height="15" fill="rgb(236,28,36)" fg:x="877" fg:w="1"/><text x="32.3981%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (12 samples, 0.44%)</title><rect x="31.8182%" y="277" width="0.4399%" height="15" fill="rgb(249,185,26)" fg:x="868" fg:w="12"/><text x="32.0682%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.44%)</title><rect x="31.8182%" y="261" width="0.4399%" height="15" fill="rgb(249,174,33)" fg:x="868" fg:w="12"/><text x="32.0682%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.44%)</title><rect x="31.8182%" y="245" width="0.4399%" height="15" fill="rgb(233,201,37)" fg:x="868" fg:w="12"/><text x="32.0682%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.44%)</title><rect x="31.8182%" y="229" width="0.4399%" height="15" fill="rgb(221,78,26)" fg:x="868" fg:w="12"/><text x="32.0682%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.44%)</title><rect x="31.8182%" y="213" width="0.4399%" height="15" fill="rgb(250,127,30)" fg:x="868" fg:w="12"/><text x="32.0682%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.44%)</title><rect x="31.8182%" y="197" width="0.4399%" height="15" fill="rgb(230,49,44)" fg:x="868" fg:w="12"/><text x="32.0682%" y="207.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.44%)</title><rect x="31.8182%" y="181" width="0.4399%" height="15" fill="rgb(229,67,23)" fg:x="868" fg:w="12"/><text x="32.0682%" y="191.50"></text></g><g><title>__rdl_alloc (2 samples, 0.07%)</title><rect x="32.1848%" y="165" width="0.0733%" height="15" fill="rgb(249,83,47)" fg:x="878" fg:w="2"/><text x="32.4348%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.07%)</title><rect x="32.1848%" y="149" width="0.0733%" height="15" fill="rgb(215,43,3)" fg:x="878" fg:w="2"/><text x="32.4348%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (3 samples, 0.11%)</title><rect x="32.2581%" y="149" width="0.1100%" height="15" fill="rgb(238,154,13)" fg:x="880" fg:w="3"/><text x="32.5081%" y="159.50"></text></g><g><title>xadrez::board::Position::pieces::{{closure}} (8 samples, 0.29%)</title><rect x="32.2581%" y="165" width="0.2933%" height="15" fill="rgb(219,56,2)" fg:x="880" fg:w="8"/><text x="32.5081%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (9 samples, 0.33%)</title><rect x="32.2581%" y="213" width="0.3299%" height="15" fill="rgb(233,0,4)" fg:x="880" fg:w="9"/><text x="32.5081%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (9 samples, 0.33%)</title><rect x="32.2581%" y="197" width="0.3299%" height="15" fill="rgb(235,30,7)" fg:x="880" fg:w="9"/><text x="32.5081%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (9 samples, 0.33%)</title><rect x="32.2581%" y="181" width="0.3299%" height="15" fill="rgb(250,79,13)" fg:x="880" fg:w="9"/><text x="32.5081%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.59%)</title><rect x="32.2581%" y="277" width="0.5865%" height="15" fill="rgb(211,146,34)" fg:x="880" fg:w="16"/><text x="32.5081%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (16 samples, 0.59%)</title><rect x="32.2581%" y="261" width="0.5865%" height="15" fill="rgb(228,22,38)" fg:x="880" fg:w="16"/><text x="32.5081%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (16 samples, 0.59%)</title><rect x="32.2581%" y="245" width="0.5865%" height="15" fill="rgb(235,168,5)" fg:x="880" fg:w="16"/><text x="32.5081%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (16 samples, 0.59%)</title><rect x="32.2581%" y="229" width="0.5865%" height="15" fill="rgb(221,155,16)" fg:x="880" fg:w="16"/><text x="32.5081%" y="239.50"></text></g><g><title>core::ptr::write (2 samples, 0.07%)</title><rect x="32.8446%" y="245" width="0.0733%" height="15" fill="rgb(215,215,53)" fg:x="896" fg:w="2"/><text x="33.0946%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (21 samples, 0.77%)</title><rect x="32.9179%" y="245" width="0.7698%" height="15" fill="rgb(223,4,10)" fg:x="898" fg:w="21"/><text x="33.1679%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (21 samples, 0.77%)</title><rect x="32.9179%" y="229" width="0.7698%" height="15" fill="rgb(234,103,6)" fg:x="898" fg:w="21"/><text x="33.1679%" y="239.50"></text></g><g><title>core::cmp::max (1 samples, 0.04%)</title><rect x="33.6877%" y="181" width="0.0367%" height="15" fill="rgb(227,97,0)" fg:x="919" fg:w="1"/><text x="33.9377%" y="191.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.04%)</title><rect x="33.6877%" y="165" width="0.0367%" height="15" fill="rgb(234,150,53)" fg:x="919" fg:w="1"/><text x="33.9377%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.07%)</title><rect x="33.7243%" y="181" width="0.0733%" height="15" fill="rgb(228,201,54)" fg:x="920" fg:w="2"/><text x="33.9743%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.07%)</title><rect x="33.7243%" y="165" width="0.0733%" height="15" fill="rgb(222,22,37)" fg:x="920" fg:w="2"/><text x="33.9743%" y="175.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.11%)</title><rect x="33.7977%" y="165" width="0.1100%" height="15" fill="rgb(237,53,32)" fg:x="922" fg:w="3"/><text x="34.0477%" y="175.50"></text></g><g><title>[libc.so.6] (56 samples, 2.05%)</title><rect x="33.9076%" y="85" width="2.0528%" height="15" fill="rgb(233,25,53)" fg:x="925" fg:w="56"/><text x="34.1576%" y="95.50">[..</text></g><g><title>[libc.so.6] (77 samples, 2.82%)</title><rect x="33.9076%" y="101" width="2.8226%" height="15" fill="rgb(210,40,34)" fg:x="925" fg:w="77"/><text x="34.1576%" y="111.50">[l..</text></g><g><title>realloc (115 samples, 4.22%)</title><rect x="33.9076%" y="117" width="4.2155%" height="15" fill="rgb(241,220,44)" fg:x="925" fg:w="115"/><text x="34.1576%" y="127.50">reall..</text></g><g><title>__rust_realloc (1 samples, 0.04%)</title><rect x="38.1232%" y="117" width="0.0367%" height="15" fill="rgb(235,28,35)" fg:x="1040" fg:w="1"/><text x="38.3732%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (6 samples, 0.22%)</title><rect x="38.1598%" y="101" width="0.2199%" height="15" fill="rgb(210,56,17)" fg:x="1041" fg:w="6"/><text x="38.4098%" y="111.50"></text></g><g><title>alloc::alloc::realloc (126 samples, 4.62%)</title><rect x="33.9076%" y="133" width="4.6188%" height="15" fill="rgb(224,130,29)" fg:x="925" fg:w="126"/><text x="34.1576%" y="143.50">alloc..</text></g><g><title>__rdl_realloc (10 samples, 0.37%)</title><rect x="38.1598%" y="117" width="0.3666%" height="15" fill="rgb(235,212,8)" fg:x="1041" fg:w="10"/><text x="38.4098%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (127 samples, 4.66%)</title><rect x="33.9076%" y="165" width="4.6554%" height="15" fill="rgb(223,33,50)" fg:x="925" fg:w="127"/><text x="34.1576%" y="175.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::grow_impl (127 samples, 4.66%)</title><rect x="33.9076%" y="149" width="4.6554%" height="15" fill="rgb(219,149,13)" fg:x="925" fg:w="127"/><text x="34.1576%" y="159.50">alloc..</text></g><g><title>alloc::raw_vec::finish_grow (137 samples, 5.02%)</title><rect x="33.7977%" y="181" width="5.0220%" height="15" fill="rgb(250,156,29)" fg:x="922" fg:w="137"/><text x="34.0477%" y="191.50">alloc:..</text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.11%)</title><rect x="38.8196%" y="165" width="0.1100%" height="15" fill="rgb(216,193,19)" fg:x="1059" fg:w="3"/><text x="39.0696%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.11%)</title><rect x="38.8196%" y="149" width="0.1100%" height="15" fill="rgb(216,135,14)" fg:x="1059" fg:w="3"/><text x="39.0696%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (16 samples, 0.59%)</title><rect x="38.8196%" y="181" width="0.5865%" height="15" fill="rgb(241,47,5)" fg:x="1059" fg:w="16"/><text x="39.0696%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (163 samples, 5.98%)</title><rect x="33.6877%" y="245" width="5.9751%" height="15" fill="rgb(233,42,35)" fg:x="919" fg:w="163"/><text x="33.9377%" y="255.50">alloc::v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (163 samples, 5.98%)</title><rect x="33.6877%" y="229" width="5.9751%" height="15" fill="rgb(231,13,6)" fg:x="919" fg:w="163"/><text x="33.9377%" y="239.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (163 samples, 5.98%)</title><rect x="33.6877%" y="213" width="5.9751%" height="15" fill="rgb(207,181,40)" fg:x="919" fg:w="163"/><text x="33.9377%" y="223.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (163 samples, 5.98%)</title><rect x="33.6877%" y="197" width="5.9751%" height="15" fill="rgb(254,173,49)" fg:x="919" fg:w="163"/><text x="33.9377%" y="207.50">alloc::r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.04%)</title><rect x="39.6628%" y="245" width="0.0367%" height="15" fill="rgb(221,1,38)" fg:x="1082" fg:w="1"/><text x="39.9128%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="39.6628%" y="229" width="0.0367%" height="15" fill="rgb(206,124,46)" fg:x="1082" fg:w="1"/><text x="39.9128%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="39.6994%" y="181" width="0.0367%" height="15" fill="rgb(249,21,11)" fg:x="1083" fg:w="1"/><text x="39.9494%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (48 samples, 1.76%)</title><rect x="39.7361%" y="117" width="1.7595%" height="15" fill="rgb(222,201,40)" fg:x="1084" fg:w="48"/><text x="39.9861%" y="127.50"></text></g><g><title>&lt;xadrez::board::Square as core::convert::TryFrom&lt;usize&gt;&gt;::try_from (43 samples, 1.58%)</title><rect x="41.4956%" y="117" width="1.5762%" height="15" fill="rgb(235,61,29)" fg:x="1132" fg:w="43"/><text x="41.7456%" y="127.50"></text></g><g><title>num_traits::cast::FromPrimitive::from_usize (43 samples, 1.58%)</title><rect x="41.4956%" y="101" width="1.5762%" height="15" fill="rgb(219,207,3)" fg:x="1132" fg:w="43"/><text x="41.7456%" y="111.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (43 samples, 1.58%)</title><rect x="41.4956%" y="85" width="1.5762%" height="15" fill="rgb(222,56,46)" fg:x="1132" fg:w="43"/><text x="41.7456%" y="95.50"></text></g><g><title>core::ops::function::FnOnce::call_once (43 samples, 1.58%)</title><rect x="41.4956%" y="69" width="1.5762%" height="15" fill="rgb(239,76,54)" fg:x="1132" fg:w="43"/><text x="41.7456%" y="79.50"></text></g><g><title>xadrez::board::_IMPL_NUM_FromPrimitive_FOR_Square::&lt;impl num_traits::cast::FromPrimitive for xadrez::board::Square&gt;::from_u64 (43 samples, 1.58%)</title><rect x="41.4956%" y="53" width="1.5762%" height="15" fill="rgb(231,124,27)" fg:x="1132" fg:w="43"/><text x="41.7456%" y="63.50"></text></g><g><title>xadrez::board::_IMPL_NUM_FromPrimitive_FOR_Square::&lt;impl num_traits::cast::FromPrimitive for xadrez::board::Square&gt;::from_i64 (43 samples, 1.58%)</title><rect x="41.4956%" y="37" width="1.5762%" height="15" fill="rgb(249,195,6)" fg:x="1132" fg:w="43"/><text x="41.7456%" y="47.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.18%)</title><rect x="43.0718%" y="117" width="0.1833%" height="15" fill="rgb(237,174,47)" fg:x="1175" fg:w="5"/><text x="43.3218%" y="127.50"></text></g><g><title>xadrez::board::Position::pieces::{{closure}} (228 samples, 8.36%)</title><rect x="39.7361%" y="133" width="8.3578%" height="15" fill="rgb(206,201,31)" fg:x="1084" fg:w="228"/><text x="39.9861%" y="143.50">xadrez::boar..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (278 samples, 10.19%)</title><rect x="39.7361%" y="149" width="10.1906%" height="15" fill="rgb(231,57,52)" fg:x="1084" fg:w="278"/><text x="39.9861%" y="159.50">core::ops::func..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (279 samples, 10.23%)</title><rect x="39.7361%" y="165" width="10.2273%" height="15" fill="rgb(248,177,22)" fg:x="1084" fg:w="279"/><text x="39.9861%" y="175.50">core::iter::tra..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (327 samples, 11.99%)</title><rect x="39.7361%" y="181" width="11.9868%" height="15" fill="rgb(215,211,37)" fg:x="1084" fg:w="327"/><text x="39.9861%" y="191.50">&lt;core::iter::adapt..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (438 samples, 16.06%)</title><rect x="39.6994%" y="245" width="16.0557%" height="15" fill="rgb(241,128,51)" fg:x="1083" fg:w="438"/><text x="39.9494%" y="255.50">&lt;core::iter::adapters::fi..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (438 samples, 16.06%)</title><rect x="39.6994%" y="229" width="16.0557%" height="15" fill="rgb(227,165,31)" fg:x="1083" fg:w="438"/><text x="39.9494%" y="239.50">core::iter::traits::itera..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (438 samples, 16.06%)</title><rect x="39.6994%" y="213" width="16.0557%" height="15" fill="rgb(228,167,24)" fg:x="1083" fg:w="438"/><text x="39.9494%" y="223.50">&lt;core::iter::adapters::en..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (438 samples, 16.06%)</title><rect x="39.6994%" y="197" width="16.0557%" height="15" fill="rgb(228,143,12)" fg:x="1083" fg:w="438"/><text x="39.9494%" y="207.50">core::iter::traits::itera..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (761 samples, 27.90%)</title><rect x="32.8446%" y="277" width="27.8959%" height="15" fill="rgb(249,149,8)" fg:x="896" fg:w="761"/><text x="33.0946%" y="287.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_ext..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (761 samples, 27.90%)</title><rect x="32.8446%" y="261" width="27.8959%" height="15" fill="rgb(243,35,44)" fg:x="896" fg:w="761"/><text x="33.0946%" y="271.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (804 samples, 29.47%)</title><rect x="31.7815%" y="293" width="29.4721%" height="15" fill="rgb(246,89,9)" fg:x="867" fg:w="804"/><text x="32.0315%" y="303.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (806 samples, 29.55%)</title><rect x="31.7815%" y="309" width="29.5455%" height="15" fill="rgb(233,213,13)" fg:x="867" fg:w="806"/><text x="32.0315%" y="319.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_ite..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (809 samples, 29.66%)</title><rect x="31.7815%" y="341" width="29.6554%" height="15" fill="rgb(233,141,41)" fg:x="867" fg:w="809"/><text x="32.0315%" y="351.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (809 samples, 29.66%)</title><rect x="31.7815%" y="325" width="29.6554%" height="15" fill="rgb(239,167,4)" fg:x="867" fg:w="809"/><text x="32.0315%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::colle..</text></g><g><title>xadrez::board::Position::pieces (811 samples, 29.73%)</title><rect x="31.7815%" y="357" width="29.7287%" height="15" fill="rgb(209,217,16)" fg:x="867" fg:w="811"/><text x="32.0315%" y="367.50">xadrez::board::Position::pieces</text></g><g><title>xadrez::bitboards::Bitboard::on (134 samples, 4.91%)</title><rect x="61.5103%" y="357" width="4.9120%" height="15" fill="rgb(219,88,35)" fg:x="1678" fg:w="134"/><text x="61.7603%" y="367.50">xadrez..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="66.4223%" y="261" width="0.0367%" height="15" fill="rgb(220,193,23)" fg:x="1812" fg:w="1"/><text x="66.6723%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.04%)</title><rect x="66.4223%" y="245" width="0.0367%" height="15" fill="rgb(230,90,52)" fg:x="1812" fg:w="1"/><text x="66.6723%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.04%)</title><rect x="66.4223%" y="229" width="0.0367%" height="15" fill="rgb(252,106,19)" fg:x="1812" fg:w="1"/><text x="66.6723%" y="239.50"></text></g><g><title>[libc.so.6] (12 samples, 0.44%)</title><rect x="66.4589%" y="213" width="0.4399%" height="15" fill="rgb(206,74,20)" fg:x="1813" fg:w="12"/><text x="66.7089%" y="223.50"></text></g><g><title>cfree (15 samples, 0.55%)</title><rect x="66.4589%" y="229" width="0.5499%" height="15" fill="rgb(230,138,44)" fg:x="1813" fg:w="15"/><text x="66.7089%" y="239.50"></text></g><g><title>__rust_dealloc (1 samples, 0.04%)</title><rect x="67.0088%" y="229" width="0.0367%" height="15" fill="rgb(235,182,43)" fg:x="1828" fg:w="1"/><text x="67.2588%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(xadrez::piece::Piece,xadrez::board::Square)&gt;&gt; (21 samples, 0.77%)</title><rect x="66.4223%" y="357" width="0.7698%" height="15" fill="rgb(242,16,51)" fg:x="1812" fg:w="21"/><text x="66.6723%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.77%)</title><rect x="66.4223%" y="341" width="0.7698%" height="15" fill="rgb(248,9,4)" fg:x="1812" fg:w="21"/><text x="66.6723%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(xadrez::piece::Piece,xadrez::board::Square),alloc::alloc::Global&gt;&gt; (21 samples, 0.77%)</title><rect x="66.4223%" y="325" width="0.7698%" height="15" fill="rgb(210,31,22)" fg:x="1812" fg:w="21"/><text x="66.6723%" y="335.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.77%)</title><rect x="66.4223%" y="309" width="0.7698%" height="15" fill="rgb(239,54,39)" fg:x="1812" fg:w="21"/><text x="66.6723%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(xadrez::piece::Piece,xadrez::board::Square)&gt;&gt; (21 samples, 0.77%)</title><rect x="66.4223%" y="293" width="0.7698%" height="15" fill="rgb(230,99,41)" fg:x="1812" fg:w="21"/><text x="66.6723%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.77%)</title><rect x="66.4223%" y="277" width="0.7698%" height="15" fill="rgb(253,106,12)" fg:x="1812" fg:w="21"/><text x="66.6723%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.73%)</title><rect x="66.4589%" y="261" width="0.7331%" height="15" fill="rgb(213,46,41)" fg:x="1813" fg:w="20"/><text x="66.7089%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.73%)</title><rect x="66.4589%" y="245" width="0.7331%" height="15" fill="rgb(215,133,35)" fg:x="1813" fg:w="20"/><text x="66.7089%" y="255.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.15%)</title><rect x="67.0455%" y="229" width="0.1466%" height="15" fill="rgb(213,28,5)" fg:x="1829" fg:w="4"/><text x="67.2955%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.15%)</title><rect x="67.0455%" y="213" width="0.1466%" height="15" fill="rgb(215,77,49)" fg:x="1829" fg:w="4"/><text x="67.2955%" y="223.50"></text></g><g><title>core::ptr::read (8 samples, 0.29%)</title><rect x="67.1921%" y="341" width="0.2933%" height="15" fill="rgb(248,100,22)" fg:x="1833" fg:w="8"/><text x="67.4421%" y="351.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 1.25%)</title><rect x="67.1921%" y="357" width="1.2463%" height="15" fill="rgb(208,67,9)" fg:x="1833" fg:w="34"/><text x="67.4421%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.04%)</title><rect x="68.4384%" y="357" width="0.0367%" height="15" fill="rgb(219,133,21)" fg:x="1867" fg:w="1"/><text x="68.6884%" y="367.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="68.4384%" y="341" width="0.0367%" height="15" fill="rgb(246,46,29)" fg:x="1867" fg:w="1"/><text x="68.6884%" y="351.50"></text></g><g><title>xadrez::movegen::PositionBitboards::new (1,092 samples, 40.03%)</title><rect x="31.7815%" y="373" width="40.0293%" height="15" fill="rgb(246,185,52)" fg:x="867" fg:w="1092"/><text x="32.0315%" y="383.50">xadrez::movegen::PositionBitboards::new</text></g><g><title>xadrez::movegen::generate_legal_moves (1,879 samples, 68.88%)</title><rect x="3.1158%" y="389" width="68.8783%" height="15" fill="rgb(252,136,11)" fg:x="85" fg:w="1879"/><text x="3.3658%" y="399.50">xadrez::movegen::generate_legal_moves</text></g><g><title>[libc.so.6] (33 samples, 1.21%)</title><rect x="71.9941%" y="341" width="1.2097%" height="15" fill="rgb(219,138,53)" fg:x="1964" fg:w="33"/><text x="72.2441%" y="351.50"></text></g><g><title>core::ptr::write (36 samples, 1.32%)</title><rect x="71.9941%" y="357" width="1.3196%" height="15" fill="rgb(211,51,23)" fg:x="1964" fg:w="36"/><text x="72.2441%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="73.3138%" y="357" width="0.0367%" height="15" fill="rgb(247,221,28)" fg:x="2000" fg:w="1"/><text x="73.5638%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="73.3138%" y="341" width="0.0367%" height="15" fill="rgb(251,222,45)" fg:x="2000" fg:w="1"/><text x="73.5638%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (38 samples, 1.39%)</title><rect x="71.9941%" y="373" width="1.3930%" height="15" fill="rgb(217,162,53)" fg:x="1964" fg:w="38"/><text x="72.2441%" y="383.50"></text></g><g><title>[libc.so.6] (17 samples, 0.62%)</title><rect x="73.3871%" y="373" width="0.6232%" height="15" fill="rgb(229,93,14)" fg:x="2002" fg:w="17"/><text x="73.6371%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (8 samples, 0.29%)</title><rect x="74.0103%" y="309" width="0.2933%" height="15" fill="rgb(209,67,49)" fg:x="2019" fg:w="8"/><text x="74.2603%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.29%)</title><rect x="74.0103%" y="293" width="0.2933%" height="15" fill="rgb(213,87,29)" fg:x="2019" fg:w="8"/><text x="74.2603%" y="303.50"></text></g><g><title>[libc.so.6] (8 samples, 0.29%)</title><rect x="74.0103%" y="277" width="0.2933%" height="15" fill="rgb(205,151,52)" fg:x="2019" fg:w="8"/><text x="74.2603%" y="287.50"></text></g><g><title>malloc (15 samples, 0.55%)</title><rect x="74.3035%" y="213" width="0.5499%" height="15" fill="rgb(253,215,39)" fg:x="2027" fg:w="15"/><text x="74.5535%" y="223.50"></text></g><g><title>__rdl_alloc (2 samples, 0.07%)</title><rect x="74.8534%" y="213" width="0.0733%" height="15" fill="rgb(221,220,41)" fg:x="2042" fg:w="2"/><text x="75.1034%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.07%)</title><rect x="74.8534%" y="197" width="0.0733%" height="15" fill="rgb(218,133,21)" fg:x="2042" fg:w="2"/><text x="75.1034%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.66%)</title><rect x="74.3035%" y="261" width="0.6598%" height="15" fill="rgb(221,193,43)" fg:x="2027" fg:w="18"/><text x="74.5535%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.66%)</title><rect x="74.3035%" y="245" width="0.6598%" height="15" fill="rgb(240,128,52)" fg:x="2027" fg:w="18"/><text x="74.5535%" y="255.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.66%)</title><rect x="74.3035%" y="229" width="0.6598%" height="15" fill="rgb(253,114,12)" fg:x="2027" fg:w="18"/><text x="74.5535%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (29 samples, 1.06%)</title><rect x="74.0103%" y="373" width="1.0630%" height="15" fill="rgb(215,223,47)" fg:x="2019" fg:w="29"/><text x="74.2603%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (29 samples, 1.06%)</title><rect x="74.0103%" y="357" width="1.0630%" height="15" fill="rgb(248,225,23)" fg:x="2019" fg:w="29"/><text x="74.2603%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (29 samples, 1.06%)</title><rect x="74.0103%" y="341" width="1.0630%" height="15" fill="rgb(250,108,0)" fg:x="2019" fg:w="29"/><text x="74.2603%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (29 samples, 1.06%)</title><rect x="74.0103%" y="325" width="1.0630%" height="15" fill="rgb(228,208,7)" fg:x="2019" fg:w="29"/><text x="74.2603%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (21 samples, 0.77%)</title><rect x="74.3035%" y="309" width="0.7698%" height="15" fill="rgb(244,45,10)" fg:x="2027" fg:w="21"/><text x="74.5535%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21 samples, 0.77%)</title><rect x="74.3035%" y="293" width="0.7698%" height="15" fill="rgb(207,125,25)" fg:x="2027" fg:w="21"/><text x="74.5535%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (21 samples, 0.77%)</title><rect x="74.3035%" y="277" width="0.7698%" height="15" fill="rgb(210,195,18)" fg:x="2027" fg:w="21"/><text x="74.5535%" y="287.50"></text></g><g><title>xadrez::board::Chessboard::save_current_to_history (85 samples, 3.12%)</title><rect x="71.9941%" y="389" width="3.1158%" height="15" fill="rgb(249,80,12)" fg:x="1964" fg:w="85"/><text x="72.2441%" y="399.50">xad..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="75.1100%" y="341" width="0.0367%" height="15" fill="rgb(221,65,9)" fg:x="2049" fg:w="1"/><text x="75.3600%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.04%)</title><rect x="75.1100%" y="325" width="0.0367%" height="15" fill="rgb(235,49,36)" fg:x="2049" fg:w="1"/><text x="75.3600%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.04%)</title><rect x="75.1100%" y="309" width="0.0367%" height="15" fill="rgb(225,32,20)" fg:x="2049" fg:w="1"/><text x="75.3600%" y="319.50"></text></g><g><title>[libc.so.6] (15 samples, 0.55%)</title><rect x="75.1466%" y="293" width="0.5499%" height="15" fill="rgb(215,141,46)" fg:x="2050" fg:w="15"/><text x="75.3966%" y="303.50"></text></g><g><title>cfree (19 samples, 0.70%)</title><rect x="75.1466%" y="309" width="0.6965%" height="15" fill="rgb(250,160,47)" fg:x="2050" fg:w="19"/><text x="75.3966%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;xadrez::move::Move&gt;&gt; (21 samples, 0.77%)</title><rect x="75.1100%" y="389" width="0.7698%" height="15" fill="rgb(216,222,40)" fg:x="2049" fg:w="21"/><text x="75.3600%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;xadrez::move::Move&gt;&gt; (21 samples, 0.77%)</title><rect x="75.1100%" y="373" width="0.7698%" height="15" fill="rgb(234,217,39)" fg:x="2049" fg:w="21"/><text x="75.3600%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.77%)</title><rect x="75.1100%" y="357" width="0.7698%" height="15" fill="rgb(207,178,40)" fg:x="2049" fg:w="21"/><text x="75.3600%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.73%)</title><rect x="75.1466%" y="341" width="0.7331%" height="15" fill="rgb(221,136,13)" fg:x="2050" fg:w="20"/><text x="75.3966%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.73%)</title><rect x="75.1466%" y="325" width="0.7331%" height="15" fill="rgb(249,199,10)" fg:x="2050" fg:w="20"/><text x="75.3966%" y="335.50"></text></g><g><title>__rust_dealloc (1 samples, 0.04%)</title><rect x="75.8431%" y="309" width="0.0367%" height="15" fill="rgb(249,222,13)" fg:x="2069" fg:w="1"/><text x="76.0931%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (3 samples, 0.11%)</title><rect x="75.8798%" y="389" width="0.1100%" height="15" fill="rgb(244,185,38)" fg:x="2070" fg:w="3"/><text x="76.1298%" y="399.50"></text></g><g><title>&lt;xadrez::move::MoveKind as core::cmp::PartialEq&gt;::eq (27 samples, 0.99%)</title><rect x="75.9897%" y="309" width="0.9897%" height="15" fill="rgb(236,202,9)" fg:x="2073" fg:w="27"/><text x="76.2397%" y="319.50"></text></g><g><title>&lt;xadrez::move::Move as core::cmp::PartialEq&lt;xadrez::move::MoveKind&gt;&gt;::eq (60 samples, 2.20%)</title><rect x="75.9897%" y="325" width="2.1994%" height="15" fill="rgb(250,229,37)" fg:x="2073" fg:w="60"/><text x="76.2397%" y="335.50">&lt;..</text></g><g><title>&lt;xadrez::board::Square as core::cmp::PartialEq&gt;::eq (7 samples, 0.26%)</title><rect x="78.1891%" y="325" width="0.2566%" height="15" fill="rgb(206,174,23)" fg:x="2133" fg:w="7"/><text x="78.4391%" y="335.50"></text></g><g><title>xadrez::board::Chessboard::make_move::{{closure}} (72 samples, 2.64%)</title><rect x="75.9897%" y="373" width="2.6393%" height="15" fill="rgb(211,33,43)" fg:x="2073" fg:w="72"/><text x="76.2397%" y="383.50">xa..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (72 samples, 2.64%)</title><rect x="75.9897%" y="357" width="2.6393%" height="15" fill="rgb(245,58,50)" fg:x="2073" fg:w="72"/><text x="76.2397%" y="367.50">co..</text></g><g><title>&lt;xadrez::move::Move as core::cmp::PartialEq&gt;::eq (72 samples, 2.64%)</title><rect x="75.9897%" y="341" width="2.6393%" height="15" fill="rgb(244,68,36)" fg:x="2073" fg:w="72"/><text x="76.2397%" y="351.50">&lt;x..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.29%)</title><rect x="78.6290%" y="373" width="0.2933%" height="15" fill="rgb(232,229,15)" fg:x="2145" fg:w="8"/><text x="78.8790%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (89 samples, 3.26%)</title><rect x="75.9897%" y="389" width="3.2625%" height="15" fill="rgb(254,30,23)" fg:x="2073" fg:w="89"/><text x="76.2397%" y="399.50">&lt;co..</text></g><g><title>xadrez::board::Chessboard::make_move (2,099 samples, 76.94%)</title><rect x="3.1158%" y="405" width="76.9428%" height="15" fill="rgb(235,160,14)" fg:x="85" fg:w="2099"/><text x="3.3658%" y="415.50">xadrez::board::Chessboard::make_move</text></g><g><title>cfree (4 samples, 0.15%)</title><rect x="80.0587%" y="405" width="0.1466%" height="15" fill="rgb(212,155,44)" fg:x="2184" fg:w="4"/><text x="80.3087%" y="415.50"></text></g><g><title>[libc.so.6] (4 samples, 0.15%)</title><rect x="80.0587%" y="389" width="0.1466%" height="15" fill="rgb(226,2,50)" fg:x="2184" fg:w="4"/><text x="80.3087%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="80.2053%" y="293" width="0.0733%" height="15" fill="rgb(234,177,6)" fg:x="2188" fg:w="2"/><text x="80.4553%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="80.2053%" y="277" width="0.0733%" height="15" fill="rgb(217,24,9)" fg:x="2188" fg:w="2"/><text x="80.4553%" y="287.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="80.2053%" y="261" width="0.0733%" height="15" fill="rgb(220,13,46)" fg:x="2188" fg:w="2"/><text x="80.4553%" y="271.50"></text></g><g><title>malloc (2 samples, 0.07%)</title><rect x="80.2053%" y="245" width="0.0733%" height="15" fill="rgb(239,221,27)" fg:x="2188" fg:w="2"/><text x="80.4553%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="80.2053%" y="405" width="0.1100%" height="15" fill="rgb(222,198,25)" fg:x="2188" fg:w="3"/><text x="80.4553%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.11%)</title><rect x="80.2053%" y="389" width="0.1100%" height="15" fill="rgb(211,99,13)" fg:x="2188" fg:w="3"/><text x="80.4553%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.11%)</title><rect x="80.2053%" y="373" width="0.1100%" height="15" fill="rgb(232,111,31)" fg:x="2188" fg:w="3"/><text x="80.4553%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.11%)</title><rect x="80.2053%" y="357" width="0.1100%" height="15" fill="rgb(245,82,37)" fg:x="2188" fg:w="3"/><text x="80.4553%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="80.2053%" y="341" width="0.1100%" height="15" fill="rgb(227,149,46)" fg:x="2188" fg:w="3"/><text x="80.4553%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="80.2053%" y="325" width="0.1100%" height="15" fill="rgb(218,36,50)" fg:x="2188" fg:w="3"/><text x="80.4553%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.11%)</title><rect x="80.2053%" y="309" width="0.1100%" height="15" fill="rgb(226,80,48)" fg:x="2188" fg:w="3"/><text x="80.4553%" y="319.50"></text></g><g><title>xadrez::board::Chessboard::perft (2,188 samples, 80.21%)</title><rect x="0.2199%" y="421" width="80.2053%" height="15" fill="rgb(238,224,15)" fg:x="6" fg:w="2188"/><text x="0.4699%" y="431.50">xadrez::board::Chessboard::perft</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.04%)</title><rect x="80.4252%" y="341" width="0.0367%" height="15" fill="rgb(241,136,10)" fg:x="2194" fg:w="1"/><text x="80.6752%" y="351.50"></text></g><g><title>xadrez::bitboards::Bitboard::pop_lsb (3 samples, 0.11%)</title><rect x="80.4252%" y="373" width="0.1100%" height="15" fill="rgb(208,32,45)" fg:x="2194" fg:w="3"/><text x="80.6752%" y="383.50"></text></g><g><title>xadrez::bitboards::Bitboard::lsb (3 samples, 0.11%)</title><rect x="80.4252%" y="357" width="0.1100%" height="15" fill="rgb(207,135,9)" fg:x="2194" fg:w="3"/><text x="80.6752%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (2 samples, 0.07%)</title><rect x="80.5352%" y="373" width="0.0733%" height="15" fill="rgb(206,86,44)" fg:x="2197" fg:w="2"/><text x="80.7852%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="80.6085%" y="357" width="0.0367%" height="15" fill="rgb(245,177,15)" fg:x="2199" fg:w="1"/><text x="80.8585%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="80.6452%" y="213" width="0.0367%" height="15" fill="rgb(206,64,50)" fg:x="2200" fg:w="1"/><text x="80.8952%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.11%)</title><rect x="80.6452%" y="309" width="0.1100%" height="15" fill="rgb(234,36,40)" fg:x="2200" fg:w="3"/><text x="80.8952%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.11%)</title><rect x="80.6452%" y="293" width="0.1100%" height="15" fill="rgb(213,64,8)" fg:x="2200" fg:w="3"/><text x="80.8952%" y="303.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.11%)</title><rect x="80.6452%" y="277" width="0.1100%" height="15" fill="rgb(210,75,36)" fg:x="2200" fg:w="3"/><text x="80.8952%" y="287.50"></text></g><g><title>realloc (3 samples, 0.11%)</title><rect x="80.6452%" y="261" width="0.1100%" height="15" fill="rgb(229,88,21)" fg:x="2200" fg:w="3"/><text x="80.8952%" y="271.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="80.6452%" y="245" width="0.1100%" height="15" fill="rgb(252,204,47)" fg:x="2200" fg:w="3"/><text x="80.8952%" y="255.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="80.6452%" y="229" width="0.1100%" height="15" fill="rgb(208,77,27)" fg:x="2200" fg:w="3"/><text x="80.8952%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.15%)</title><rect x="80.6452%" y="325" width="0.1466%" height="15" fill="rgb(221,76,26)" fg:x="2200" fg:w="4"/><text x="80.8952%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.18%)</title><rect x="80.6452%" y="357" width="0.1833%" height="15" fill="rgb(225,139,18)" fg:x="2200" fg:w="5"/><text x="80.8952%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.18%)</title><rect x="80.6452%" y="341" width="0.1833%" height="15" fill="rgb(230,137,11)" fg:x="2200" fg:w="5"/><text x="80.8952%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="80.7918%" y="325" width="0.0367%" height="15" fill="rgb(212,28,1)" fg:x="2204" fg:w="1"/><text x="81.0418%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.33%)</title><rect x="80.6085%" y="373" width="0.3299%" height="15" fill="rgb(248,164,17)" fg:x="2199" fg:w="9"/><text x="80.8585%" y="383.50"></text></g><g><title>&lt;xadrez::movegen::PAWN_MOVES as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="80.9384%" y="373" width="0.0367%" height="15" fill="rgb(222,171,42)" fg:x="2208" fg:w="1"/><text x="81.1884%" y="383.50"></text></g><g><title>&lt;xadrez::movegen::PAWN_MOVES as core::ops::deref::Deref&gt;::deref::__stability (1 samples, 0.04%)</title><rect x="80.9384%" y="357" width="0.0367%" height="15" fill="rgb(243,84,45)" fg:x="2208" fg:w="1"/><text x="81.1884%" y="367.50"></text></g><g><title>&lt;xadrez::board::Square as core::convert::TryFrom&lt;usize&gt;&gt;::try_from (3 samples, 0.11%)</title><rect x="80.9751%" y="373" width="0.1100%" height="15" fill="rgb(252,49,23)" fg:x="2209" fg:w="3"/><text x="81.2251%" y="383.50"></text></g><g><title>num_traits::cast::FromPrimitive::from_usize (3 samples, 0.11%)</title><rect x="80.9751%" y="357" width="0.1100%" height="15" fill="rgb(215,19,7)" fg:x="2209" fg:w="3"/><text x="81.2251%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3 samples, 0.11%)</title><rect x="80.9751%" y="341" width="0.1100%" height="15" fill="rgb(238,81,41)" fg:x="2209" fg:w="3"/><text x="81.2251%" y="351.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.11%)</title><rect x="80.9751%" y="325" width="0.1100%" height="15" fill="rgb(210,199,37)" fg:x="2209" fg:w="3"/><text x="81.2251%" y="335.50"></text></g><g><title>xadrez::board::_IMPL_NUM_FromPrimitive_FOR_Square::&lt;impl num_traits::cast::FromPrimitive for xadrez::board::Square&gt;::from_u64 (3 samples, 0.11%)</title><rect x="80.9751%" y="309" width="0.1100%" height="15" fill="rgb(244,192,49)" fg:x="2209" fg:w="3"/><text x="81.2251%" y="319.50"></text></g><g><title>xadrez::board::_IMPL_NUM_FromPrimitive_FOR_Square::&lt;impl num_traits::cast::FromPrimitive for xadrez::board::Square&gt;::from_i64 (3 samples, 0.11%)</title><rect x="80.9751%" y="293" width="0.1100%" height="15" fill="rgb(226,211,11)" fg:x="2209" fg:w="3"/><text x="81.2251%" y="303.50"></text></g><g><title>xadrez::movegen::generate_pawn_moves (24 samples, 0.88%)</title><rect x="80.4252%" y="389" width="0.8798%" height="15" fill="rgb(236,162,54)" fg:x="2194" fg:w="24"/><text x="80.6752%" y="399.50"></text></g><g><title>xadrez::movegen::MagicTable&lt;_&gt;::index_of (2 samples, 0.07%)</title><rect x="81.3050%" y="341" width="0.0733%" height="15" fill="rgb(220,229,9)" fg:x="2218" fg:w="2"/><text x="81.5550%" y="351.50"></text></g><g><title>xadrez::movegen::MagicTable&lt;_&gt;::get (3 samples, 0.11%)</title><rect x="81.3050%" y="357" width="0.1100%" height="15" fill="rgb(250,87,22)" fg:x="2218" fg:w="3"/><text x="81.5550%" y="367.50"></text></g><g><title>xadrez::movegen::get_move_bitboard (6 samples, 0.22%)</title><rect x="81.3050%" y="373" width="0.2199%" height="15" fill="rgb(239,43,17)" fg:x="2218" fg:w="6"/><text x="81.5550%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.04%)</title><rect x="81.5249%" y="341" width="0.0367%" height="15" fill="rgb(231,177,25)" fg:x="2224" fg:w="1"/><text x="81.7749%" y="351.50"></text></g><g><title>xadrez::bitboards::Bitboard::pop_lsb (12 samples, 0.44%)</title><rect x="81.5249%" y="373" width="0.4399%" height="15" fill="rgb(219,179,1)" fg:x="2224" fg:w="12"/><text x="81.7749%" y="383.50"></text></g><g><title>xadrez::bitboards::Bitboard::lsb (12 samples, 0.44%)</title><rect x="81.5249%" y="357" width="0.4399%" height="15" fill="rgb(238,219,53)" fg:x="2224" fg:w="12"/><text x="81.7749%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.04%)</title><rect x="81.9648%" y="373" width="0.0367%" height="15" fill="rgb(232,167,36)" fg:x="2236" fg:w="1"/><text x="82.2148%" y="383.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="82.0015%" y="229" width="0.0733%" height="15" fill="rgb(244,19,51)" fg:x="2237" fg:w="2"/><text x="82.2515%" y="239.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="82.0015%" y="245" width="0.1100%" height="15" fill="rgb(224,6,22)" fg:x="2237" fg:w="3"/><text x="82.2515%" y="255.50"></text></g><g><title>realloc (7 samples, 0.26%)</title><rect x="82.0015%" y="261" width="0.2566%" height="15" fill="rgb(224,145,5)" fg:x="2237" fg:w="7"/><text x="82.2515%" y="271.50"></text></g><g><title>__rust_realloc (1 samples, 0.04%)</title><rect x="82.2581%" y="261" width="0.0367%" height="15" fill="rgb(234,130,49)" fg:x="2244" fg:w="1"/><text x="82.5081%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.33%)</title><rect x="82.0015%" y="309" width="0.3299%" height="15" fill="rgb(254,6,2)" fg:x="2237" fg:w="9"/><text x="82.2515%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.33%)</title><rect x="82.0015%" y="293" width="0.3299%" height="15" fill="rgb(208,96,46)" fg:x="2237" fg:w="9"/><text x="82.2515%" y="303.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.33%)</title><rect x="82.0015%" y="277" width="0.3299%" height="15" fill="rgb(239,3,39)" fg:x="2237" fg:w="9"/><text x="82.2515%" y="287.50"></text></g><g><title>__rdl_realloc (1 samples, 0.04%)</title><rect x="82.2947%" y="261" width="0.0367%" height="15" fill="rgb(233,210,1)" fg:x="2245" fg:w="1"/><text x="82.5447%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.04%)</title><rect x="82.2947%" y="245" width="0.0367%" height="15" fill="rgb(244,137,37)" fg:x="2245" fg:w="1"/><text x="82.5447%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.37%)</title><rect x="82.0015%" y="357" width="0.3666%" height="15" fill="rgb(240,136,2)" fg:x="2237" fg:w="10"/><text x="82.2515%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.37%)</title><rect x="82.0015%" y="341" width="0.3666%" height="15" fill="rgb(239,18,37)" fg:x="2237" fg:w="10"/><text x="82.2515%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.37%)</title><rect x="82.0015%" y="325" width="0.3666%" height="15" fill="rgb(218,185,22)" fg:x="2237" fg:w="10"/><text x="82.2515%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11 samples, 0.40%)</title><rect x="82.0015%" y="373" width="0.4032%" height="15" fill="rgb(225,218,4)" fg:x="2237" fg:w="11"/><text x="82.2515%" y="383.50"></text></g><g><title>xadrez::movegen::generate_moves (33 samples, 1.21%)</title><rect x="81.3050%" y="389" width="1.2097%" height="15" fill="rgb(230,182,32)" fg:x="2218" fg:w="33"/><text x="81.5550%" y="399.50"></text></g><g><title>&lt;xadrez::board::Square as core::convert::TryFrom&lt;usize&gt;&gt;::try_from (3 samples, 0.11%)</title><rect x="82.4047%" y="373" width="0.1100%" height="15" fill="rgb(242,56,43)" fg:x="2248" fg:w="3"/><text x="82.6547%" y="383.50"></text></g><g><title>num_traits::cast::FromPrimitive::from_usize (3 samples, 0.11%)</title><rect x="82.4047%" y="357" width="0.1100%" height="15" fill="rgb(233,99,24)" fg:x="2248" fg:w="3"/><text x="82.6547%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3 samples, 0.11%)</title><rect x="82.4047%" y="341" width="0.1100%" height="15" fill="rgb(234,209,42)" fg:x="2248" fg:w="3"/><text x="82.6547%" y="351.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.11%)</title><rect x="82.4047%" y="325" width="0.1100%" height="15" fill="rgb(227,7,12)" fg:x="2248" fg:w="3"/><text x="82.6547%" y="335.50"></text></g><g><title>xadrez::board::_IMPL_NUM_FromPrimitive_FOR_Square::&lt;impl num_traits::cast::FromPrimitive for xadrez::board::Square&gt;::from_u64 (3 samples, 0.11%)</title><rect x="82.4047%" y="309" width="0.1100%" height="15" fill="rgb(245,203,43)" fg:x="2248" fg:w="3"/><text x="82.6547%" y="319.50"></text></g><g><title>xadrez::board::_IMPL_NUM_FromPrimitive_FOR_Square::&lt;impl num_traits::cast::FromPrimitive for xadrez::board::Square&gt;::from_i64 (3 samples, 0.11%)</title><rect x="82.4047%" y="293" width="0.1100%" height="15" fill="rgb(238,205,33)" fg:x="2248" fg:w="3"/><text x="82.6547%" y="303.50"></text></g><g><title>malloc (2 samples, 0.07%)</title><rect x="82.5147%" y="181" width="0.0733%" height="15" fill="rgb(231,56,7)" fg:x="2251" fg:w="2"/><text x="82.7647%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.11%)</title><rect x="82.5147%" y="293" width="0.1100%" height="15" fill="rgb(244,186,29)" fg:x="2251" fg:w="3"/><text x="82.7647%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="82.5147%" y="277" width="0.1100%" height="15" fill="rgb(234,111,31)" fg:x="2251" fg:w="3"/><text x="82.7647%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="82.5147%" y="261" width="0.1100%" height="15" fill="rgb(241,149,10)" fg:x="2251" fg:w="3"/><text x="82.7647%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.11%)</title><rect x="82.5147%" y="245" width="0.1100%" height="15" fill="rgb(249,206,44)" fg:x="2251" fg:w="3"/><text x="82.7647%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.11%)</title><rect x="82.5147%" y="229" width="0.1100%" height="15" fill="rgb(251,153,30)" fg:x="2251" fg:w="3"/><text x="82.7647%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.11%)</title><rect x="82.5147%" y="213" width="0.1100%" height="15" fill="rgb(239,152,38)" fg:x="2251" fg:w="3"/><text x="82.7647%" y="223.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.11%)</title><rect x="82.5147%" y="197" width="0.1100%" height="15" fill="rgb(249,139,47)" fg:x="2251" fg:w="3"/><text x="82.7647%" y="207.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="82.5880%" y="181" width="0.0367%" height="15" fill="rgb(244,64,35)" fg:x="2253" fg:w="1"/><text x="82.8380%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="82.6246%" y="293" width="0.0367%" height="15" fill="rgb(216,46,15)" fg:x="2254" fg:w="1"/><text x="82.8746%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1 samples, 0.04%)</title><rect x="82.6246%" y="277" width="0.0367%" height="15" fill="rgb(250,74,19)" fg:x="2254" fg:w="1"/><text x="82.8746%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.04%)</title><rect x="82.6246%" y="261" width="0.0367%" height="15" fill="rgb(249,42,33)" fg:x="2254" fg:w="1"/><text x="82.8746%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.04%)</title><rect x="82.6246%" y="245" width="0.0367%" height="15" fill="rgb(242,149,17)" fg:x="2254" fg:w="1"/><text x="82.8746%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (1 samples, 0.04%)</title><rect x="82.6246%" y="229" width="0.0367%" height="15" fill="rgb(244,29,21)" fg:x="2254" fg:w="1"/><text x="82.8746%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (1 samples, 0.04%)</title><rect x="82.6246%" y="213" width="0.0367%" height="15" fill="rgb(220,130,37)" fg:x="2254" fg:w="1"/><text x="82.8746%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.04%)</title><rect x="82.6246%" y="197" width="0.0367%" height="15" fill="rgb(211,67,2)" fg:x="2254" fg:w="1"/><text x="82.8746%" y="207.50"></text></g><g><title>xadrez::board::Position::pieces::{{closure}} (1 samples, 0.04%)</title><rect x="82.6246%" y="181" width="0.0367%" height="15" fill="rgb(235,68,52)" fg:x="2254" fg:w="1"/><text x="82.8746%" y="191.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="82.6613%" y="261" width="0.0367%" height="15" fill="rgb(246,142,3)" fg:x="2255" fg:w="1"/><text x="82.9113%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.11%)</title><rect x="82.6979%" y="261" width="0.1100%" height="15" fill="rgb(241,25,7)" fg:x="2256" fg:w="3"/><text x="82.9479%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.11%)</title><rect x="82.6979%" y="245" width="0.1100%" height="15" fill="rgb(242,119,39)" fg:x="2256" fg:w="3"/><text x="82.9479%" y="255.50"></text></g><g><title>[libc.so.6] (10 samples, 0.37%)</title><rect x="82.8079%" y="101" width="0.3666%" height="15" fill="rgb(241,98,45)" fg:x="2259" fg:w="10"/><text x="83.0579%" y="111.50"></text></g><g><title>[libc.so.6] (12 samples, 0.44%)</title><rect x="82.8079%" y="117" width="0.4399%" height="15" fill="rgb(254,28,30)" fg:x="2259" fg:w="12"/><text x="83.0579%" y="127.50"></text></g><g><title>realloc (17 samples, 0.62%)</title><rect x="82.8079%" y="133" width="0.6232%" height="15" fill="rgb(241,142,54)" fg:x="2259" fg:w="17"/><text x="83.0579%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (18 samples, 0.66%)</title><rect x="82.8079%" y="181" width="0.6598%" height="15" fill="rgb(222,85,15)" fg:x="2259" fg:w="18"/><text x="83.0579%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (18 samples, 0.66%)</title><rect x="82.8079%" y="165" width="0.6598%" height="15" fill="rgb(210,85,47)" fg:x="2259" fg:w="18"/><text x="83.0579%" y="175.50"></text></g><g><title>alloc::alloc::realloc (18 samples, 0.66%)</title><rect x="82.8079%" y="149" width="0.6598%" height="15" fill="rgb(224,206,25)" fg:x="2259" fg:w="18"/><text x="83.0579%" y="159.50"></text></g><g><title>__rust_realloc (1 samples, 0.04%)</title><rect x="83.4311%" y="133" width="0.0367%" height="15" fill="rgb(243,201,19)" fg:x="2276" fg:w="1"/><text x="83.6811%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 0.70%)</title><rect x="82.8079%" y="197" width="0.6965%" height="15" fill="rgb(236,59,4)" fg:x="2259" fg:w="19"/><text x="83.0579%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (20 samples, 0.73%)</title><rect x="82.8079%" y="261" width="0.7331%" height="15" fill="rgb(254,179,45)" fg:x="2259" fg:w="20"/><text x="83.0579%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (20 samples, 0.73%)</title><rect x="82.8079%" y="245" width="0.7331%" height="15" fill="rgb(226,14,10)" fg:x="2259" fg:w="20"/><text x="83.0579%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (20 samples, 0.73%)</title><rect x="82.8079%" y="229" width="0.7331%" height="15" fill="rgb(244,27,41)" fg:x="2259" fg:w="20"/><text x="83.0579%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (20 samples, 0.73%)</title><rect x="82.8079%" y="213" width="0.7331%" height="15" fill="rgb(235,35,32)" fg:x="2259" fg:w="20"/><text x="83.0579%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="83.5044%" y="197" width="0.0367%" height="15" fill="rgb(218,68,31)" fg:x="2278" fg:w="1"/><text x="83.7544%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.04%)</title><rect x="83.5411%" y="261" width="0.0367%" height="15" fill="rgb(207,120,37)" fg:x="2279" fg:w="1"/><text x="83.7911%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="83.5411%" y="245" width="0.0367%" height="15" fill="rgb(227,98,0)" fg:x="2279" fg:w="1"/><text x="83.7911%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="83.5777%" y="197" width="0.0367%" height="15" fill="rgb(207,7,3)" fg:x="2280" fg:w="1"/><text x="83.8277%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (11 samples, 0.40%)</title><rect x="83.6144%" y="133" width="0.4032%" height="15" fill="rgb(206,98,19)" fg:x="2281" fg:w="11"/><text x="83.8644%" y="143.50"></text></g><g><title>&lt;xadrez::board::Square as core::convert::TryFrom&lt;usize&gt;&gt;::try_from (2 samples, 0.07%)</title><rect x="84.0176%" y="133" width="0.0733%" height="15" fill="rgb(217,5,26)" fg:x="2292" fg:w="2"/><text x="84.2676%" y="143.50"></text></g><g><title>num_traits::cast::FromPrimitive::from_usize (2 samples, 0.07%)</title><rect x="84.0176%" y="117" width="0.0733%" height="15" fill="rgb(235,190,38)" fg:x="2292" fg:w="2"/><text x="84.2676%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2 samples, 0.07%)</title><rect x="84.0176%" y="101" width="0.0733%" height="15" fill="rgb(247,86,24)" fg:x="2292" fg:w="2"/><text x="84.2676%" y="111.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.07%)</title><rect x="84.0176%" y="85" width="0.0733%" height="15" fill="rgb(205,101,16)" fg:x="2292" fg:w="2"/><text x="84.2676%" y="95.50"></text></g><g><title>xadrez::board::_IMPL_NUM_FromPrimitive_FOR_Square::&lt;impl num_traits::cast::FromPrimitive for xadrez::board::Square&gt;::from_u64 (2 samples, 0.07%)</title><rect x="84.0176%" y="69" width="0.0733%" height="15" fill="rgb(246,168,33)" fg:x="2292" fg:w="2"/><text x="84.2676%" y="79.50"></text></g><g><title>xadrez::board::_IMPL_NUM_FromPrimitive_FOR_Square::&lt;impl num_traits::cast::FromPrimitive for xadrez::board::Square&gt;::from_i64 (2 samples, 0.07%)</title><rect x="84.0176%" y="53" width="0.0733%" height="15" fill="rgb(231,114,1)" fg:x="2292" fg:w="2"/><text x="84.2676%" y="63.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="84.0909%" y="133" width="0.0367%" height="15" fill="rgb(207,184,53)" fg:x="2294" fg:w="1"/><text x="84.3409%" y="143.50"></text></g><g><title>xadrez::board::Position::pieces::{{closure}} (23 samples, 0.84%)</title><rect x="83.6144%" y="149" width="0.8431%" height="15" fill="rgb(224,95,51)" fg:x="2281" fg:w="23"/><text x="83.8644%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (26 samples, 0.95%)</title><rect x="83.6144%" y="181" width="0.9531%" height="15" fill="rgb(212,188,45)" fg:x="2281" fg:w="26"/><text x="83.8644%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (26 samples, 0.95%)</title><rect x="83.6144%" y="165" width="0.9531%" height="15" fill="rgb(223,154,38)" fg:x="2281" fg:w="26"/><text x="83.8644%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (32 samples, 1.17%)</title><rect x="83.6144%" y="197" width="1.1730%" height="15" fill="rgb(251,22,52)" fg:x="2281" fg:w="32"/><text x="83.8644%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 1.69%)</title><rect x="83.5777%" y="261" width="1.6862%" height="15" fill="rgb(229,209,22)" fg:x="2280" fg:w="46"/><text x="83.8277%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (46 samples, 1.69%)</title><rect x="83.5777%" y="245" width="1.6862%" height="15" fill="rgb(234,138,34)" fg:x="2280" fg:w="46"/><text x="83.8277%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (46 samples, 1.69%)</title><rect x="83.5777%" y="229" width="1.6862%" height="15" fill="rgb(212,95,11)" fg:x="2280" fg:w="46"/><text x="83.8277%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (46 samples, 1.69%)</title><rect x="83.5777%" y="213" width="1.6862%" height="15" fill="rgb(240,179,47)" fg:x="2280" fg:w="46"/><text x="83.8277%" y="223.50"></text></g><g><title>xadrez::board::Position::pieces (88 samples, 3.23%)</title><rect x="82.5147%" y="373" width="3.2258%" height="15" fill="rgb(240,163,11)" fg:x="2251" fg:w="88"/><text x="82.7647%" y="383.50">xad..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (88 samples, 3.23%)</title><rect x="82.5147%" y="357" width="3.2258%" height="15" fill="rgb(236,37,12)" fg:x="2251" fg:w="88"/><text x="82.7647%" y="367.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (88 samples, 3.23%)</title><rect x="82.5147%" y="341" width="3.2258%" height="15" fill="rgb(232,164,16)" fg:x="2251" fg:w="88"/><text x="82.7647%" y="351.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (88 samples, 3.23%)</title><rect x="82.5147%" y="325" width="3.2258%" height="15" fill="rgb(244,205,15)" fg:x="2251" fg:w="88"/><text x="82.7647%" y="335.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (88 samples, 3.23%)</title><rect x="82.5147%" y="309" width="3.2258%" height="15" fill="rgb(223,117,47)" fg:x="2251" fg:w="88"/><text x="82.7647%" y="319.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (84 samples, 3.08%)</title><rect x="82.6613%" y="293" width="3.0792%" height="15" fill="rgb(244,107,35)" fg:x="2255" fg:w="84"/><text x="82.9113%" y="303.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (84 samples, 3.08%)</title><rect x="82.6613%" y="277" width="3.0792%" height="15" fill="rgb(205,140,8)" fg:x="2255" fg:w="84"/><text x="82.9113%" y="287.50">all..</text></g><g><title>xadrez::bitboards::Bitboard::on (7 samples, 0.26%)</title><rect x="85.7405%" y="373" width="0.2566%" height="15" fill="rgb(228,84,46)" fg:x="2339" fg:w="7"/><text x="85.9905%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(xadrez::piece::Piece,xadrez::board::Square)&gt;&gt; (3 samples, 0.11%)</title><rect x="85.9971%" y="373" width="0.1100%" height="15" fill="rgb(254,188,9)" fg:x="2346" fg:w="3"/><text x="86.2471%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="85.9971%" y="357" width="0.1100%" height="15" fill="rgb(206,112,54)" fg:x="2346" fg:w="3"/><text x="86.2471%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(xadrez::piece::Piece,xadrez::board::Square),alloc::alloc::Global&gt;&gt; (3 samples, 0.11%)</title><rect x="85.9971%" y="341" width="0.1100%" height="15" fill="rgb(216,84,49)" fg:x="2346" fg:w="3"/><text x="86.2471%" y="351.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="85.9971%" y="325" width="0.1100%" height="15" fill="rgb(214,194,35)" fg:x="2346" fg:w="3"/><text x="86.2471%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(xadrez::piece::Piece,xadrez::board::Square)&gt;&gt; (3 samples, 0.11%)</title><rect x="85.9971%" y="309" width="0.1100%" height="15" fill="rgb(249,28,3)" fg:x="2346" fg:w="3"/><text x="86.2471%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="85.9971%" y="293" width="0.1100%" height="15" fill="rgb(222,56,52)" fg:x="2346" fg:w="3"/><text x="86.2471%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.11%)</title><rect x="85.9971%" y="277" width="0.1100%" height="15" fill="rgb(245,217,50)" fg:x="2346" fg:w="3"/><text x="86.2471%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.11%)</title><rect x="85.9971%" y="261" width="0.1100%" height="15" fill="rgb(213,201,24)" fg:x="2346" fg:w="3"/><text x="86.2471%" y="271.50"></text></g><g><title>cfree (3 samples, 0.11%)</title><rect x="85.9971%" y="245" width="0.1100%" height="15" fill="rgb(248,116,28)" fg:x="2346" fg:w="3"/><text x="86.2471%" y="255.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="85.9971%" y="229" width="0.1100%" height="15" fill="rgb(219,72,43)" fg:x="2346" fg:w="3"/><text x="86.2471%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="86.1070%" y="373" width="0.1466%" height="15" fill="rgb(209,138,14)" fg:x="2349" fg:w="4"/><text x="86.3570%" y="383.50"></text></g><g><title>xadrez::movegen::generate_legal_moves (169 samples, 6.20%)</title><rect x="80.4252%" y="405" width="6.1950%" height="15" fill="rgb(222,18,33)" fg:x="2194" fg:w="169"/><text x="80.6752%" y="415.50">xadrez::..</text></g><g><title>xadrez::movegen::PositionBitboards::new (112 samples, 4.11%)</title><rect x="82.5147%" y="389" width="4.1056%" height="15" fill="rgb(213,199,7)" fg:x="2251" fg:w="112"/><text x="82.7647%" y="399.50">xadr..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.07%)</title><rect x="86.6202%" y="389" width="0.0733%" height="15" fill="rgb(250,110,10)" fg:x="2363" fg:w="2"/><text x="86.8702%" y="399.50"></text></g><g><title>core::ptr::write (2 samples, 0.07%)</title><rect x="86.6202%" y="373" width="0.0733%" height="15" fill="rgb(248,123,6)" fg:x="2363" fg:w="2"/><text x="86.8702%" y="383.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="86.6202%" y="357" width="0.0733%" height="15" fill="rgb(206,91,31)" fg:x="2363" fg:w="2"/><text x="86.8702%" y="367.50"></text></g><g><title>xadrez::board::Chessboard::save_current_to_history (3 samples, 0.11%)</title><rect x="86.6202%" y="405" width="0.1100%" height="15" fill="rgb(211,154,13)" fg:x="2363" fg:w="3"/><text x="86.8702%" y="415.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="86.7302%" y="309" width="0.0733%" height="15" fill="rgb(225,148,7)" fg:x="2366" fg:w="2"/><text x="86.9802%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;xadrez::move::Move&gt;&gt; (3 samples, 0.11%)</title><rect x="86.7302%" y="405" width="0.1100%" height="15" fill="rgb(220,160,43)" fg:x="2366" fg:w="3"/><text x="86.9802%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;xadrez::move::Move&gt;&gt; (3 samples, 0.11%)</title><rect x="86.7302%" y="389" width="0.1100%" height="15" fill="rgb(213,52,39)" fg:x="2366" fg:w="3"/><text x="86.9802%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="86.7302%" y="373" width="0.1100%" height="15" fill="rgb(243,137,7)" fg:x="2366" fg:w="3"/><text x="86.9802%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.11%)</title><rect x="86.7302%" y="357" width="0.1100%" height="15" fill="rgb(230,79,13)" fg:x="2366" fg:w="3"/><text x="86.9802%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.11%)</title><rect x="86.7302%" y="341" width="0.1100%" height="15" fill="rgb(247,105,23)" fg:x="2366" fg:w="3"/><text x="86.9802%" y="351.50"></text></g><g><title>cfree (3 samples, 0.11%)</title><rect x="86.7302%" y="325" width="0.1100%" height="15" fill="rgb(223,179,41)" fg:x="2366" fg:w="3"/><text x="86.9802%" y="335.50"></text></g><g><title>&lt;xadrez::move::MoveKind as core::cmp::PartialEq&gt;::eq (2 samples, 0.07%)</title><rect x="86.8402%" y="325" width="0.0733%" height="15" fill="rgb(218,9,34)" fg:x="2369" fg:w="2"/><text x="87.0902%" y="335.50"></text></g><g><title>&lt;xadrez::move::Move as core::cmp::PartialEq&lt;xadrez::move::MoveKind&gt;&gt;::eq (4 samples, 0.15%)</title><rect x="86.8402%" y="341" width="0.1466%" height="15" fill="rgb(222,106,8)" fg:x="2369" fg:w="4"/><text x="87.0902%" y="351.50"></text></g><g><title>xadrez::board::Chessboard::make_move::{{closure}} (5 samples, 0.18%)</title><rect x="86.8402%" y="389" width="0.1833%" height="15" fill="rgb(211,220,0)" fg:x="2369" fg:w="5"/><text x="87.0902%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (5 samples, 0.18%)</title><rect x="86.8402%" y="373" width="0.1833%" height="15" fill="rgb(229,52,16)" fg:x="2369" fg:w="5"/><text x="87.0902%" y="383.50"></text></g><g><title>&lt;xadrez::move::Move as core::cmp::PartialEq&gt;::eq (5 samples, 0.18%)</title><rect x="86.8402%" y="357" width="0.1833%" height="15" fill="rgb(212,155,18)" fg:x="2369" fg:w="5"/><text x="87.0902%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (6 samples, 0.22%)</title><rect x="86.8402%" y="405" width="0.2199%" height="15" fill="rgb(242,21,14)" fg:x="2369" fg:w="6"/><text x="87.0902%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="87.0235%" y="389" width="0.0367%" height="15" fill="rgb(222,19,48)" fg:x="2374" fg:w="1"/><text x="87.2735%" y="399.50"></text></g><g><title>xadrez::board::Chessboard::perft (2,374 samples, 87.02%)</title><rect x="0.1100%" y="437" width="87.0235%" height="15" fill="rgb(232,45,27)" fg:x="3" fg:w="2374"/><text x="0.3600%" y="447.50">xadrez::board::Chessboard::perft</text></g><g><title>xadrez::board::Chessboard::make_move (183 samples, 6.71%)</title><rect x="80.4252%" y="421" width="6.7082%" height="15" fill="rgb(249,103,42)" fg:x="2194" fg:w="183"/><text x="80.6752%" y="431.50">xadrez::b..</text></g><g><title>xadrez::movegen::generate_pawn_moves (2 samples, 0.07%)</title><rect x="87.1334%" y="405" width="0.0733%" height="15" fill="rgb(246,81,33)" fg:x="2377" fg:w="2"/><text x="87.3834%" y="415.50"></text></g><g><title>xadrez::board::Chessboard::perft (2,377 samples, 87.13%)</title><rect x="0.1100%" y="453" width="87.1334%" height="15" fill="rgb(252,33,42)" fg:x="3" fg:w="2377"/><text x="0.3600%" y="463.50">xadrez::board::Chessboard::perft</text></g><g><title>xadrez::board::Chessboard::make_move (3 samples, 0.11%)</title><rect x="87.1334%" y="437" width="0.1100%" height="15" fill="rgb(209,212,41)" fg:x="2377" fg:w="3"/><text x="87.3834%" y="447.50"></text></g><g><title>xadrez::movegen::generate_legal_moves (3 samples, 0.11%)</title><rect x="87.1334%" y="421" width="0.1100%" height="15" fill="rgb(207,154,6)" fg:x="2377" fg:w="3"/><text x="87.3834%" y="431.50"></text></g><g><title>xadrez::movegen::PositionBitboards::new (1 samples, 0.04%)</title><rect x="87.2067%" y="405" width="0.0367%" height="15" fill="rgb(223,64,47)" fg:x="2379" fg:w="1"/><text x="87.4567%" y="415.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (2,378 samples, 87.17%)</title><rect x="0.1100%" y="773" width="87.1701%" height="15" fill="rgb(211,161,38)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="783.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (2,378 samples, 87.17%)</title><rect x="0.1100%" y="757" width="87.1701%" height="15" fill="rgb(219,138,40)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="767.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench</text></g><g><title>criterion::routine::Routine::test (2,378 samples, 87.17%)</title><rect x="0.1100%" y="741" width="87.1701%" height="15" fill="rgb(241,228,46)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="751.50">criterion::routine::Routine::test</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (2,378 samples, 87.17%)</title><rect x="0.1100%" y="725" width="87.1701%" height="15" fill="rgb(223,209,38)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="735.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,378 samples, 87.17%)</title><rect x="0.1100%" y="709" width="87.1701%" height="15" fill="rgb(236,164,45)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="719.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,378 samples, 87.17%)</title><rect x="0.1100%" y="693" width="87.1701%" height="15" fill="rgb(231,15,5)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,378 samples, 87.17%)</title><rect x="0.1100%" y="677" width="87.1701%" height="15" fill="rgb(252,35,15)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="687.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,378 samples, 87.17%)</title><rect x="0.1100%" y="661" width="87.1701%" height="15" fill="rgb(248,181,18)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="671.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,378 samples, 87.17%)</title><rect x="0.1100%" y="645" width="87.1701%" height="15" fill="rgb(233,39,42)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="655.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,378 samples, 87.17%)</title><rect x="0.1100%" y="629" width="87.1701%" height="15" fill="rgb(238,110,33)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="639.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,378 samples, 87.17%)</title><rect x="0.1100%" y="613" width="87.1701%" height="15" fill="rgb(233,195,10)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="623.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,378 samples, 87.17%)</title><rect x="0.1100%" y="597" width="87.1701%" height="15" fill="rgb(254,105,3)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="607.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2,378 samples, 87.17%)</title><rect x="0.1100%" y="581" width="87.1701%" height="15" fill="rgb(221,225,9)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="591.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (2,378 samples, 87.17%)</title><rect x="0.1100%" y="565" width="87.1701%" height="15" fill="rgb(224,227,45)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="575.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}}</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (2,378 samples, 87.17%)</title><rect x="0.1100%" y="549" width="87.1701%" height="15" fill="rgb(229,198,43)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="559.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}}</text></g><g><title>perft::perft_benchmark::{{closure}} (2,378 samples, 87.17%)</title><rect x="0.1100%" y="533" width="87.1701%" height="15" fill="rgb(206,209,35)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="543.50">perft::perft_benchmark::{{closure}}</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (2,378 samples, 87.17%)</title><rect x="0.1100%" y="517" width="87.1701%" height="15" fill="rgb(245,195,53)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="527.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>perft::perft_benchmark::{{closure}}::{{closure}} (2,378 samples, 87.17%)</title><rect x="0.1100%" y="501" width="87.1701%" height="15" fill="rgb(240,92,26)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="511.50">perft::perft_benchmark::{{closure}}::{{closure}}</text></g><g><title>xadrez::board::Chessboard::perft (2,378 samples, 87.17%)</title><rect x="0.1100%" y="485" width="87.1701%" height="15" fill="rgb(207,40,23)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="495.50">xadrez::board::Chessboard::perft</text></g><g><title>xadrez::board::Chessboard::perft (2,378 samples, 87.17%)</title><rect x="0.1100%" y="469" width="87.1701%" height="15" fill="rgb(223,111,35)" fg:x="3" fg:w="2378"/><text x="0.3600%" y="479.50">xadrez::board::Chessboard::perft</text></g><g><title>xadrez::board::Chessboard::make_move (1 samples, 0.04%)</title><rect x="87.2434%" y="453" width="0.0367%" height="15" fill="rgb(229,147,28)" fg:x="2380" fg:w="1"/><text x="87.4934%" y="463.50"></text></g><g><title>xadrez::movegen::generate_legal_moves (1 samples, 0.04%)</title><rect x="87.2434%" y="437" width="0.0367%" height="15" fill="rgb(211,29,28)" fg:x="2380" fg:w="1"/><text x="87.4934%" y="447.50"></text></g><g><title>xadrez::movegen::generate_pawn_moves (1 samples, 0.04%)</title><rect x="87.2434%" y="421" width="0.0367%" height="15" fill="rgb(228,72,33)" fg:x="2380" fg:w="1"/><text x="87.4934%" y="431.50"></text></g><g><title>xadrez::movegen::generate_pawn_moves (1 samples, 0.04%)</title><rect x="87.2801%" y="389" width="0.0367%" height="15" fill="rgb(205,214,31)" fg:x="2381" fg:w="1"/><text x="87.5301%" y="399.50"></text></g><g><title>xadrez::board::Position::pieces (1 samples, 0.04%)</title><rect x="87.3167%" y="373" width="0.0367%" height="15" fill="rgb(224,111,15)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.04%)</title><rect x="87.3167%" y="357" width="0.0367%" height="15" fill="rgb(253,21,26)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="87.3167%" y="341" width="0.0367%" height="15" fill="rgb(245,139,43)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="87.3167%" y="325" width="0.0367%" height="15" fill="rgb(252,170,7)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="87.3167%" y="309" width="0.0367%" height="15" fill="rgb(231,118,14)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="87.3167%" y="293" width="0.0367%" height="15" fill="rgb(238,83,0)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.04%)</title><rect x="87.3167%" y="277" width="0.0367%" height="15" fill="rgb(221,39,39)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="87.3167%" y="261" width="0.0367%" height="15" fill="rgb(222,119,46)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="87.3167%" y="245" width="0.0367%" height="15" fill="rgb(222,165,49)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.04%)</title><rect x="87.3167%" y="229" width="0.0367%" height="15" fill="rgb(219,113,52)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="87.3167%" y="213" width="0.0367%" height="15" fill="rgb(214,7,15)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="87.3167%" y="197" width="0.0367%" height="15" fill="rgb(235,32,4)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.04%)</title><rect x="87.3167%" y="181" width="0.0367%" height="15" fill="rgb(238,90,54)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.04%)</title><rect x="87.3167%" y="165" width="0.0367%" height="15" fill="rgb(213,208,19)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="175.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="87.3167%" y="149" width="0.0367%" height="15" fill="rgb(233,156,4)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="159.50"></text></g><g><title>realloc (1 samples, 0.04%)</title><rect x="87.3167%" y="133" width="0.0367%" height="15" fill="rgb(207,194,5)" fg:x="2382" fg:w="1"/><text x="87.5667%" y="143.50"></text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (3 samples, 0.11%)</title><rect x="87.2801%" y="773" width="0.1100%" height="15" fill="rgb(206,111,30)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="783.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (3 samples, 0.11%)</title><rect x="87.2801%" y="757" width="0.1100%" height="15" fill="rgb(243,70,54)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="767.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (3 samples, 0.11%)</title><rect x="87.2801%" y="741" width="0.1100%" height="15" fill="rgb(242,28,8)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="751.50"></text></g><g><title>criterion::routine::Routine::test (3 samples, 0.11%)</title><rect x="87.2801%" y="725" width="0.1100%" height="15" fill="rgb(219,106,18)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="735.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (3 samples, 0.11%)</title><rect x="87.2801%" y="709" width="0.1100%" height="15" fill="rgb(244,222,10)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.11%)</title><rect x="87.2801%" y="693" width="0.1100%" height="15" fill="rgb(236,179,52)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.11%)</title><rect x="87.2801%" y="677" width="0.1100%" height="15" fill="rgb(213,23,39)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.11%)</title><rect x="87.2801%" y="661" width="0.1100%" height="15" fill="rgb(238,48,10)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.11%)</title><rect x="87.2801%" y="645" width="0.1100%" height="15" fill="rgb(251,196,23)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.11%)</title><rect x="87.2801%" y="629" width="0.1100%" height="15" fill="rgb(250,152,24)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.11%)</title><rect x="87.2801%" y="613" width="0.1100%" height="15" fill="rgb(209,150,17)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.11%)</title><rect x="87.2801%" y="597" width="0.1100%" height="15" fill="rgb(234,202,34)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.11%)</title><rect x="87.2801%" y="581" width="0.1100%" height="15" fill="rgb(253,148,53)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="591.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3 samples, 0.11%)</title><rect x="87.2801%" y="565" width="0.1100%" height="15" fill="rgb(218,129,16)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="575.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (3 samples, 0.11%)</title><rect x="87.2801%" y="549" width="0.1100%" height="15" fill="rgb(216,85,19)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="559.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (3 samples, 0.11%)</title><rect x="87.2801%" y="533" width="0.1100%" height="15" fill="rgb(235,228,7)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="543.50"></text></g><g><title>perft::perft_benchmark::{{closure}} (3 samples, 0.11%)</title><rect x="87.2801%" y="517" width="0.1100%" height="15" fill="rgb(245,175,0)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="527.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (3 samples, 0.11%)</title><rect x="87.2801%" y="501" width="0.1100%" height="15" fill="rgb(208,168,36)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="511.50"></text></g><g><title>perft::perft_benchmark::{{closure}}::{{closure}} (3 samples, 0.11%)</title><rect x="87.2801%" y="485" width="0.1100%" height="15" fill="rgb(246,171,24)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="495.50"></text></g><g><title>xadrez::board::Chessboard::perft (3 samples, 0.11%)</title><rect x="87.2801%" y="469" width="0.1100%" height="15" fill="rgb(215,142,24)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="479.50"></text></g><g><title>xadrez::board::Chessboard::perft (3 samples, 0.11%)</title><rect x="87.2801%" y="453" width="0.1100%" height="15" fill="rgb(250,187,7)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="463.50"></text></g><g><title>xadrez::board::Chessboard::perft (3 samples, 0.11%)</title><rect x="87.2801%" y="437" width="0.1100%" height="15" fill="rgb(228,66,33)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="447.50"></text></g><g><title>xadrez::board::Chessboard::make_move (3 samples, 0.11%)</title><rect x="87.2801%" y="421" width="0.1100%" height="15" fill="rgb(234,215,21)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="431.50"></text></g><g><title>xadrez::movegen::generate_legal_moves (3 samples, 0.11%)</title><rect x="87.2801%" y="405" width="0.1100%" height="15" fill="rgb(222,191,20)" fg:x="2381" fg:w="3"/><text x="87.5301%" y="415.50"></text></g><g><title>xadrez::movegen::PositionBitboards::new (2 samples, 0.07%)</title><rect x="87.3167%" y="389" width="0.0733%" height="15" fill="rgb(245,79,54)" fg:x="2382" fg:w="2"/><text x="87.5667%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(xadrez::piece::Piece,xadrez::board::Square)&gt;&gt; (1 samples, 0.04%)</title><rect x="87.3534%" y="373" width="0.0367%" height="15" fill="rgb(240,10,37)" fg:x="2383" fg:w="1"/><text x="87.6034%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="87.3534%" y="357" width="0.0367%" height="15" fill="rgb(214,192,32)" fg:x="2383" fg:w="1"/><text x="87.6034%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(xadrez::piece::Piece,xadrez::board::Square),alloc::alloc::Global&gt;&gt; (1 samples, 0.04%)</title><rect x="87.3534%" y="341" width="0.0367%" height="15" fill="rgb(209,36,54)" fg:x="2383" fg:w="1"/><text x="87.6034%" y="351.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="87.3534%" y="325" width="0.0367%" height="15" fill="rgb(220,10,11)" fg:x="2383" fg:w="1"/><text x="87.6034%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(xadrez::piece::Piece,xadrez::board::Square)&gt;&gt; (1 samples, 0.04%)</title><rect x="87.3534%" y="309" width="0.0367%" height="15" fill="rgb(221,106,17)" fg:x="2383" fg:w="1"/><text x="87.6034%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="87.3534%" y="293" width="0.0367%" height="15" fill="rgb(251,142,44)" fg:x="2383" fg:w="1"/><text x="87.6034%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="87.3534%" y="277" width="0.0367%" height="15" fill="rgb(238,13,15)" fg:x="2383" fg:w="1"/><text x="87.6034%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="87.3534%" y="261" width="0.0367%" height="15" fill="rgb(208,107,27)" fg:x="2383" fg:w="1"/><text x="87.6034%" y="271.50"></text></g><g><title>cfree (1 samples, 0.04%)</title><rect x="87.3534%" y="245" width="0.0367%" height="15" fill="rgb(205,136,37)" fg:x="2383" fg:w="1"/><text x="87.6034%" y="255.50"></text></g><g><title>&lt;xadrez::movegen::ROOK_MOVES as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="87.3900%" y="693" width="0.0367%" height="15" fill="rgb(250,205,27)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="703.50"></text></g><g><title>&lt;xadrez::movegen::ROOK_MOVES as core::ops::deref::Deref&gt;::deref::__stability (1 samples, 0.04%)</title><rect x="87.3900%" y="677" width="0.0367%" height="15" fill="rgb(210,80,43)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="687.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="87.3900%" y="661" width="0.0367%" height="15" fill="rgb(247,160,36)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="671.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.04%)</title><rect x="87.3900%" y="645" width="0.0367%" height="15" fill="rgb(234,13,49)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="655.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 0.04%)</title><rect x="87.3900%" y="629" width="0.0367%" height="15" fill="rgb(234,122,0)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="639.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.04%)</title><rect x="87.3900%" y="613" width="0.0367%" height="15" fill="rgb(207,146,38)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="623.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (1 samples, 0.04%)</title><rect x="87.3900%" y="597" width="0.0367%" height="15" fill="rgb(207,177,25)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="607.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.04%)</title><rect x="87.3900%" y="581" width="0.0367%" height="15" fill="rgb(211,178,42)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="591.50"></text></g><g><title>&lt;xadrez::movegen::ROOK_MOVES as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (1 samples, 0.04%)</title><rect x="87.3900%" y="565" width="0.0367%" height="15" fill="rgb(230,69,54)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="575.50"></text></g><g><title>xadrez::movegen::MagicTable&lt;_&gt;::new (1 samples, 0.04%)</title><rect x="87.3900%" y="549" width="0.0367%" height="15" fill="rgb(214,135,41)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="559.50"></text></g><g><title>xadrez::movegen::seek_sliding (1 samples, 0.04%)</title><rect x="87.3900%" y="533" width="0.0367%" height="15" fill="rgb(237,67,25)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="543.50"></text></g><g><title>xadrez::board::Square::neighbour (1 samples, 0.04%)</title><rect x="87.3900%" y="517" width="0.0367%" height="15" fill="rgb(222,189,50)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="527.50"></text></g><g><title>xadrez::board::Square::distance (1 samples, 0.04%)</title><rect x="87.3900%" y="501" width="0.0367%" height="15" fill="rgb(245,148,34)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="511.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (1 samples, 0.04%)</title><rect x="87.3900%" y="485" width="0.0367%" height="15" fill="rgb(222,29,6)" fg:x="2384" fg:w="1"/><text x="87.6400%" y="495.50"></text></g><g><title>_start (2,383 samples, 87.35%)</title><rect x="0.1100%" y="1077" width="87.3534%" height="15" fill="rgb(221,189,43)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="1087.50">_start</text></g><g><title>__libc_start_main (2,383 samples, 87.35%)</title><rect x="0.1100%" y="1061" width="87.3534%" height="15" fill="rgb(207,36,27)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="1071.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,383 samples, 87.35%)</title><rect x="0.1100%" y="1045" width="87.3534%" height="15" fill="rgb(217,90,24)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="1055.50">[libc.so.6]</text></g><g><title>main (2,383 samples, 87.35%)</title><rect x="0.1100%" y="1029" width="87.3534%" height="15" fill="rgb(224,66,35)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (2,383 samples, 87.35%)</title><rect x="0.1100%" y="1013" width="87.3534%" height="15" fill="rgb(221,13,50)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,383 samples, 87.35%)</title><rect x="0.1100%" y="997" width="87.3534%" height="15" fill="rgb(236,68,49)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,383 samples, 87.35%)</title><rect x="0.1100%" y="981" width="87.3534%" height="15" fill="rgb(229,146,28)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,383 samples, 87.35%)</title><rect x="0.1100%" y="965" width="87.3534%" height="15" fill="rgb(225,31,38)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,383 samples, 87.35%)</title><rect x="0.1100%" y="949" width="87.3534%" height="15" fill="rgb(250,208,3)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (2,383 samples, 87.35%)</title><rect x="0.1100%" y="933" width="87.3534%" height="15" fill="rgb(246,54,23)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,383 samples, 87.35%)</title><rect x="0.1100%" y="917" width="87.3534%" height="15" fill="rgb(243,76,11)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,383 samples, 87.35%)</title><rect x="0.1100%" y="901" width="87.3534%" height="15" fill="rgb(245,21,50)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,383 samples, 87.35%)</title><rect x="0.1100%" y="885" width="87.3534%" height="15" fill="rgb(228,9,43)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (2,383 samples, 87.35%)</title><rect x="0.1100%" y="869" width="87.3534%" height="15" fill="rgb(208,100,47)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,383 samples, 87.35%)</title><rect x="0.1100%" y="853" width="87.3534%" height="15" fill="rgb(232,26,8)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,383 samples, 87.35%)</title><rect x="0.1100%" y="837" width="87.3534%" height="15" fill="rgb(216,166,38)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="847.50">core::ops::function::FnOnce::call_once</text></g><g><title>perft::main (2,383 samples, 87.35%)</title><rect x="0.1100%" y="821" width="87.3534%" height="15" fill="rgb(251,202,51)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="831.50">perft::main</text></g><g><title>perft::benches (2,383 samples, 87.35%)</title><rect x="0.1100%" y="805" width="87.3534%" height="15" fill="rgb(254,216,34)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="815.50">perft::benches</text></g><g><title>perft::perft_benchmark (2,383 samples, 87.35%)</title><rect x="0.1100%" y="789" width="87.3534%" height="15" fill="rgb(251,32,27)" fg:x="3" fg:w="2383"/><text x="0.3600%" y="799.50">perft::perft_benchmark</text></g><g><title>&lt;xadrez::board::Chessboard as core::default::Default&gt;::default (2 samples, 0.07%)</title><rect x="87.3900%" y="773" width="0.0733%" height="15" fill="rgb(208,127,28)" fg:x="2384" fg:w="2"/><text x="87.6400%" y="783.50"></text></g><g><title>xadrez::board::Chessboard::from_fen (2 samples, 0.07%)</title><rect x="87.3900%" y="757" width="0.0733%" height="15" fill="rgb(224,137,22)" fg:x="2384" fg:w="2"/><text x="87.6400%" y="767.50"></text></g><g><title>xadrez::movegen::generate_legal_moves (2 samples, 0.07%)</title><rect x="87.3900%" y="741" width="0.0733%" height="15" fill="rgb(254,70,32)" fg:x="2384" fg:w="2"/><text x="87.6400%" y="751.50"></text></g><g><title>xadrez::movegen::generate_moves (2 samples, 0.07%)</title><rect x="87.3900%" y="725" width="0.0733%" height="15" fill="rgb(229,75,37)" fg:x="2384" fg:w="2"/><text x="87.6400%" y="735.50"></text></g><g><title>xadrez::movegen::get_move_bitboard (2 samples, 0.07%)</title><rect x="87.3900%" y="709" width="0.0733%" height="15" fill="rgb(252,64,23)" fg:x="2384" fg:w="2"/><text x="87.6400%" y="719.50"></text></g><g><title>&lt;xadrez::movegen::BISHOP_MOVES as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="87.4267%" y="693" width="0.0367%" height="15" fill="rgb(232,162,48)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="703.50"></text></g><g><title>&lt;xadrez::movegen::BISHOP_MOVES as core::ops::deref::Deref&gt;::deref::__stability (1 samples, 0.04%)</title><rect x="87.4267%" y="677" width="0.0367%" height="15" fill="rgb(246,160,12)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="687.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="87.4267%" y="661" width="0.0367%" height="15" fill="rgb(247,166,0)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="671.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.04%)</title><rect x="87.4267%" y="645" width="0.0367%" height="15" fill="rgb(249,219,21)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="655.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 0.04%)</title><rect x="87.4267%" y="629" width="0.0367%" height="15" fill="rgb(205,209,3)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="639.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.04%)</title><rect x="87.4267%" y="613" width="0.0367%" height="15" fill="rgb(243,44,1)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="623.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (1 samples, 0.04%)</title><rect x="87.4267%" y="597" width="0.0367%" height="15" fill="rgb(206,159,16)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="607.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.04%)</title><rect x="87.4267%" y="581" width="0.0367%" height="15" fill="rgb(244,77,30)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="591.50"></text></g><g><title>&lt;xadrez::movegen::BISHOP_MOVES as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (1 samples, 0.04%)</title><rect x="87.4267%" y="565" width="0.0367%" height="15" fill="rgb(218,69,12)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="575.50"></text></g><g><title>xadrez::movegen::MagicTable&lt;_&gt;::new (1 samples, 0.04%)</title><rect x="87.4267%" y="549" width="0.0367%" height="15" fill="rgb(212,87,7)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="559.50"></text></g><g><title>xadrez::movegen::seek_sliding (1 samples, 0.04%)</title><rect x="87.4267%" y="533" width="0.0367%" height="15" fill="rgb(245,114,25)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="543.50"></text></g><g><title>xadrez::board::Square::neighbour (1 samples, 0.04%)</title><rect x="87.4267%" y="517" width="0.0367%" height="15" fill="rgb(210,61,42)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="527.50"></text></g><g><title>xadrez::board::Square::distance (1 samples, 0.04%)</title><rect x="87.4267%" y="501" width="0.0367%" height="15" fill="rgb(211,52,33)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="511.50"></text></g><g><title>xadrez::board::Square::to_rank_file (1 samples, 0.04%)</title><rect x="87.4267%" y="485" width="0.0367%" height="15" fill="rgb(234,58,33)" fg:x="2385" fg:w="1"/><text x="87.6767%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.07%)</title><rect x="87.4633%" y="1045" width="0.0733%" height="15" fill="rgb(220,115,36)" fg:x="2386" fg:w="2"/><text x="87.7133%" y="1055.50"></text></g><g><title>xadrez::movegen::generate_moves (26 samples, 0.95%)</title><rect x="87.4633%" y="1061" width="0.9531%" height="15" fill="rgb(243,153,54)" fg:x="2386" fg:w="26"/><text x="87.7133%" y="1071.50"></text></g><g><title>xadrez::movegen::generate_pawn_moves (5 samples, 0.18%)</title><rect x="88.4164%" y="1045" width="0.1833%" height="15" fill="rgb(251,47,18)" fg:x="2412" fg:w="5"/><text x="88.6664%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.18%)</title><rect x="88.4164%" y="1029" width="0.1833%" height="15" fill="rgb(242,102,42)" fg:x="2412" fg:w="5"/><text x="88.6664%" y="1039.50"></text></g><g><title>xadrez::movegen::PositionBitboards::new (2 samples, 0.07%)</title><rect x="88.5997%" y="1045" width="0.0733%" height="15" fill="rgb(234,31,38)" fg:x="2417" fg:w="2"/><text x="88.8497%" y="1055.50"></text></g><g><title>xadrez::board::Position::pieces (2 samples, 0.07%)</title><rect x="88.5997%" y="1029" width="0.0733%" height="15" fill="rgb(221,117,51)" fg:x="2417" fg:w="2"/><text x="88.8497%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.07%)</title><rect x="88.5997%" y="1013" width="0.0733%" height="15" fill="rgb(212,20,18)" fg:x="2417" fg:w="2"/><text x="88.8497%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="88.5997%" y="997" width="0.0733%" height="15" fill="rgb(245,133,36)" fg:x="2417" fg:w="2"/><text x="88.8497%" y="1007.50"></text></g><g><title>xadrez::movegen::generate_legal_moves (15 samples, 0.55%)</title><rect x="88.4164%" y="1061" width="0.5499%" height="15" fill="rgb(212,6,19)" fg:x="2412" fg:w="15"/><text x="88.6664%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;xadrez::move::Move&gt;&gt; (1 samples, 0.04%)</title><rect x="88.9663%" y="1029" width="0.0367%" height="15" fill="rgb(218,1,36)" fg:x="2427" fg:w="1"/><text x="89.2163%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;xadrez::move::Move&gt;&gt; (1 samples, 0.04%)</title><rect x="88.9663%" y="1013" width="0.0367%" height="15" fill="rgb(246,84,54)" fg:x="2427" fg:w="1"/><text x="89.2163%" y="1023.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="88.9663%" y="997" width="0.0367%" height="15" fill="rgb(242,110,6)" fg:x="2427" fg:w="1"/><text x="89.2163%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="88.9663%" y="981" width="0.0367%" height="15" fill="rgb(214,47,5)" fg:x="2427" fg:w="1"/><text x="89.2163%" y="991.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="88.9663%" y="965" width="0.0367%" height="15" fill="rgb(218,159,25)" fg:x="2427" fg:w="1"/><text x="89.2163%" y="975.50"></text></g><g><title>xadrez::board::Chessboard::undo (2 samples, 0.07%)</title><rect x="88.9663%" y="1045" width="0.0733%" height="15" fill="rgb(215,211,28)" fg:x="2427" fg:w="2"/><text x="89.2163%" y="1055.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.04%)</title><rect x="89.0396%" y="981" width="0.0367%" height="15" fill="rgb(238,59,32)" fg:x="2429" fg:w="1"/><text x="89.2896%" y="991.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="89.0396%" y="965" width="0.0367%" height="15" fill="rgb(226,82,3)" fg:x="2429" fg:w="1"/><text x="89.2896%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.15%)</title><rect x="89.0396%" y="1045" width="0.1466%" height="15" fill="rgb(240,164,32)" fg:x="2429" fg:w="4"/><text x="89.2896%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.15%)</title><rect x="89.0396%" y="1029" width="0.1466%" height="15" fill="rgb(232,46,7)" fg:x="2429" fg:w="4"/><text x="89.2896%" y="1039.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.15%)</title><rect x="89.0396%" y="1013" width="0.1466%" height="15" fill="rgb(229,129,53)" fg:x="2429" fg:w="4"/><text x="89.2896%" y="1023.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.15%)</title><rect x="89.0396%" y="997" width="0.1466%" height="15" fill="rgb(234,188,29)" fg:x="2429" fg:w="4"/><text x="89.2896%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="89.0762%" y="981" width="0.1100%" height="15" fill="rgb(246,141,4)" fg:x="2430" fg:w="3"/><text x="89.3262%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="89.0762%" y="965" width="0.1100%" height="15" fill="rgb(229,23,39)" fg:x="2430" fg:w="3"/><text x="89.3262%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.11%)</title><rect x="89.0762%" y="949" width="0.1100%" height="15" fill="rgb(206,12,3)" fg:x="2430" fg:w="3"/><text x="89.3262%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.11%)</title><rect x="89.0762%" y="933" width="0.1100%" height="15" fill="rgb(252,226,20)" fg:x="2430" fg:w="3"/><text x="89.3262%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.11%)</title><rect x="89.0762%" y="917" width="0.1100%" height="15" fill="rgb(216,123,35)" fg:x="2430" fg:w="3"/><text x="89.3262%" y="927.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.11%)</title><rect x="89.0762%" y="901" width="0.1100%" height="15" fill="rgb(212,68,40)" fg:x="2430" fg:w="3"/><text x="89.3262%" y="911.50"></text></g><g><title>xadrez::board::Chessboard::perft (15 samples, 0.55%)</title><rect x="88.9663%" y="1061" width="0.5499%" height="15" fill="rgb(254,125,32)" fg:x="2427" fg:w="15"/><text x="89.2163%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="89.5161%" y="1029" width="0.0367%" height="15" fill="rgb(253,97,22)" fg:x="2442" fg:w="1"/><text x="89.7661%" y="1039.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="89.5161%" y="1013" width="0.0367%" height="15" fill="rgb(241,101,14)" fg:x="2442" fg:w="1"/><text x="89.7661%" y="1023.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.04%)</title><rect x="89.5528%" y="965" width="0.0367%" height="15" fill="rgb(238,103,29)" fg:x="2443" fg:w="1"/><text x="89.8028%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="89.5528%" y="949" width="0.0367%" height="15" fill="rgb(233,195,47)" fg:x="2443" fg:w="1"/><text x="89.8028%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="89.5528%" y="1029" width="0.1100%" height="15" fill="rgb(246,218,30)" fg:x="2443" fg:w="3"/><text x="89.8028%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.11%)</title><rect x="89.5528%" y="1013" width="0.1100%" height="15" fill="rgb(219,145,47)" fg:x="2443" fg:w="3"/><text x="89.8028%" y="1023.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.11%)</title><rect x="89.5528%" y="997" width="0.1100%" height="15" fill="rgb(243,12,26)" fg:x="2443" fg:w="3"/><text x="89.8028%" y="1007.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.11%)</title><rect x="89.5528%" y="981" width="0.1100%" height="15" fill="rgb(214,87,16)" fg:x="2443" fg:w="3"/><text x="89.8028%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="89.5894%" y="965" width="0.0733%" height="15" fill="rgb(208,99,42)" fg:x="2444" fg:w="2"/><text x="89.8394%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="89.5894%" y="949" width="0.0733%" height="15" fill="rgb(253,99,2)" fg:x="2444" fg:w="2"/><text x="89.8394%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.07%)</title><rect x="89.5894%" y="933" width="0.0733%" height="15" fill="rgb(220,168,23)" fg:x="2444" fg:w="2"/><text x="89.8394%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="89.5894%" y="917" width="0.0733%" height="15" fill="rgb(242,38,24)" fg:x="2444" fg:w="2"/><text x="89.8394%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="89.5894%" y="901" width="0.0733%" height="15" fill="rgb(225,182,9)" fg:x="2444" fg:w="2"/><text x="89.8394%" y="911.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="89.5894%" y="885" width="0.0733%" height="15" fill="rgb(243,178,37)" fg:x="2444" fg:w="2"/><text x="89.8394%" y="895.50"></text></g><g><title>xadrez::board::Chessboard::save_current_to_history (7 samples, 0.26%)</title><rect x="89.5161%" y="1045" width="0.2566%" height="15" fill="rgb(232,139,19)" fg:x="2442" fg:w="7"/><text x="89.7661%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;xadrez::move::Move&gt;&gt; (1 samples, 0.04%)</title><rect x="89.7727%" y="1045" width="0.0367%" height="15" fill="rgb(225,201,24)" fg:x="2449" fg:w="1"/><text x="90.0227%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;xadrez::move::Move&gt;&gt; (1 samples, 0.04%)</title><rect x="89.7727%" y="1029" width="0.0367%" height="15" fill="rgb(221,47,46)" fg:x="2449" fg:w="1"/><text x="90.0227%" y="1039.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="89.7727%" y="1013" width="0.0367%" height="15" fill="rgb(249,23,13)" fg:x="2449" fg:w="1"/><text x="90.0227%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="89.7727%" y="997" width="0.0367%" height="15" fill="rgb(219,9,5)" fg:x="2449" fg:w="1"/><text x="90.0227%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="89.7727%" y="981" width="0.0367%" height="15" fill="rgb(254,171,16)" fg:x="2449" fg:w="1"/><text x="90.0227%" y="991.50"></text></g><g><title>xadrez::board::Chessboard::make_move (16 samples, 0.59%)</title><rect x="89.5161%" y="1061" width="0.5865%" height="15" fill="rgb(230,171,20)" fg:x="2442" fg:w="16"/><text x="89.7661%" y="1071.50"></text></g><g><title>realloc (44 samples, 1.61%)</title><rect x="90.1026%" y="1061" width="1.6129%" height="15" fill="rgb(210,71,41)" fg:x="2458" fg:w="44"/><text x="90.3526%" y="1071.50"></text></g><g><title>malloc (11 samples, 0.40%)</title><rect x="91.7155%" y="1061" width="0.4032%" height="15" fill="rgb(206,173,20)" fg:x="2502" fg:w="11"/><text x="91.9655%" y="1071.50"></text></g><g><title>cfree (8 samples, 0.29%)</title><rect x="92.1188%" y="1061" width="0.2933%" height="15" fill="rgb(233,88,34)" fg:x="2513" fg:w="8"/><text x="92.3688%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.33%)</title><rect x="92.4120%" y="1045" width="0.3299%" height="15" fill="rgb(223,209,46)" fg:x="2521" fg:w="9"/><text x="92.6620%" y="1055.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.33%)</title><rect x="92.4120%" y="1029" width="0.3299%" height="15" fill="rgb(250,43,18)" fg:x="2521" fg:w="9"/><text x="92.6620%" y="1039.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.33%)</title><rect x="92.4120%" y="1013" width="0.3299%" height="15" fill="rgb(208,13,10)" fg:x="2521" fg:w="9"/><text x="92.6620%" y="1023.50"></text></g><g><title>alloc::raw_vec::finish_grow (29 samples, 1.06%)</title><rect x="92.4120%" y="1061" width="1.0630%" height="15" fill="rgb(212,200,36)" fg:x="2521" fg:w="29"/><text x="92.6620%" y="1071.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (4 samples, 0.15%)</title><rect x="93.4751%" y="1029" width="0.1466%" height="15" fill="rgb(225,90,30)" fg:x="2550" fg:w="4"/><text x="93.7251%" y="1039.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (4 samples, 0.15%)</title><rect x="93.4751%" y="1013" width="0.1466%" height="15" fill="rgb(236,182,39)" fg:x="2550" fg:w="4"/><text x="93.7251%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.22%)</title><rect x="93.4751%" y="1045" width="0.2199%" height="15" fill="rgb(212,144,35)" fg:x="2550" fg:w="6"/><text x="93.7251%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.62%)</title><rect x="93.4751%" y="1061" width="0.6232%" height="15" fill="rgb(228,63,44)" fg:x="2550" fg:w="17"/><text x="93.7251%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.07%)</title><rect x="94.0982%" y="1045" width="0.0733%" height="15" fill="rgb(228,109,6)" fg:x="2567" fg:w="2"/><text x="94.3482%" y="1055.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.07%)</title><rect x="94.0982%" y="1029" width="0.0733%" height="15" fill="rgb(238,117,24)" fg:x="2567" fg:w="2"/><text x="94.3482%" y="1039.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.07%)</title><rect x="94.0982%" y="1013" width="0.0733%" height="15" fill="rgb(242,26,26)" fg:x="2567" fg:w="2"/><text x="94.3482%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.22%)</title><rect x="94.0982%" y="1061" width="0.2199%" height="15" fill="rgb(221,92,48)" fg:x="2567" fg:w="6"/><text x="94.3482%" y="1071.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (7 samples, 0.26%)</title><rect x="94.3182%" y="1045" width="0.2566%" height="15" fill="rgb(209,209,32)" fg:x="2573" fg:w="7"/><text x="94.5682%" y="1055.50"></text></g><g><title>__rdl_realloc (9 samples, 0.33%)</title><rect x="94.3182%" y="1061" width="0.3299%" height="15" fill="rgb(221,70,22)" fg:x="2573" fg:w="9"/><text x="94.5682%" y="1071.50"></text></g><g><title>__rdl_alloc (3 samples, 0.11%)</title><rect x="94.6481%" y="1061" width="0.1100%" height="15" fill="rgb(248,145,5)" fg:x="2582" fg:w="3"/><text x="94.8981%" y="1071.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.11%)</title><rect x="94.6481%" y="1045" width="0.1100%" height="15" fill="rgb(226,116,26)" fg:x="2582" fg:w="3"/><text x="94.8981%" y="1055.50"></text></g><g><title>__libc_sigaction (1 samples, 0.04%)</title><rect x="94.7581%" y="1045" width="0.0367%" height="15" fill="rgb(244,5,17)" fg:x="2585" fg:w="1"/><text x="95.0081%" y="1055.50"></text></g><g><title>[libc.so.6] (65 samples, 2.38%)</title><rect x="94.7581%" y="1061" width="2.3827%" height="15" fill="rgb(252,159,33)" fg:x="2585" fg:w="65"/><text x="95.0081%" y="1071.50">[l..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.18%)</title><rect x="97.1408%" y="1029" width="0.1833%" height="15" fill="rgb(206,71,0)" fg:x="2650" fg:w="5"/><text x="97.3908%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.18%)</title><rect x="97.1408%" y="1013" width="0.1833%" height="15" fill="rgb(233,118,54)" fg:x="2650" fg:w="5"/><text x="97.3908%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.18%)</title><rect x="97.1408%" y="997" width="0.1833%" height="15" fill="rgb(234,83,48)" fg:x="2650" fg:w="5"/><text x="97.3908%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.18%)</title><rect x="97.1408%" y="981" width="0.1833%" height="15" fill="rgb(228,3,54)" fg:x="2650" fg:w="5"/><text x="97.3908%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.18%)</title><rect x="97.1408%" y="965" width="0.1833%" height="15" fill="rgb(226,155,13)" fg:x="2650" fg:w="5"/><text x="97.3908%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.18%)</title><rect x="97.1408%" y="949" width="0.1833%" height="15" fill="rgb(241,28,37)" fg:x="2650" fg:w="5"/><text x="97.3908%" y="959.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.18%)</title><rect x="97.1408%" y="933" width="0.1833%" height="15" fill="rgb(233,93,10)" fg:x="2650" fg:w="5"/><text x="97.3908%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (13 samples, 0.48%)</title><rect x="97.1408%" y="1045" width="0.4765%" height="15" fill="rgb(225,113,19)" fg:x="2650" fg:w="13"/><text x="97.3908%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.29%)</title><rect x="97.3240%" y="1029" width="0.2933%" height="15" fill="rgb(241,2,18)" fg:x="2655" fg:w="8"/><text x="97.5740%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (8 samples, 0.29%)</title><rect x="97.3240%" y="1013" width="0.2933%" height="15" fill="rgb(228,207,21)" fg:x="2655" fg:w="8"/><text x="97.5740%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (8 samples, 0.29%)</title><rect x="97.3240%" y="997" width="0.2933%" height="15" fill="rgb(213,211,35)" fg:x="2655" fg:w="8"/><text x="97.5740%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.29%)</title><rect x="97.3240%" y="981" width="0.2933%" height="15" fill="rgb(209,83,10)" fg:x="2655" fg:w="8"/><text x="97.5740%" y="991.50"></text></g><g><title>[unknown] (281 samples, 10.30%)</title><rect x="87.4633%" y="1077" width="10.3006%" height="15" fill="rgb(209,164,1)" fg:x="2386" fg:w="281"/><text x="87.7133%" y="1087.50">[unknown]</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 0.62%)</title><rect x="97.1408%" y="1061" width="0.6232%" height="15" fill="rgb(213,184,43)" fg:x="2650" fg:w="17"/><text x="97.3908%" y="1071.50"></text></g><g><title>[libc.so.6] (15 samples, 0.55%)</title><rect x="97.7639%" y="1077" width="0.5499%" height="15" fill="rgb(231,61,34)" fg:x="2667" fg:w="15"/><text x="98.0139%" y="1087.50"></text></g><g><title>[libc.so.6] (15 samples, 0.55%)</title><rect x="97.7639%" y="1061" width="0.5499%" height="15" fill="rgb(235,75,3)" fg:x="2667" fg:w="15"/><text x="98.0139%" y="1071.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="98.3138%" y="1061" width="0.0367%" height="15" fill="rgb(220,106,47)" fg:x="2682" fg:w="1"/><text x="98.5638%" y="1071.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="98.3138%" y="1045" width="0.0367%" height="15" fill="rgb(210,196,33)" fg:x="2682" fg:w="1"/><text x="98.5638%" y="1055.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="98.3138%" y="1029" width="0.0367%" height="15" fill="rgb(229,154,42)" fg:x="2682" fg:w="1"/><text x="98.5638%" y="1039.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="98.3138%" y="1013" width="0.0367%" height="15" fill="rgb(228,114,26)" fg:x="2682" fg:w="1"/><text x="98.5638%" y="1023.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="98.3138%" y="997" width="0.0367%" height="15" fill="rgb(208,144,1)" fg:x="2682" fg:w="1"/><text x="98.5638%" y="1007.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.22%)</title><rect x="98.3138%" y="1077" width="0.2199%" height="15" fill="rgb(239,112,37)" fg:x="2682" fg:w="6"/><text x="98.5638%" y="1087.50"></text></g><g><title>xadrez::movegen::generate_moves (1 samples, 0.04%)</title><rect x="98.5337%" y="1061" width="0.0367%" height="15" fill="rgb(210,96,50)" fg:x="2688" fg:w="1"/><text x="98.7837%" y="1071.50"></text></g><g><title>[[stack]] (2 samples, 0.07%)</title><rect x="98.5337%" y="1077" width="0.0733%" height="15" fill="rgb(222,178,2)" fg:x="2688" fg:w="2"/><text x="98.7837%" y="1087.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.04%)</title><rect x="98.5704%" y="1061" width="0.0367%" height="15" fill="rgb(226,74,18)" fg:x="2689" fg:w="1"/><text x="98.8204%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="98.5704%" y="1045" width="0.0367%" height="15" fill="rgb(225,67,54)" fg:x="2689" fg:w="1"/><text x="98.8204%" y="1055.50"></text></g><g><title>[libc.so.6] (8 samples, 0.29%)</title><rect x="98.6070%" y="1061" width="0.2933%" height="15" fill="rgb(251,92,32)" fg:x="2690" fg:w="8"/><text x="98.8570%" y="1071.50"></text></g><g><title>perft-bb55d32f5 (2,700 samples, 98.97%)</title><rect x="0.0000%" y="1093" width="98.9736%" height="15" fill="rgb(228,149,22)" fg:x="0" fg:w="2700"/><text x="0.2500%" y="1103.50">perft-bb55d32f5</text></g><g><title>[[heap]] (10 samples, 0.37%)</title><rect x="98.6070%" y="1077" width="0.3666%" height="15" fill="rgb(243,54,13)" fg:x="2690" fg:w="10"/><text x="98.8570%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="98.9003%" y="1061" width="0.0733%" height="15" fill="rgb(243,180,28)" fg:x="2698" fg:w="2"/><text x="99.1503%" y="1071.50"></text></g><g><title>EVP_DecodeUpdate (1 samples, 0.04%)</title><rect x="98.9736%" y="581" width="0.0367%" height="15" fill="rgb(208,167,24)" fg:x="2700" fg:w="1"/><text x="99.2236%" y="591.50"></text></g><g><title>cargo::init_git_transports (2 samples, 0.07%)</title><rect x="98.9736%" y="805" width="0.0733%" height="15" fill="rgb(245,73,45)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="815.50"></text></g><g><title>cargo::ops::registry::needs_custom_http_transport (2 samples, 0.07%)</title><rect x="98.9736%" y="789" width="0.0733%" height="15" fill="rgb(237,203,48)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="799.50"></text></g><g><title>cargo::ops::registry::http_proxy (2 samples, 0.07%)</title><rect x="98.9736%" y="773" width="0.0733%" height="15" fill="rgb(211,197,16)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="783.50"></text></g><g><title>&lt;git2::config::Config&gt;::open_default (2 samples, 0.07%)</title><rect x="98.9736%" y="757" width="0.0733%" height="15" fill="rgb(243,99,51)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="767.50"></text></g><g><title>libgit2_sys::init (2 samples, 0.07%)</title><rect x="98.9736%" y="741" width="0.0733%" height="15" fill="rgb(215,123,29)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="751.50"></text></g><g><title>std::sync::once::Once::call_inner (2 samples, 0.07%)</title><rect x="98.9736%" y="725" width="0.0733%" height="15" fill="rgb(239,186,37)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="735.50"></text></g><g><title>&lt;std::sync::once::Once&gt;::call_once::&lt;libgit2_sys::init::{closure#0}&gt;::{closure#0} (2 samples, 0.07%)</title><rect x="98.9736%" y="709" width="0.0733%" height="15" fill="rgb(252,136,39)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="719.50"></text></g><g><title>git_runtime_init (2 samples, 0.07%)</title><rect x="98.9736%" y="693" width="0.0733%" height="15" fill="rgb(223,213,32)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="703.50"></text></g><g><title>git_openssl_stream_global_init (2 samples, 0.07%)</title><rect x="98.9736%" y="677" width="0.0733%" height="15" fill="rgb(233,115,5)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="687.50"></text></g><g><title>X509_STORE_set_default_paths (2 samples, 0.07%)</title><rect x="98.9736%" y="661" width="0.0733%" height="15" fill="rgb(207,226,44)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="671.50"></text></g><g><title>by_file_ctrl (2 samples, 0.07%)</title><rect x="98.9736%" y="645" width="0.0733%" height="15" fill="rgb(208,126,0)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="655.50"></text></g><g><title>X509_load_cert_crl_file (2 samples, 0.07%)</title><rect x="98.9736%" y="629" width="0.0733%" height="15" fill="rgb(244,66,21)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="639.50"></text></g><g><title>PEM_X509_INFO_read_bio (2 samples, 0.07%)</title><rect x="98.9736%" y="613" width="0.0733%" height="15" fill="rgb(222,97,12)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="623.50"></text></g><g><title>PEM_read_bio_ex (2 samples, 0.07%)</title><rect x="98.9736%" y="597" width="0.0733%" height="15" fill="rgb(219,213,19)" fg:x="2700" fg:w="2"/><text x="99.2236%" y="607.50"></text></g><g><title>BIO_gets (1 samples, 0.04%)</title><rect x="99.0103%" y="581" width="0.0367%" height="15" fill="rgb(252,169,30)" fg:x="2701" fg:w="1"/><text x="99.2603%" y="591.50"></text></g><g><title>file_gets (1 samples, 0.04%)</title><rect x="99.0103%" y="565" width="0.0367%" height="15" fill="rgb(206,32,51)" fg:x="2701" fg:w="1"/><text x="99.2603%" y="575.50"></text></g><g><title>_IO_fgets (1 samples, 0.04%)</title><rect x="99.0103%" y="549" width="0.0367%" height="15" fill="rgb(250,172,42)" fg:x="2701" fg:w="1"/><text x="99.2603%" y="559.50"></text></g><g><title>_start (3 samples, 0.11%)</title><rect x="98.9736%" y="1077" width="0.1100%" height="15" fill="rgb(209,34,43)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="1087.50"></text></g><g><title>__libc_start_main (3 samples, 0.11%)</title><rect x="98.9736%" y="1061" width="0.1100%" height="15" fill="rgb(223,11,35)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="1071.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="98.9736%" y="1045" width="0.1100%" height="15" fill="rgb(251,219,26)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="1055.50"></text></g><g><title>main (3 samples, 0.11%)</title><rect x="98.9736%" y="1029" width="0.1100%" height="15" fill="rgb(231,119,3)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="1039.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.11%)</title><rect x="98.9736%" y="1013" width="0.1100%" height="15" fill="rgb(216,97,11)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="1023.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.11%)</title><rect x="98.9736%" y="997" width="0.1100%" height="15" fill="rgb(223,59,9)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="1007.50"></text></g><g><title>std::panicking::try (3 samples, 0.11%)</title><rect x="98.9736%" y="981" width="0.1100%" height="15" fill="rgb(233,93,31)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="991.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.11%)</title><rect x="98.9736%" y="965" width="0.1100%" height="15" fill="rgb(239,81,33)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="975.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (3 samples, 0.11%)</title><rect x="98.9736%" y="949" width="0.1100%" height="15" fill="rgb(213,120,34)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="959.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.11%)</title><rect x="98.9736%" y="933" width="0.1100%" height="15" fill="rgb(243,49,53)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="943.50"></text></g><g><title>std::panicking::try (3 samples, 0.11%)</title><rect x="98.9736%" y="917" width="0.1100%" height="15" fill="rgb(247,216,33)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="927.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.11%)</title><rect x="98.9736%" y="901" width="0.1100%" height="15" fill="rgb(226,26,14)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="911.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.11%)</title><rect x="98.9736%" y="885" width="0.1100%" height="15" fill="rgb(215,49,53)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="895.50"></text></g><g><title>std::rt::lang_start::&lt;()&gt;::{closure#0} (3 samples, 0.11%)</title><rect x="98.9736%" y="869" width="0.1100%" height="15" fill="rgb(245,162,40)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="879.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace::&lt;fn(), ()&gt; (3 samples, 0.11%)</title><rect x="98.9736%" y="853" width="0.1100%" height="15" fill="rgb(229,68,17)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="863.50"></text></g><g><title>cargo::main (3 samples, 0.11%)</title><rect x="98.9736%" y="837" width="0.1100%" height="15" fill="rgb(213,182,10)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="847.50"></text></g><g><title>cargo::cli::main (3 samples, 0.11%)</title><rect x="98.9736%" y="821" width="0.1100%" height="15" fill="rgb(245,125,30)" fg:x="2700" fg:w="3"/><text x="99.2236%" y="831.50"></text></g><g><title>cargo::commands::metadata::exec (1 samples, 0.04%)</title><rect x="99.0469%" y="805" width="0.0367%" height="15" fill="rgb(232,202,2)" fg:x="2702" fg:w="1"/><text x="99.2969%" y="815.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (1 samples, 0.04%)</title><rect x="99.0469%" y="789" width="0.0367%" height="15" fill="rgb(237,140,51)" fg:x="2702" fg:w="1"/><text x="99.2969%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;cargo::core::package::SerializedPackage&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;cargo::core::package::SerializedPackage, core::iter::adapters::map::Map&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::collections::btree::map::IntoIter&lt;cargo::core::package_id::PackageId, cargo::core::package::Package&gt;, cargo::ops::cargo_output_metadata::build_resolve_graph::{closure#1}&gt;, cargo::ops::cargo_output_metadata::build_resolve_graph::{closure#2}&gt;&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="99.0469%" y="773" width="0.0367%" height="15" fill="rgb(236,157,25)" fg:x="2702" fg:w="1"/><text x="99.2969%" y="783.50"></text></g><g><title>&lt;cargo::core::package::Package&gt;::serialized (1 samples, 0.04%)</title><rect x="99.0469%" y="757" width="0.0367%" height="15" fill="rgb(219,209,0)" fg:x="2702" fg:w="1"/><text x="99.2969%" y="767.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;cargo::util::interning::InternedString, alloc::vec::Vec&lt;cargo::util::interning::InternedString&gt;&gt; as core::iter::traits::collect::FromIterator&lt;(cargo::util::interning::InternedString, alloc::vec::Vec&lt;cargo::util::interning::InternedString&gt;)&gt;&gt;::from_iter::&lt;core::iter::adapters::map::Map&lt;alloc::collections::btree::map::Iter&lt;cargo::util::interning::InternedString, alloc::vec::Vec&lt;cargo::core::summary::FeatureValue&gt;&gt;, &lt;cargo::core::package::Package&gt;::serialized::{closure#1}&gt;&gt; (1 samples, 0.04%)</title><rect x="99.0469%" y="741" width="0.0367%" height="15" fill="rgb(240,116,54)" fg:x="2702" fg:w="1"/><text x="99.2969%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;(cargo::util::interning::InternedString, alloc::vec::Vec&lt;cargo::util::interning::InternedString&gt;)&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;(cargo::util::interning::InternedString, alloc::vec::Vec&lt;cargo::util::interning::InternedString&gt;), core::iter::adapters::map::Map&lt;alloc::collections::btree::map::Iter&lt;cargo::util::interning::InternedString, alloc::vec::Vec&lt;cargo::core::summary::FeatureValue&gt;&gt;, &lt;cargo::core::package::Package&gt;::serialized::{closure#1}&gt;&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="99.0469%" y="725" width="0.0367%" height="15" fill="rgb(216,10,36)" fg:x="2702" fg:w="1"/><text x="99.2969%" y="735.50"></text></g><g><title>git_mwindow_open (1 samples, 0.04%)</title><rect x="99.0836%" y="1061" width="0.0367%" height="15" fill="rgb(222,72,44)" fg:x="2703" fg:w="1"/><text x="99.3336%" y="1071.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.04%)</title><rect x="99.1202%" y="1061" width="0.0367%" height="15" fill="rgb(232,159,9)" fg:x="2704" fg:w="1"/><text x="99.3702%" y="1071.50"></text></g><g><title>&lt;toml_edit::parser::TomlParser&gt;::on_keyval (1 samples, 0.04%)</title><rect x="99.1569%" y="949" width="0.0367%" height="15" fill="rgb(210,39,32)" fg:x="2705" fg:w="1"/><text x="99.4069%" y="959.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;toml_edit::internal_string::InternalString, toml_edit::table::TableKeyValue&gt;&gt;::insert_full (1 samples, 0.04%)</title><rect x="99.1569%" y="933" width="0.0367%" height="15" fill="rgb(216,194,45)" fg:x="2705" fg:w="1"/><text x="99.4069%" y="943.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;toml_edit::internal_string::InternalString, toml_edit::table::TableKeyValue&gt;&gt;::push (1 samples, 0.04%)</title><rect x="99.1569%" y="917" width="0.0367%" height="15" fill="rgb(218,18,35)" fg:x="2705" fg:w="1"/><text x="99.4069%" y="927.50"></text></g><g><title>alloc::raw_vec::finish_grow::&lt;alloc::alloc::Global&gt; (1 samples, 0.04%)</title><rect x="99.1569%" y="901" width="0.0367%" height="15" fill="rgb(207,83,51)" fg:x="2705" fg:w="1"/><text x="99.4069%" y="911.50"></text></g><g><title>realloc (1 samples, 0.04%)</title><rect x="99.1569%" y="885" width="0.0367%" height="15" fill="rgb(225,63,43)" fg:x="2705" fg:w="1"/><text x="99.4069%" y="895.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="99.1569%" y="869" width="0.0367%" height="15" fill="rgb(207,57,36)" fg:x="2705" fg:w="1"/><text x="99.4069%" y="879.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="99.1569%" y="853" width="0.0367%" height="15" fill="rgb(216,99,33)" fg:x="2705" fg:w="1"/><text x="99.4069%" y="863.50"></text></g><g><title>&lt;toml_edit::parser::key::key&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl::&lt;combine::parser::FirstMode&gt; (1 samples, 0.04%)</title><rect x="99.1935%" y="917" width="0.0367%" height="15" fill="rgb(225,42,16)" fg:x="2706" fg:w="1"/><text x="99.4435%" y="927.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse::&lt;combine::parser::combinator::Map&lt;combine::parser::combinator::Try&lt;(toml_edit::parser::trivia::ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::parser::key::simple_key&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::parser::trivia::ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;)&gt;, &lt;toml_edit::parser::key::key&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#0}&gt;, combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="99.1935%" y="901" width="0.0367%" height="15" fill="rgb(220,201,45)" fg:x="2706" fg:w="1"/><text x="99.4435%" y="911.50"></text></g><g><title>&lt;toml_edit::parser::key::simple_key&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl::&lt;combine::parser::FirstMode&gt; (1 samples, 0.04%)</title><rect x="99.1935%" y="885" width="0.0367%" height="15" fill="rgb(225,33,4)" fg:x="2706" fg:w="1"/><text x="99.4435%" y="895.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse::&lt;combine::parser::combinator::Map&lt;toml_edit::parser::key::unquoted_key&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::parser::key::simple_key&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#0}::{closure#2}&gt;, combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="99.1935%" y="869" width="0.0367%" height="15" fill="rgb(224,33,50)" fg:x="2706" fg:w="1"/><text x="99.4435%" y="879.50"></text></g><g><title>&lt;toml_edit::document::Document as core::str::traits::FromStr&gt;::from_str (3 samples, 0.11%)</title><rect x="99.1569%" y="1045" width="0.1100%" height="15" fill="rgb(246,198,51)" fg:x="2705" fg:w="3"/><text x="99.4069%" y="1055.50"></text></g><g><title>&lt;combine::parser::sequence::With&lt;toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::choice::Choice&lt;(combine::parser::token::Eof&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::repeat::SkipMany1&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;, combine::parser::sequence::Skip&lt;combine::parser::sequence::Then&lt;combine::parser::combinator::LookAhead&lt;combine::parser::token::Any&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;, &lt;toml_edit::parser::TomlParser&gt;::parse::{closure#0}&gt;, toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;&gt;)&gt;&gt; as combine::parser::EasyParser&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;::easy_parse (3 samples, 0.11%)</title><rect x="99.1569%" y="1029" width="0.1100%" height="15" fill="rgb(205,22,4)" fg:x="2705" fg:w="3"/><text x="99.4069%" y="1039.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse::&lt;combine::parser::sequence::With&lt;toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::choice::Choice&lt;(combine::parser::token::Eof&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::repeat::SkipMany1&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;, combine::parser::sequence::Skip&lt;combine::parser::sequence::Then&lt;combine::parser::combinator::LookAhead&lt;combine::parser::token::Any&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;, &lt;toml_edit::parser::TomlParser&gt;::parse::{closure#0}&gt;, toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;&gt;)&gt;&gt;, combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; (3 samples, 0.11%)</title><rect x="99.1569%" y="1013" width="0.1100%" height="15" fill="rgb(206,3,8)" fg:x="2705" fg:w="3"/><text x="99.4069%" y="1023.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse::&lt;combine::parser::combinator::Ignore&lt;&amp;mut combine::parser::sequence::Skip&lt;combine::parser::sequence::Then&lt;combine::parser::combinator::LookAhead&lt;combine::parser::token::Any&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;, &lt;toml_edit::parser::TomlParser&gt;::parse::{closure#0}&gt;, toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;&gt;, combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; (3 samples, 0.11%)</title><rect x="99.1569%" y="997" width="0.1100%" height="15" fill="rgb(251,23,15)" fg:x="2705" fg:w="3"/><text x="99.4069%" y="1007.50"></text></g><g><title>&lt;&lt;toml_edit::parser::TomlParser&gt;::parse::{closure#0}::Dispatch&lt;toml_edit::parser::document::parse_comment&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::parser::table::table&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::parser::document::parse_newline&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::parser::document::keyval&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode::&lt;combine::parser::FirstMode&gt; (3 samples, 0.11%)</title><rect x="99.1569%" y="981" width="0.1100%" height="15" fill="rgb(252,88,28)" fg:x="2705" fg:w="3"/><text x="99.4069%" y="991.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;toml_edit::parser::document::parse_keyval&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::parser::document::keyval&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#0}&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl::&lt;combine::parser::FirstMode&gt; (3 samples, 0.11%)</title><rect x="99.1569%" y="965" width="0.1100%" height="15" fill="rgb(212,127,14)" fg:x="2705" fg:w="3"/><text x="99.4069%" y="975.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;(toml_edit::parser::key::key&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::token::Token&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, (toml_edit::parser::trivia::ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::parser::value::value&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::parser::trivia::line_trailing&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;)), &lt;toml_edit::parser::document::parse_keyval&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#0}&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl::&lt;combine::parser::FirstMode&gt; (2 samples, 0.07%)</title><rect x="99.1935%" y="949" width="0.0733%" height="15" fill="rgb(247,145,37)" fg:x="2706" fg:w="2"/><text x="99.4435%" y="959.50"></text></g><g><title>&lt;(toml_edit::parser::key::key&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::token::Token&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, (toml_edit::parser::trivia::ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::parser::value::value&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::parser::trivia::line_trailing&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;)) as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl::&lt;combine::parser::FirstMode&gt; (2 samples, 0.07%)</title><rect x="99.1935%" y="933" width="0.0733%" height="15" fill="rgb(209,117,53)" fg:x="2706" fg:w="2"/><text x="99.4435%" y="943.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;combine::parser::range::RecognizeWithValue&lt;combine::parser::sequence::Then&lt;combine::parser::combinator::LookAhead&lt;combine::parser::token::Any&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;, &lt;toml_edit::parser::value::value&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#0}&gt;&gt;, &lt;toml_edit::parser::value::value&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#1}&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl::&lt;combine::parser::FirstMode&gt; (1 samples, 0.04%)</title><rect x="99.2302%" y="917" width="0.0367%" height="15" fill="rgb(212,90,42)" fg:x="2707" fg:w="1"/><text x="99.4802%" y="927.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse::&lt;combine::parser::sequence::Then&lt;combine::parser::combinator::LookAhead&lt;combine::parser::token::Any&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;, &lt;toml_edit::parser::value::value&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#0}&gt;, combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="99.2302%" y="901" width="0.0367%" height="15" fill="rgb(218,164,37)" fg:x="2707" fg:w="1"/><text x="99.4802%" y="911.50"></text></g><g><title>&lt;&lt;toml_edit::parser::value::value&lt;_&gt; as combine::parser::Parser&lt;_&gt;&gt;::parse_mode_impl::{closure#0}::Dispatch&lt;combine::parser::combinator::Map&lt;toml_edit::parser::strings::string&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::parser::value::value&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#0}::{closure#0}&gt;, combine::parser::combinator::Map&lt;toml_edit::parser::array::array&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::value::Value::Array&gt;, combine::parser::combinator::Map&lt;toml_edit::parser::inline_table::inline_table&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::value::Value::InlineTable&gt;, combine::parser::choice::Choice&lt;(combine::parser::combinator::Map&lt;toml_edit::parser::datetime::date_time&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::value::Value as core::convert::From&lt;toml_edit::datetime::Datetime&gt;&gt;::from&gt;, combine::parser::combinator::Map&lt;toml_edit::parser::numbers::float&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::value::Value as core::convert::From&lt;f64&gt;&gt;::from&gt;, combine::parser::combinator::Map&lt;toml_edit::parser::numbers::integer&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::value::Value as core::convert::From&lt;i64&gt;&gt;::from&gt;)&gt;, combine::parser::error::Expected&lt;combine::parser::combinator::Map&lt;toml_edit::parser::numbers::true_&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::value::Value as core::convert::From&lt;bool&gt;&gt;::from&gt;, &amp;str&gt;, combine::parser::error::Expected&lt;combine::parser::combinator::Map&lt;toml_edit::parser::numbers::false_&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::value::Value as core::convert::From&lt;bool&gt;&gt;::from&gt;, &amp;str&gt;, combine::parser::error::Expected&lt;combine::parser::combinator::Map&lt;toml_edit::parser::numbers::inf&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::value::Value as core::convert::From&lt;f64&gt;&gt;::from&gt;, &amp;str&gt;, combine::parser::error::Expected&lt;combine::parser::combinator::Map&lt;toml_edit::parser::numbers::nan&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::value::Value as core::convert::From&lt;f64&gt;&gt;::from&gt;, &amp;str&gt;, combine::parser::error::Expected&lt;combine::parser::combinator::Map&lt;toml_edit::parser::numbers::nan&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::value::Value as core::convert::From&lt;f64&gt;&gt;::from&gt;, &amp;str&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode::&lt;combine::parser::FirstMode&gt; (1 samples, 0.04%)</title><rect x="99.2302%" y="885" width="0.0367%" height="15" fill="rgb(246,65,34)" fg:x="2707" fg:w="1"/><text x="99.4802%" y="895.50"></text></g><g><title>&lt;combine::parser::combinator::Map&lt;toml_edit::parser::array::array&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::value::Value::Array&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl::&lt;combine::parser::FirstMode&gt; (1 samples, 0.04%)</title><rect x="99.2302%" y="869" width="0.0367%" height="15" fill="rgb(231,100,33)" fg:x="2707" fg:w="1"/><text x="99.4802%" y="879.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;(combine::parser::choice::Optional&lt;combine::parser::combinator::Map&lt;combine::parser::range::RecognizeWithValue&lt;combine::parser::repeat::SepEndBy1&lt;toml_edit::array::Array, toml_edit::parser::array::array_value&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::token::Token&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;&gt;, &lt;toml_edit::parser::array::array_values&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#0}&gt;&gt;, toml_edit::parser::trivia::ws_comment_newline&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;), &lt;toml_edit::parser::array::array_values&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#1}&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl::&lt;combine::parser::FirstMode&gt; (1 samples, 0.04%)</title><rect x="99.2302%" y="853" width="0.0367%" height="15" fill="rgb(228,126,14)" fg:x="2707" fg:w="1"/><text x="99.4802%" y="863.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse::&lt;(combine::parser::choice::Optional&lt;combine::parser::combinator::Map&lt;combine::parser::range::RecognizeWithValue&lt;combine::parser::repeat::SepEndBy1&lt;toml_edit::array::Array, toml_edit::parser::array::array_value&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::token::Token&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;&gt;, &lt;toml_edit::parser::array::array_values&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#0}&gt;&gt;, toml_edit::parser::trivia::ws_comment_newline&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;), combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="99.2302%" y="837" width="0.0367%" height="15" fill="rgb(215,173,21)" fg:x="2707" fg:w="1"/><text x="99.4802%" y="847.50"></text></g><g><title>&lt;toml_edit::parser::trivia::ws_comment_newline&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl::&lt;combine::parser::FirstMode&gt; (1 samples, 0.04%)</title><rect x="99.2302%" y="821" width="0.0367%" height="15" fill="rgb(210,6,40)" fg:x="2707" fg:w="1"/><text x="99.4802%" y="831.50"></text></g><g><title>&lt;combine::parser::repeat::Sink as core::iter::traits::collect::Extend&lt;()&gt;&gt;::extend::&lt;&amp;mut combine::parser::repeat::Iter&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;, &amp;mut combine::parser::combinator::Ignore&lt;&amp;mut combine::parser::choice::Choice&lt;(combine::parser::repeat::SkipMany1&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;, combine::parser::choice::Choice&lt;(combine::parser::range::TakeWhile1&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;, toml_edit::parser::trivia::is_wschar&gt;, combine::parser::combinator::Map&lt;toml_edit::parser::trivia::newline&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::parser::trivia::ws_comment_newline&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#0}&gt;)&gt;&gt;, combine::parser::combinator::Map&lt;toml_edit::parser::trivia::comment&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::parser::trivia::ws_comment_newline&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#1}&gt;)&gt;&gt;, &amp;mut combine::parser::choice::Y&lt;(bool, bool, combine::parser::repeat::Sink, combine::parser::choice::Y&lt;usize, ()&gt;), ()&gt;, combine::parser::FirstMode&gt;&gt; (1 samples, 0.04%)</title><rect x="99.2302%" y="805" width="0.0367%" height="15" fill="rgb(212,48,18)" fg:x="2707" fg:w="1"/><text x="99.4802%" y="815.50"></text></g><g><title>&lt;&amp;mut combine::parser::choice::Choice&lt;(combine::parser::repeat::SkipMany1&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;, combine::parser::choice::Choice&lt;(combine::parser::range::TakeWhile1&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;, toml_edit::parser::trivia::is_wschar&gt;, combine::parser::combinator::Map&lt;toml_edit::parser::trivia::newline&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::parser::trivia::ws_comment_newline&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#0}&gt;)&gt;&gt;, combine::parser::combinator::Map&lt;toml_edit::parser::trivia::comment&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::parser::trivia::ws_comment_newline&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#1}&gt;)&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_first (1 samples, 0.04%)</title><rect x="99.2302%" y="789" width="0.0367%" height="15" fill="rgb(230,214,11)" fg:x="2707" fg:w="1"/><text x="99.4802%" y="799.50"></text></g><g><title>&lt;toml_edit::parser::trivia::comment&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl::&lt;combine::parser::FirstMode&gt; (1 samples, 0.04%)</title><rect x="99.2302%" y="773" width="0.0367%" height="15" fill="rgb(254,105,39)" fg:x="2707" fg:w="1"/><text x="99.4802%" y="783.50"></text></g><g><title>&lt;toml_edit::de::table::TableMapAccess as serde::de::MapAccess&gt;::next_value_seed::&lt;serde_ignored::TrackedSeed&lt;core::marker::PhantomData&lt;core::option::Option&lt;cargo::util::toml::TomlTarget&gt;&gt;, cargo::util::toml::read_manifest_from_str::{closure#1}&gt;&gt; (1 samples, 0.04%)</title><rect x="99.2669%" y="997" width="0.0367%" height="15" fill="rgb(245,158,5)" fg:x="2708" fg:w="1"/><text x="99.5169%" y="1007.50"></text></g><g><title>&lt;serde_ignored::Deserializer&lt;toml_edit::de::item::ItemDeserializer, cargo::util::toml::read_manifest_from_str::{closure#1}&gt; as serde::de::Deserializer&gt;::deserialize_option::&lt;serde::de::impls::OptionVisitor&lt;cargo::util::toml::TomlTarget&gt;&gt; (1 samples, 0.04%)</title><rect x="99.2669%" y="981" width="0.0367%" height="15" fill="rgb(249,208,11)" fg:x="2708" fg:w="1"/><text x="99.5169%" y="991.50"></text></g><g><title>&lt;toml_edit::item::Item as serde::de::Deserializer&gt;::deserialize_any::&lt;serde_ignored::Wrap&lt;&lt;cargo::util::toml::TomlTarget as serde::de::Deserialize&gt;::deserialize::__Visitor, cargo::util::toml::read_manifest_from_str::{closure#1}&gt;&gt; (1 samples, 0.04%)</title><rect x="99.2669%" y="965" width="0.0367%" height="15" fill="rgb(210,39,28)" fg:x="2708" fg:w="1"/><text x="99.5169%" y="975.50"></text></g><g><title>&lt;serde_ignored::Wrap&lt;&lt;cargo::util::toml::TomlTarget as serde::de::Deserialize&gt;::deserialize::__Visitor, cargo::util::toml::read_manifest_from_str::{closure#1}&gt; as serde::de::Visitor&gt;::visit_map::&lt;toml_edit::de::table::TableMapAccess&gt; (1 samples, 0.04%)</title><rect x="99.2669%" y="949" width="0.0367%" height="15" fill="rgb(211,56,53)" fg:x="2708" fg:w="1"/><text x="99.5169%" y="959.50"></text></g><g><title>&lt;toml_edit::de::inline_table::InlineTableMapAccess as serde::de::MapAccess&gt;::next_key_seed::&lt;serde_ignored::CaptureKey&lt;core::marker::PhantomData&lt;&lt;cargo::util::toml::TomlTarget as serde::de::Deserialize&gt;::deserialize::__Field&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="99.2669%" y="933" width="0.0367%" height="15" fill="rgb(226,201,30)" fg:x="2708" fg:w="1"/><text x="99.5169%" y="943.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="99.2669%" y="917" width="0.0367%" height="15" fill="rgb(239,101,34)" fg:x="2708" fg:w="1"/><text x="99.5169%" y="927.50"></text></g><g><title>&lt;toml_edit::de::table::TableMapAccess as serde::de::MapAccess&gt;::next_value_seed::&lt;serde_ignored::TrackedSeed&lt;core::marker::PhantomData&lt;core::option::Option&lt;cargo::util::toml::MaybeWorkspace&lt;alloc::string::String&gt;&gt;&gt;, cargo::util::toml::read_manifest_from_str::{closure#1}&gt;&gt; (1 samples, 0.04%)</title><rect x="99.3035%" y="933" width="0.0367%" height="15" fill="rgb(226,209,5)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="943.50"></text></g><g><title>&lt;cargo::util::toml::MaybeWorkspace&lt;alloc::string::String&gt; as serde::de::Deserialize&gt;::deserialize::&lt;serde_ignored::Deserializer&lt;toml_edit::item::Item, cargo::util::toml::read_manifest_from_str::{closure#1}&gt;&gt; (1 samples, 0.04%)</title><rect x="99.3035%" y="917" width="0.0367%" height="15" fill="rgb(250,105,47)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="927.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;toml_edit::de::Error&gt; as serde::de::Deserializer&gt;::deserialize_struct::&lt;&lt;cargo::util::toml::TomlWorkspaceField as serde::de::Deserialize&gt;::deserialize::__Visitor&gt; (1 samples, 0.04%)</title><rect x="99.3035%" y="901" width="0.0367%" height="15" fill="rgb(230,72,3)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="911.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;toml_edit::de::Error&gt;&gt;::invalid_type (1 samples, 0.04%)</title><rect x="99.3035%" y="885" width="0.0367%" height="15" fill="rgb(232,218,39)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="895.50"></text></g><g><title>&lt;toml_edit::de::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.04%)</title><rect x="99.3035%" y="869" width="0.0367%" height="15" fill="rgb(248,166,6)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="879.50"></text></g><g><title>&lt;toml_edit::de::Error as serde::de::Error&gt;::custom::&lt;core::fmt::Arguments&gt; (1 samples, 0.04%)</title><rect x="99.3035%" y="853" width="0.0367%" height="15" fill="rgb(247,89,20)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="863.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (1 samples, 0.04%)</title><rect x="99.3035%" y="837" width="0.0367%" height="15" fill="rgb(248,130,54)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="847.50"></text></g><g><title>core::fmt::write (1 samples, 0.04%)</title><rect x="99.3035%" y="821" width="0.0367%" height="15" fill="rgb(234,196,4)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="831.50"></text></g><g><title>&lt;serde::de::Unexpected as core::fmt::Display&gt;::fmt (1 samples, 0.04%)</title><rect x="99.3035%" y="805" width="0.0367%" height="15" fill="rgb(250,143,31)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="815.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.04%)</title><rect x="99.3035%" y="789" width="0.0367%" height="15" fill="rgb(211,110,34)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="799.50"></text></g><g><title>core::fmt::write (1 samples, 0.04%)</title><rect x="99.3035%" y="773" width="0.0367%" height="15" fill="rgb(215,124,48)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (1 samples, 0.04%)</title><rect x="99.3035%" y="757" width="0.0367%" height="15" fill="rgb(216,46,13)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="99.3035%" y="741" width="0.0367%" height="15" fill="rgb(205,184,25)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow::&lt;alloc::alloc::Global&gt; (1 samples, 0.04%)</title><rect x="99.3035%" y="725" width="0.0367%" height="15" fill="rgb(228,1,10)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="735.50"></text></g><g><title>__rdl_realloc (1 samples, 0.04%)</title><rect x="99.3035%" y="709" width="0.0367%" height="15" fill="rgb(213,116,27)" fg:x="2709" fg:w="1"/><text x="99.5535%" y="719.50"></text></g><g><title>&lt;serde_ignored::Deserializer&lt;toml_edit::document::Document, cargo::util::toml::read_manifest_from_str::{closure#1}&gt; as serde::de::Deserializer&gt;::deserialize_struct::&lt;&lt;cargo::util::toml::TomlManifest as serde::de::Deserialize&gt;::deserialize::__Visitor&gt; (3 samples, 0.11%)</title><rect x="99.2669%" y="1045" width="0.1100%" height="15" fill="rgb(241,95,50)" fg:x="2708" fg:w="3"/><text x="99.5169%" y="1055.50"></text></g><g><title>&lt;toml_edit::item::Item as serde::de::Deserializer&gt;::deserialize_any::&lt;serde_ignored::Wrap&lt;&lt;cargo::util::toml::TomlManifest as serde::de::Deserialize&gt;::deserialize::__Visitor, cargo::util::toml::read_manifest_from_str::{closure#1}&gt;&gt; (3 samples, 0.11%)</title><rect x="99.2669%" y="1029" width="0.1100%" height="15" fill="rgb(238,48,32)" fg:x="2708" fg:w="3"/><text x="99.5169%" y="1039.50"></text></g><g><title>&lt;&lt;cargo::util::toml::TomlManifest as serde::de::Deserialize&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::&lt;serde_ignored::MapAccess&lt;toml_edit::de::table::TableMapAccess, cargo::util::toml::read_manifest_from_str::{closure#1}&gt;&gt; (3 samples, 0.11%)</title><rect x="99.2669%" y="1013" width="0.1100%" height="15" fill="rgb(235,113,49)" fg:x="2708" fg:w="3"/><text x="99.5169%" y="1023.50"></text></g><g><title>&lt;toml_edit::de::table::TableMapAccess as serde::de::MapAccess&gt;::next_value_seed::&lt;serde_ignored::TrackedSeed&lt;core::marker::PhantomData&lt;core::option::Option&lt;alloc::boxed::Box&lt;cargo::util::toml::TomlProject&gt;&gt;&gt;, cargo::util::toml::read_manifest_from_str::{closure#1}&gt;&gt; (2 samples, 0.07%)</title><rect x="99.3035%" y="997" width="0.0733%" height="15" fill="rgb(205,127,43)" fg:x="2709" fg:w="2"/><text x="99.5535%" y="1007.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;cargo::util::toml::TomlProject&gt; as serde::de::Deserialize&gt;::deserialize::&lt;serde_ignored::Deserializer&lt;toml_edit::item::Item, cargo::util::toml::read_manifest_from_str::{closure#1}&gt;&gt; (2 samples, 0.07%)</title><rect x="99.3035%" y="981" width="0.0733%" height="15" fill="rgb(250,162,2)" fg:x="2709" fg:w="2"/><text x="99.5535%" y="991.50"></text></g><g><title>&lt;toml_edit::item::Item as serde::de::Deserializer&gt;::deserialize_any::&lt;serde_ignored::Wrap&lt;&lt;cargo::util::toml::TomlProject as serde::de::Deserialize&gt;::deserialize::__Visitor, cargo::util::toml::read_manifest_from_str::{closure#1}&gt;&gt; (2 samples, 0.07%)</title><rect x="99.3035%" y="965" width="0.0733%" height="15" fill="rgb(220,13,41)" fg:x="2709" fg:w="2"/><text x="99.5535%" y="975.50"></text></g><g><title>&lt;&lt;cargo::util::toml::TomlProject as serde::de::Deserialize&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::&lt;serde_ignored::MapAccess&lt;toml_edit::de::table::TableMapAccess, cargo::util::toml::read_manifest_from_str::{closure#1}&gt;&gt; (2 samples, 0.07%)</title><rect x="99.3035%" y="949" width="0.0733%" height="15" fill="rgb(249,221,25)" fg:x="2709" fg:w="2"/><text x="99.5535%" y="959.50"></text></g><g><title>core::ptr::drop_in_place::&lt;core::option::Option&lt;cargo::util::toml::MaybeWorkspace&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="99.3768%" y="1029" width="0.0367%" height="15" fill="rgb(215,208,19)" fg:x="2711" fg:w="1"/><text x="99.6268%" y="1039.50"></text></g><g><title>cargo::util::toml::read_manifest_from_str (8 samples, 0.29%)</title><rect x="99.1569%" y="1061" width="0.2933%" height="15" fill="rgb(236,175,2)" fg:x="2705" fg:w="8"/><text x="99.4069%" y="1071.50"></text></g><g><title>&lt;cargo::util::toml::TomlManifest&gt;::to_real_manifest (2 samples, 0.07%)</title><rect x="99.3768%" y="1045" width="0.0733%" height="15" fill="rgb(241,52,2)" fg:x="2711" fg:w="2"/><text x="99.6268%" y="1055.50"></text></g><g><title>&lt;cargo::core::summary::Summary&gt;::new::&lt;&amp;str&gt; (1 samples, 0.04%)</title><rect x="99.4135%" y="1029" width="0.0367%" height="15" fill="rgb(248,140,14)" fg:x="2712" fg:w="1"/><text x="99.6635%" y="1039.50"></text></g><g><title>cargo::core::summary::build_feature_map (1 samples, 0.04%)</title><rect x="99.4135%" y="1013" width="0.0367%" height="15" fill="rgb(253,22,42)" fg:x="2712" fg:w="1"/><text x="99.6635%" y="1023.50"></text></g><g><title>git_tree_entry_bypath (1 samples, 0.04%)</title><rect x="99.4501%" y="805" width="0.0367%" height="15" fill="rgb(234,61,47)" fg:x="2713" fg:w="1"/><text x="99.7001%" y="815.50"></text></g><g><title>git_object_lookup_prefix (1 samples, 0.04%)</title><rect x="99.4501%" y="789" width="0.0367%" height="15" fill="rgb(208,226,15)" fg:x="2713" fg:w="1"/><text x="99.7001%" y="799.50"></text></g><g><title>git_odb_read (1 samples, 0.04%)</title><rect x="99.4501%" y="773" width="0.0367%" height="15" fill="rgb(217,221,4)" fg:x="2713" fg:w="1"/><text x="99.7001%" y="783.50"></text></g><g><title>odb_read_1 (1 samples, 0.04%)</title><rect x="99.4501%" y="757" width="0.0367%" height="15" fill="rgb(212,174,34)" fg:x="2713" fg:w="1"/><text x="99.7001%" y="767.50"></text></g><g><title>git_odb__hashobj (1 samples, 0.04%)</title><rect x="99.4501%" y="741" width="0.0367%" height="15" fill="rgb(253,83,4)" fg:x="2713" fg:w="1"/><text x="99.7001%" y="751.50"></text></g><g><title>git_hash_vec (1 samples, 0.04%)</title><rect x="99.4501%" y="725" width="0.0367%" height="15" fill="rgb(250,195,49)" fg:x="2713" fg:w="1"/><text x="99.7001%" y="735.50"></text></g><g><title>git_hash_sha1_update (1 samples, 0.04%)</title><rect x="99.4501%" y="709" width="0.0367%" height="15" fill="rgb(241,192,25)" fg:x="2713" fg:w="1"/><text x="99.7001%" y="719.50"></text></g><g><title>SHA1DCUpdate (1 samples, 0.04%)</title><rect x="99.4501%" y="693" width="0.0367%" height="15" fill="rgb(208,124,10)" fg:x="2713" fg:w="1"/><text x="99.7001%" y="703.50"></text></g><g><title>sha1_process (1 samples, 0.04%)</title><rect x="99.4501%" y="677" width="0.0367%" height="15" fill="rgb(222,33,0)" fg:x="2713" fg:w="1"/><text x="99.7001%" y="687.50"></text></g><g><title>sha1_compression_states (1 samples, 0.04%)</title><rect x="99.4501%" y="661" width="0.0367%" height="15" fill="rgb(234,209,28)" fg:x="2713" fg:w="1"/><text x="99.7001%" y="671.50"></text></g><g><title>&lt;git2::tree::Tree&gt;::get_path (2 samples, 0.07%)</title><rect x="99.4501%" y="837" width="0.0733%" height="15" fill="rgb(224,11,23)" fg:x="2713" fg:w="2"/><text x="99.7001%" y="847.50"></text></g><g><title>git_tree_entry_bypath (2 samples, 0.07%)</title><rect x="99.4501%" y="821" width="0.0733%" height="15" fill="rgb(232,99,1)" fg:x="2713" fg:w="2"/><text x="99.7001%" y="831.50"></text></g><g><title>git_object_lookup_prefix (1 samples, 0.04%)</title><rect x="99.4868%" y="805" width="0.0367%" height="15" fill="rgb(237,95,45)" fg:x="2714" fg:w="1"/><text x="99.7368%" y="815.50"></text></g><g><title>git_odb_read (1 samples, 0.04%)</title><rect x="99.4868%" y="789" width="0.0367%" height="15" fill="rgb(208,109,11)" fg:x="2714" fg:w="1"/><text x="99.7368%" y="799.50"></text></g><g><title>odb_read_1 (1 samples, 0.04%)</title><rect x="99.4868%" y="773" width="0.0367%" height="15" fill="rgb(216,190,48)" fg:x="2714" fg:w="1"/><text x="99.7368%" y="783.50"></text></g><g><title>pack_backend__read (1 samples, 0.04%)</title><rect x="99.4868%" y="757" width="0.0367%" height="15" fill="rgb(251,171,36)" fg:x="2714" fg:w="1"/><text x="99.7368%" y="767.50"></text></g><g><title>git_packfile_unpack (1 samples, 0.04%)</title><rect x="99.4868%" y="741" width="0.0367%" height="15" fill="rgb(230,62,22)" fg:x="2714" fg:w="1"/><text x="99.7368%" y="751.50"></text></g><g><title>packfile_unpack_compressed (1 samples, 0.04%)</title><rect x="99.4868%" y="725" width="0.0367%" height="15" fill="rgb(225,114,35)" fg:x="2714" fg:w="1"/><text x="99.7368%" y="735.50"></text></g><g><title>git_zstream_get_output_chunk (1 samples, 0.04%)</title><rect x="99.4868%" y="709" width="0.0367%" height="15" fill="rgb(215,118,42)" fg:x="2714" fg:w="1"/><text x="99.7368%" y="719.50"></text></g><g><title>inflate (1 samples, 0.04%)</title><rect x="99.4868%" y="693" width="0.0367%" height="15" fill="rgb(243,119,21)" fg:x="2714" fg:w="1"/><text x="99.7368%" y="703.50"></text></g><g><title>adler32_z (1 samples, 0.04%)</title><rect x="99.4868%" y="677" width="0.0367%" height="15" fill="rgb(252,177,53)" fg:x="2714" fg:w="1"/><text x="99.7368%" y="687.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (3 samples, 0.11%)</title><rect x="99.4501%" y="1061" width="0.1100%" height="15" fill="rgb(237,209,29)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="1071.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (3 samples, 0.11%)</title><rect x="99.4501%" y="1045" width="0.1100%" height="15" fill="rgb(212,65,23)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="1055.50"></text></g><g><title>cargo::core::resolver::resolve (3 samples, 0.11%)</title><rect x="99.4501%" y="1029" width="0.1100%" height="15" fill="rgb(230,222,46)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="1039.50"></text></g><g><title>cargo::core::resolver::activate (3 samples, 0.11%)</title><rect x="99.4501%" y="1013" width="0.1100%" height="15" fill="rgb(215,135,32)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="1023.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps (3 samples, 0.11%)</title><rect x="99.4501%" y="997" width="0.1100%" height="15" fill="rgb(246,101,22)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="1007.50"></text></g><g><title>core::iter::adapters::try_process::&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;, (cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;, &lt;core::result::Result&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, anyhow::Error&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), anyhow::Error&gt;&gt;&gt;::from_iter&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;&gt;::{closure#0}, alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;&gt; (3 samples, 0.11%)</title><rect x="99.4501%" y="981" width="0.1100%" height="15" fill="rgb(206,107,13)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), core::iter::adapters::GenericShunt&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;, core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;&gt;&gt;&gt;::from_iter (3 samples, 0.11%)</title><rect x="99.4501%" y="965" width="0.1100%" height="15" fill="rgb(250,100,44)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="975.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0} (3 samples, 0.11%)</title><rect x="99.4501%" y="949" width="0.1100%" height="15" fill="rgb(231,147,38)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="959.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::query (3 samples, 0.11%)</title><rect x="99.4501%" y="933" width="0.1100%" height="15" fill="rgb(229,8,40)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="943.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (3 samples, 0.11%)</title><rect x="99.4501%" y="917" width="0.1100%" height="15" fill="rgb(221,135,30)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="927.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (3 samples, 0.11%)</title><rect x="99.4501%" y="901" width="0.1100%" height="15" fill="rgb(249,193,18)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="911.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::query_inner_with_online (3 samples, 0.11%)</title><rect x="99.4501%" y="885" width="0.1100%" height="15" fill="rgb(209,133,39)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="895.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::load_summaries (3 samples, 0.11%)</title><rect x="99.4501%" y="869" width="0.1100%" height="15" fill="rgb(232,100,14)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="879.50"></text></g><g><title>&lt;cargo::sources::registry::remote::RemoteRegistry as cargo::sources::registry::RegistryData&gt;::load (3 samples, 0.11%)</title><rect x="99.4501%" y="853" width="0.1100%" height="15" fill="rgb(224,185,1)" fg:x="2713" fg:w="3"/><text x="99.7001%" y="863.50"></text></g><g><title>&lt;git2::commit::Commit&gt;::tree (1 samples, 0.04%)</title><rect x="99.5235%" y="837" width="0.0367%" height="15" fill="rgb(223,139,8)" fg:x="2715" fg:w="1"/><text x="99.7735%" y="847.50"></text></g><g><title>git_object_lookup_prefix (1 samples, 0.04%)</title><rect x="99.5235%" y="821" width="0.0367%" height="15" fill="rgb(232,213,38)" fg:x="2715" fg:w="1"/><text x="99.7735%" y="831.50"></text></g><g><title>git_odb_read (1 samples, 0.04%)</title><rect x="99.5235%" y="805" width="0.0367%" height="15" fill="rgb(207,94,22)" fg:x="2715" fg:w="1"/><text x="99.7735%" y="815.50"></text></g><g><title>odb_read_1 (1 samples, 0.04%)</title><rect x="99.5235%" y="789" width="0.0367%" height="15" fill="rgb(219,183,54)" fg:x="2715" fg:w="1"/><text x="99.7735%" y="799.50"></text></g><g><title>pack_backend__read (1 samples, 0.04%)</title><rect x="99.5235%" y="773" width="0.0367%" height="15" fill="rgb(216,185,54)" fg:x="2715" fg:w="1"/><text x="99.7735%" y="783.50"></text></g><g><title>git_packfile_unpack (1 samples, 0.04%)</title><rect x="99.5235%" y="757" width="0.0367%" height="15" fill="rgb(254,217,39)" fg:x="2715" fg:w="1"/><text x="99.7735%" y="767.50"></text></g><g><title>git_delta_apply (1 samples, 0.04%)</title><rect x="99.5235%" y="741" width="0.0367%" height="15" fill="rgb(240,178,23)" fg:x="2715" fg:w="1"/><text x="99.7735%" y="751.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="99.5235%" y="725" width="0.0367%" height="15" fill="rgb(218,11,47)" fg:x="2715" fg:w="1"/><text x="99.7735%" y="735.50"></text></g><g><title>cargo::ops::cargo_read_manifest::read_package (1 samples, 0.04%)</title><rect x="99.5601%" y="1061" width="0.0367%" height="15" fill="rgb(218,51,51)" fg:x="2716" fg:w="1"/><text x="99.8101%" y="1071.50"></text></g><g><title>cargo::util::toml::read_manifest (1 samples, 0.04%)</title><rect x="99.5601%" y="1045" width="0.0367%" height="15" fill="rgb(238,126,27)" fg:x="2716" fg:w="1"/><text x="99.8101%" y="1055.50"></text></g><g><title>cargo::util::toml::read_manifest_from_str (1 samples, 0.04%)</title><rect x="99.5601%" y="1029" width="0.0367%" height="15" fill="rgb(249,202,22)" fg:x="2716" fg:w="1"/><text x="99.8101%" y="1039.50"></text></g><g><title>&lt;toml_edit::document::Document as core::str::traits::FromStr&gt;::from_str (1 samples, 0.04%)</title><rect x="99.5601%" y="1013" width="0.0367%" height="15" fill="rgb(254,195,49)" fg:x="2716" fg:w="1"/><text x="99.8101%" y="1023.50"></text></g><g><title>&lt;combine::parser::sequence::With&lt;toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::choice::Choice&lt;(combine::parser::token::Eof&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::repeat::SkipMany1&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;, combine::parser::sequence::Skip&lt;combine::parser::sequence::Then&lt;combine::parser::combinator::LookAhead&lt;combine::parser::token::Any&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;, &lt;toml_edit::parser::TomlParser&gt;::parse::{closure#0}&gt;, toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;&gt;)&gt;&gt; as combine::parser::EasyParser&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;::easy_parse (1 samples, 0.04%)</title><rect x="99.5601%" y="997" width="0.0367%" height="15" fill="rgb(208,123,14)" fg:x="2716" fg:w="1"/><text x="99.8101%" y="1007.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse::&lt;combine::parser::sequence::With&lt;toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::choice::Choice&lt;(combine::parser::token::Eof&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::repeat::SkipMany1&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;, combine::parser::sequence::Skip&lt;combine::parser::sequence::Then&lt;combine::parser::combinator::LookAhead&lt;combine::parser::token::Any&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;, &lt;toml_edit::parser::TomlParser&gt;::parse::{closure#0}&gt;, toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;&gt;)&gt;&gt;, combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="99.5601%" y="981" width="0.0367%" height="15" fill="rgb(224,200,8)" fg:x="2716" fg:w="1"/><text x="99.8101%" y="991.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse::&lt;combine::parser::combinator::Ignore&lt;&amp;mut combine::parser::sequence::Skip&lt;combine::parser::sequence::Then&lt;combine::parser::combinator::LookAhead&lt;combine::parser::token::Any&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;, &lt;toml_edit::parser::TomlParser&gt;::parse::{closure#0}&gt;, toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;&gt;, combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="99.5601%" y="965" width="0.0367%" height="15" fill="rgb(217,61,36)" fg:x="2716" fg:w="1"/><text x="99.8101%" y="975.50"></text></g><g><title>&lt;combine::parser::combinator::Ignore&lt;toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode::&lt;combine::parser::FirstMode&gt; (1 samples, 0.04%)</title><rect x="99.5601%" y="949" width="0.0367%" height="15" fill="rgb(206,35,45)" fg:x="2716" fg:w="1"/><text x="99.8101%" y="959.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (1 samples, 0.04%)</title><rect x="99.5968%" y="1029" width="0.0367%" height="15" fill="rgb(217,65,33)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="1039.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 0.04%)</title><rect x="99.5968%" y="1013" width="0.0367%" height="15" fill="rgb(222,158,48)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="1023.50"></text></g><g><title>cargo::core::resolver::resolve (1 samples, 0.04%)</title><rect x="99.5968%" y="997" width="0.0367%" height="15" fill="rgb(254,2,54)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="1007.50"></text></g><g><title>cargo::core::resolver::activate (1 samples, 0.04%)</title><rect x="99.5968%" y="981" width="0.0367%" height="15" fill="rgb(250,143,38)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="991.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps (1 samples, 0.04%)</title><rect x="99.5968%" y="965" width="0.0367%" height="15" fill="rgb(248,25,0)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="975.50"></text></g><g><title>core::iter::adapters::try_process::&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;, (cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;, &lt;core::result::Result&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, anyhow::Error&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), anyhow::Error&gt;&gt;&gt;::from_iter&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;&gt;::{closure#0}, alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;&gt; (1 samples, 0.04%)</title><rect x="99.5968%" y="949" width="0.0367%" height="15" fill="rgb(206,152,27)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), core::iter::adapters::GenericShunt&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;, core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;&gt;&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="99.5968%" y="933" width="0.0367%" height="15" fill="rgb(240,77,30)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="943.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0} (1 samples, 0.04%)</title><rect x="99.5968%" y="917" width="0.0367%" height="15" fill="rgb(231,5,3)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="927.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::query (1 samples, 0.04%)</title><rect x="99.5968%" y="901" width="0.0367%" height="15" fill="rgb(207,226,32)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="911.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (1 samples, 0.04%)</title><rect x="99.5968%" y="885" width="0.0367%" height="15" fill="rgb(222,207,47)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="895.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (1 samples, 0.04%)</title><rect x="99.5968%" y="869" width="0.0367%" height="15" fill="rgb(229,115,45)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="879.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::query_inner_with_online (1 samples, 0.04%)</title><rect x="99.5968%" y="853" width="0.0367%" height="15" fill="rgb(224,191,6)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="863.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::load_summaries (1 samples, 0.04%)</title><rect x="99.5968%" y="837" width="0.0367%" height="15" fill="rgb(230,227,24)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="847.50"></text></g><g><title>&lt;semver::Version&gt;::parse (1 samples, 0.04%)</title><rect x="99.5968%" y="821" width="0.0367%" height="15" fill="rgb(228,80,19)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="831.50"></text></g><g><title>&lt;semver::Version as core::str::traits::FromStr&gt;::from_str (1 samples, 0.04%)</title><rect x="99.5968%" y="805" width="0.0367%" height="15" fill="rgb(247,229,0)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="815.50"></text></g><g><title>semver::parse::numeric_identifier (1 samples, 0.04%)</title><rect x="99.5968%" y="789" width="0.0367%" height="15" fill="rgb(237,194,15)" fg:x="2717" fg:w="1"/><text x="99.8468%" y="799.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (2 samples, 0.07%)</title><rect x="99.5968%" y="1061" width="0.0733%" height="15" fill="rgb(219,203,20)" fg:x="2717" fg:w="2"/><text x="99.8468%" y="1071.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (2 samples, 0.07%)</title><rect x="99.5968%" y="1045" width="0.0733%" height="15" fill="rgb(234,128,8)" fg:x="2717" fg:w="2"/><text x="99.8468%" y="1055.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 0.04%)</title><rect x="99.6334%" y="1029" width="0.0367%" height="15" fill="rgb(248,202,8)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="1039.50"></text></g><g><title>cargo::core::resolver::resolve (1 samples, 0.04%)</title><rect x="99.6334%" y="1013" width="0.0367%" height="15" fill="rgb(206,104,37)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="1023.50"></text></g><g><title>cargo::core::resolver::activate (1 samples, 0.04%)</title><rect x="99.6334%" y="997" width="0.0367%" height="15" fill="rgb(223,8,27)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="1007.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps (1 samples, 0.04%)</title><rect x="99.6334%" y="981" width="0.0367%" height="15" fill="rgb(216,217,28)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="991.50"></text></g><g><title>core::iter::adapters::try_process::&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;, (cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;, &lt;core::result::Result&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, anyhow::Error&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), anyhow::Error&gt;&gt;&gt;::from_iter&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;&gt;::{closure#0}, alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;&gt; (1 samples, 0.04%)</title><rect x="99.6334%" y="965" width="0.0367%" height="15" fill="rgb(249,199,1)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), core::iter::adapters::GenericShunt&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;, core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;&gt;&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="99.6334%" y="949" width="0.0367%" height="15" fill="rgb(240,85,17)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="959.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0} (1 samples, 0.04%)</title><rect x="99.6334%" y="933" width="0.0367%" height="15" fill="rgb(206,108,45)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="943.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::query (1 samples, 0.04%)</title><rect x="99.6334%" y="917" width="0.0367%" height="15" fill="rgb(245,210,41)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="927.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (1 samples, 0.04%)</title><rect x="99.6334%" y="901" width="0.0367%" height="15" fill="rgb(206,13,37)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="911.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (1 samples, 0.04%)</title><rect x="99.6334%" y="885" width="0.0367%" height="15" fill="rgb(250,61,18)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="895.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::query_inner_with_online (1 samples, 0.04%)</title><rect x="99.6334%" y="869" width="0.0367%" height="15" fill="rgb(235,172,48)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="879.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query::{closure#0} (1 samples, 0.04%)</title><rect x="99.6334%" y="853" width="0.0367%" height="15" fill="rgb(249,201,17)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="863.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query::{closure#2} (1 samples, 0.04%)</title><rect x="99.6334%" y="837" width="0.0367%" height="15" fill="rgb(219,208,6)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="847.50"></text></g><g><title>cargo::core::registry::lock (1 samples, 0.04%)</title><rect x="99.6334%" y="821" width="0.0367%" height="15" fill="rgb(248,31,23)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="831.50"></text></g><g><title>&lt;cargo::core::summary::Summary&gt;::map_dependencies::&lt;cargo::core::registry::lock::{closure#1}&gt; (1 samples, 0.04%)</title><rect x="99.6334%" y="805" width="0.0367%" height="15" fill="rgb(245,15,42)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;cargo::core::dependency::Dependency&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;cargo::core::dependency::Dependency, core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;cargo::core::dependency::Dependency&gt;, cargo::core::registry::lock::{closure#1}&gt;&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="99.6334%" y="789" width="0.0367%" height="15" fill="rgb(222,217,39)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="799.50"></text></g><g><title>cargo::core::registry::lock::{closure#1} (1 samples, 0.04%)</title><rect x="99.6334%" y="773" width="0.0367%" height="15" fill="rgb(210,219,27)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="783.50"></text></g><g><title>&lt;cargo::core::dependency::Dependency&gt;::lock_to (1 samples, 0.04%)</title><rect x="99.6334%" y="757" width="0.0367%" height="15" fill="rgb(252,166,36)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="767.50"></text></g><g><title>&lt;cargo::core::source::source_id::SourceId&gt;::with_precise (1 samples, 0.04%)</title><rect x="99.6334%" y="741" width="0.0367%" height="15" fill="rgb(245,132,34)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="99.6334%" y="725" width="0.0367%" height="15" fill="rgb(236,54,3)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="99.6334%" y="709" width="0.0367%" height="15" fill="rgb(241,173,43)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="99.6334%" y="693" width="0.0367%" height="15" fill="rgb(215,190,9)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="99.6334%" y="677" width="0.0367%" height="15" fill="rgb(242,101,16)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="99.6334%" y="661" width="0.0367%" height="15" fill="rgb(223,190,21)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="99.6334%" y="645" width="0.0367%" height="15" fill="rgb(215,228,25)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="99.6334%" y="629" width="0.0367%" height="15" fill="rgb(225,36,22)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="99.6334%" y="613" width="0.0367%" height="15" fill="rgb(251,106,46)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="99.6334%" y="597" width="0.0367%" height="15" fill="rgb(208,90,1)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="99.6334%" y="581" width="0.0367%" height="15" fill="rgb(243,10,4)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="591.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="99.6334%" y="565" width="0.0367%" height="15" fill="rgb(212,137,27)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="575.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="99.6334%" y="549" width="0.0367%" height="15" fill="rgb(231,220,49)" fg:x="2718" fg:w="1"/><text x="99.8834%" y="559.50"></text></g><g><title>cargo::main (1 samples, 0.04%)</title><rect x="99.6701%" y="1061" width="0.0367%" height="15" fill="rgb(237,96,20)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="1071.50"></text></g><g><title>cargo::cli::main (1 samples, 0.04%)</title><rect x="99.6701%" y="1045" width="0.0367%" height="15" fill="rgb(239,229,30)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="1055.50"></text></g><g><title>cargo::commands::metadata::exec (1 samples, 0.04%)</title><rect x="99.6701%" y="1029" width="0.0367%" height="15" fill="rgb(219,65,33)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="1039.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (1 samples, 0.04%)</title><rect x="99.6701%" y="1013" width="0.0367%" height="15" fill="rgb(243,134,7)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="1023.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (1 samples, 0.04%)</title><rect x="99.6701%" y="997" width="0.0367%" height="15" fill="rgb(216,177,54)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="1007.50"></text></g><g><title>&lt;cargo::core::package::PackageSet&gt;::download_accessible (1 samples, 0.04%)</title><rect x="99.6701%" y="981" width="0.0367%" height="15" fill="rgb(211,160,20)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="991.50"></text></g><g><title>&lt;cargo::core::package::Downloads&gt;::start (1 samples, 0.04%)</title><rect x="99.6701%" y="965" width="0.0367%" height="15" fill="rgb(239,85,39)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="975.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::download (1 samples, 0.04%)</title><rect x="99.6701%" y="949" width="0.0367%" height="15" fill="rgb(232,125,22)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="959.50"></text></g><g><title>&lt;cargo::sources::registry::remote::RemoteRegistry as cargo::sources::registry::RegistryData&gt;::download (1 samples, 0.04%)</title><rect x="99.6701%" y="933" width="0.0367%" height="15" fill="rgb(244,57,34)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="943.50"></text></g><g><title>&lt;cargo::sources::registry::remote::RemoteRegistry as cargo::sources::registry::RegistryData&gt;::config (1 samples, 0.04%)</title><rect x="99.6701%" y="917" width="0.0367%" height="15" fill="rgb(214,203,32)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="927.50"></text></g><g><title>&lt;cargo::sources::registry::remote::RemoteRegistry as cargo::sources::registry::RegistryData&gt;::load (1 samples, 0.04%)</title><rect x="99.6701%" y="901" width="0.0367%" height="15" fill="rgb(207,58,43)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="911.50"></text></g><g><title>&lt;git2::tree::TreeEntry&gt;::to_object (1 samples, 0.04%)</title><rect x="99.6701%" y="885" width="0.0367%" height="15" fill="rgb(215,193,15)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="895.50"></text></g><g><title>git_object_lookup_prefix (1 samples, 0.04%)</title><rect x="99.6701%" y="869" width="0.0367%" height="15" fill="rgb(232,15,44)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="879.50"></text></g><g><title>git_odb_read (1 samples, 0.04%)</title><rect x="99.6701%" y="853" width="0.0367%" height="15" fill="rgb(212,3,48)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="863.50"></text></g><g><title>odb_read_1 (1 samples, 0.04%)</title><rect x="99.6701%" y="837" width="0.0367%" height="15" fill="rgb(218,128,7)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="847.50"></text></g><g><title>git_odb__hashobj (1 samples, 0.04%)</title><rect x="99.6701%" y="821" width="0.0367%" height="15" fill="rgb(226,216,39)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="831.50"></text></g><g><title>git_hash_vec (1 samples, 0.04%)</title><rect x="99.6701%" y="805" width="0.0367%" height="15" fill="rgb(243,47,51)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="815.50"></text></g><g><title>git_hash_sha1_update (1 samples, 0.04%)</title><rect x="99.6701%" y="789" width="0.0367%" height="15" fill="rgb(241,183,40)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="799.50"></text></g><g><title>SHA1DCUpdate (1 samples, 0.04%)</title><rect x="99.6701%" y="773" width="0.0367%" height="15" fill="rgb(231,217,32)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="783.50"></text></g><g><title>sha1_process (1 samples, 0.04%)</title><rect x="99.6701%" y="757" width="0.0367%" height="15" fill="rgb(229,61,38)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="767.50"></text></g><g><title>sha1_compression_states (1 samples, 0.04%)</title><rect x="99.6701%" y="741" width="0.0367%" height="15" fill="rgb(225,210,5)" fg:x="2719" fg:w="1"/><text x="99.9201%" y="751.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (1 samples, 0.04%)</title><rect x="99.7067%" y="997" width="0.0367%" height="15" fill="rgb(231,79,45)" fg:x="2720" fg:w="1"/><text x="99.9567%" y="1007.50"></text></g><g><title>cargo::ops::lockfile::load_pkg_lockfile (1 samples, 0.04%)</title><rect x="99.7067%" y="981" width="0.0367%" height="15" fill="rgb(224,100,7)" fg:x="2720" fg:w="1"/><text x="99.9567%" y="991.50"></text></g><g><title>&lt;toml_edit::easy::value::Value as core::str::traits::FromStr&gt;::from_str (1 samples, 0.04%)</title><rect x="99.7067%" y="965" width="0.0367%" height="15" fill="rgb(241,198,18)" fg:x="2720" fg:w="1"/><text x="99.9567%" y="975.50"></text></g><g><title>toml_edit::de::from_str::&lt;toml_edit::easy::value::Value&gt; (1 samples, 0.04%)</title><rect x="99.7067%" y="949" width="0.0367%" height="15" fill="rgb(252,97,53)" fg:x="2720" fg:w="1"/><text x="99.9567%" y="959.50"></text></g><g><title>&lt;toml_edit::document::Document as core::str::traits::FromStr&gt;::from_str (1 samples, 0.04%)</title><rect x="99.7067%" y="933" width="0.0367%" height="15" fill="rgb(220,88,7)" fg:x="2720" fg:w="1"/><text x="99.9567%" y="943.50"></text></g><g><title>&lt;combine::parser::sequence::With&lt;toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::choice::Choice&lt;(combine::parser::token::Eof&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::repeat::SkipMany1&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;, combine::parser::sequence::Skip&lt;combine::parser::sequence::Then&lt;combine::parser::combinator::LookAhead&lt;combine::parser::token::Any&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;, &lt;toml_edit::parser::TomlParser&gt;::parse::{closure#0}&gt;, toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;&gt;)&gt;&gt; as combine::parser::EasyParser&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;::easy_parse (1 samples, 0.04%)</title><rect x="99.7067%" y="917" width="0.0367%" height="15" fill="rgb(213,176,14)" fg:x="2720" fg:w="1"/><text x="99.9567%" y="927.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse::&lt;combine::parser::sequence::With&lt;toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::choice::Choice&lt;(combine::parser::token::Eof&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, combine::parser::repeat::SkipMany1&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;, combine::parser::sequence::Skip&lt;combine::parser::sequence::Then&lt;combine::parser::combinator::LookAhead&lt;combine::parser::token::Any&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;, &lt;toml_edit::parser::TomlParser&gt;::parse::{closure#0}&gt;, toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;&gt;)&gt;&gt;, combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="99.7067%" y="901" width="0.0367%" height="15" fill="rgb(246,73,7)" fg:x="2720" fg:w="1"/><text x="99.9567%" y="911.50"></text></g><g><title>&lt;combine::parser::FirstMode as combine::parser::ParseMode&gt;::parse::&lt;combine::parser::combinator::Ignore&lt;&amp;mut combine::parser::sequence::Skip&lt;combine::parser::sequence::Then&lt;combine::parser::combinator::LookAhead&lt;combine::parser::token::Any&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;, &lt;toml_edit::parser::TomlParser&gt;::parse::{closure#0}&gt;, toml_edit::parser::document::parse_ws&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;&gt;, combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="99.7067%" y="885" width="0.0367%" height="15" fill="rgb(245,64,36)" fg:x="2720" fg:w="1"/><text x="99.9567%" y="895.50"></text></g><g><title>&lt;&lt;toml_edit::parser::TomlParser&gt;::parse::{closure#0}::Dispatch&lt;toml_edit::parser::document::parse_comment&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::parser::table::table&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::parser::document::parse_newline&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, toml_edit::parser::document::keyval&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode::&lt;combine::parser::FirstMode&gt; (1 samples, 0.04%)</title><rect x="99.7067%" y="869" width="0.0367%" height="15" fill="rgb(245,80,10)" fg:x="2720" fg:w="1"/><text x="99.9567%" y="879.50"></text></g><g><title>&lt;combine::parser::combinator::AndThen&lt;toml_edit::parser::document::parse_keyval&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;, &lt;toml_edit::parser::document::keyval&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl&lt;combine::parser::FirstMode&gt;::{closure#0}&gt; as combine::parser::Parser&lt;combine::stream::easy::Stream&lt;combine::stream::position::Stream&lt;&amp;[u8], combine::stream::position::IndexPositioner&gt;&gt;&gt;&gt;::parse_mode_impl::&lt;combine::parser::FirstMode&gt; (1 samples, 0.04%)</title><rect x="99.7067%" y="853" width="0.0367%" height="15" fill="rgb(232,107,50)" fg:x="2720" fg:w="1"/><text x="99.9567%" y="863.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="99.7067%" y="837" width="0.0367%" height="15" fill="rgb(253,3,0)" fg:x="2720" fg:w="1"/><text x="99.9567%" y="847.50"></text></g><g><title>cargo::cli::main (2 samples, 0.07%)</title><rect x="99.7067%" y="1061" width="0.0733%" height="15" fill="rgb(212,99,53)" fg:x="2720" fg:w="2"/><text x="99.9567%" y="1071.50"></text></g><g><title>cargo::commands::metadata::exec (2 samples, 0.07%)</title><rect x="99.7067%" y="1045" width="0.0733%" height="15" fill="rgb(249,111,54)" fg:x="2720" fg:w="2"/><text x="99.9567%" y="1055.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (2 samples, 0.07%)</title><rect x="99.7067%" y="1029" width="0.0733%" height="15" fill="rgb(249,55,30)" fg:x="2720" fg:w="2"/><text x="99.9567%" y="1039.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (2 samples, 0.07%)</title><rect x="99.7067%" y="1013" width="0.0733%" height="15" fill="rgb(237,47,42)" fg:x="2720" fg:w="2"/><text x="99.9567%" y="1023.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 0.04%)</title><rect x="99.7434%" y="997" width="0.0367%" height="15" fill="rgb(211,20,18)" fg:x="2721" fg:w="1"/><text x="99.9934%" y="1007.50"></text></g><g><title>cargo::core::resolver::resolve (1 samples, 0.04%)</title><rect x="99.7434%" y="981" width="0.0367%" height="15" fill="rgb(231,203,46)" fg:x="2721" fg:w="1"/><text x="99.9934%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;((core::option::Option&lt;cargo::core::package_id::PackageId&gt;, cargo::core::summary::Summary, cargo::core::resolver::types::ResolveOpts), (alloc::rc::Rc&lt;(std::collections::hash::set::HashSet&lt;cargo::util::interning::InternedString&gt;, alloc::rc::Rc&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;&gt;)&gt;, bool))&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="99.7434%" y="965" width="0.0367%" height="15" fill="rgb(237,142,3)" fg:x="2721" fg:w="1"/><text x="99.9934%" y="975.50"></text></g><g><title>core::ptr::drop_in_place::&lt;((core::option::Option&lt;cargo::core::package_id::PackageId&gt;, cargo::core::summary::Summary, cargo::core::resolver::types::ResolveOpts), (alloc::rc::Rc&lt;(std::collections::hash::set::HashSet&lt;cargo::util::interning::InternedString&gt;, alloc::rc::Rc&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;&gt;)&gt;, bool))&gt; (1 samples, 0.04%)</title><rect x="99.7434%" y="949" width="0.0367%" height="15" fill="rgb(241,107,1)" fg:x="2721" fg:w="1"/><text x="99.9934%" y="959.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="99.7434%" y="933" width="0.0367%" height="15" fill="rgb(229,83,13)" fg:x="2721" fg:w="1"/><text x="99.9934%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="99.7434%" y="917" width="0.0367%" height="15" fill="rgb(241,91,40)" fg:x="2721" fg:w="1"/><text x="99.9934%" y="927.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="99.7801%" y="1061" width="0.0367%" height="15" fill="rgb(225,3,45)" fg:x="2722" fg:w="1"/><text x="100.0301%" y="1071.50"></text></g><g><title>&lt;cargo::core::source::source_id::SourceId as core::cmp::Ord&gt;::cmp (1 samples, 0.04%)</title><rect x="99.8167%" y="1061" width="0.0367%" height="15" fill="rgb(244,223,14)" fg:x="2723" fg:w="1"/><text x="100.0667%" y="1071.50"></text></g><g><title>[unknown] (22 samples, 0.81%)</title><rect x="99.0836%" y="1077" width="0.8065%" height="15" fill="rgb(224,124,37)" fg:x="2703" fg:w="22"/><text x="99.3336%" y="1087.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="99.8900%" y="1077" width="0.0367%" height="15" fill="rgb(251,171,30)" fg:x="2725" fg:w="1"/><text x="100.1400%" y="1087.50"></text></g><g><title>&lt;&lt;cargo::util::toml::TomlManifest as serde::de::Deserialize&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::&lt;serde_ignored::MapAccess&lt;toml_edit::de::table::TableMapAccess, cargo::util::toml::read_manifest_from_str::{closure#1}&gt;&gt; (1 samples, 0.04%)</title><rect x="99.8900%" y="1061" width="0.0367%" height="15" fill="rgb(236,46,54)" fg:x="2725" fg:w="1"/><text x="100.1400%" y="1071.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="99.9267%" y="1077" width="0.0367%" height="15" fill="rgb(245,213,5)" fg:x="2726" fg:w="1"/><text x="100.1767%" y="1087.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="99.9267%" y="1061" width="0.0367%" height="15" fill="rgb(230,144,27)" fg:x="2726" fg:w="1"/><text x="100.1767%" y="1071.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="99.9267%" y="1045" width="0.0367%" height="15" fill="rgb(220,86,6)" fg:x="2726" fg:w="1"/><text x="100.1767%" y="1055.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="99.9267%" y="1029" width="0.0367%" height="15" fill="rgb(240,20,13)" fg:x="2726" fg:w="1"/><text x="100.1767%" y="1039.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="99.9267%" y="1013" width="0.0367%" height="15" fill="rgb(217,89,34)" fg:x="2726" fg:w="1"/><text x="100.1767%" y="1023.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="99.9267%" y="997" width="0.0367%" height="15" fill="rgb(229,13,5)" fg:x="2726" fg:w="1"/><text x="100.1767%" y="1007.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="99.9267%" y="981" width="0.0367%" height="15" fill="rgb(244,67,35)" fg:x="2726" fg:w="1"/><text x="100.1767%" y="991.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="99.9267%" y="965" width="0.0367%" height="15" fill="rgb(221,40,2)" fg:x="2726" fg:w="1"/><text x="100.1767%" y="975.50"></text></g><g><title>all (2,728 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(237,157,21)" fg:x="0" fg:w="2728"/><text x="0.2500%" y="1119.50"></text></g><g><title>cargo (28 samples, 1.03%)</title><rect x="98.9736%" y="1093" width="1.0264%" height="15" fill="rgb(222,94,11)" fg:x="2700" fg:w="28"/><text x="99.2236%" y="1103.50"></text></g><g><title>[[heap]] (1 samples, 0.04%)</title><rect x="99.9633%" y="1077" width="0.0367%" height="15" fill="rgb(249,113,6)" fg:x="2727" fg:w="1"/><text x="100.2133%" y="1087.50"></text></g><g><title>ec_GFp_mont_group_finish (1 samples, 0.04%)</title><rect x="99.9633%" y="1061" width="0.0367%" height="15" fill="rgb(238,137,36)" fg:x="2727" fg:w="1"/><text x="100.2133%" y="1071.50"></text></g></svg></svg>